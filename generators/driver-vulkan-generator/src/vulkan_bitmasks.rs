use std::{fs, path::Path};

use proc_macro2::{Ident, Span, TokenStream};
use quote::quote;

use crate::vulkan_types::TypeVulkan;

pub fn generate(project_directory: &Path, types: &TypeVulkan) {
    let mut quotes = Vec::new();
    quotes.push(quote! {
        //! THIS FILE IS GENERATED BY TOOL, DO NOT MODIFY.
    });

    for bitmask in &types.bitmasks {
        let name = Ident::new(&bitmask.name, Span::call_site());
        let ty = Ident::new(
            match bitmask.basetype.as_str() {
                "VkFlags" => "u32",
                "VkFlags64" => "u64",
                _ => unimplemented!("unsupported basetype"),
            },
            Span::call_site(),
        );
        quotes.push(quote! {
            pub type #name = #ty;
        });
    }

    for enumeration in &types.enumerations {
        if types.contains_bitmask(&enumeration.name) {
            continue;
        }

        let name = Ident::new(&enumeration.name, Span::call_site());
        quotes.push(quote! {
            pub type #name = u32;
        });
    }

    let path =
        project_directory.join("crates/driver-common-vulkan/src/generated/vulkan_bitmasks.rs");
    fs::create_dir_all(path.parent().unwrap()).expect("create directories");
    fs::write(
        path,
        quotes.into_iter().collect::<TokenStream>().to_string(),
    )
    .expect("write to a file");
}
