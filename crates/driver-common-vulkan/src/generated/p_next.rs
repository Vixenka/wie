#![doc = r" THIS FILE IS GENERATED BY TOOL, DO NOT MODIFY."]
use crate::generated::vulkan_types::*;
use ash::vk::StructureType;
use std::{ffi::c_void, fmt::Debug};
#[doc = r" # Safety"]
#[doc = r" Obj must be valid pointer to a structure supported by this function."]
pub unsafe fn p_next_cdebugger(obj: *const c_void) -> &'static dyn Debug {
    let ty = *(obj as *const StructureType);
    match ty {
        StructureType::APPLICATION_INFO => &*(obj as *const VkApplicationInfo),
        StructureType::INSTANCE_CREATE_INFO => &*(obj as *const VkInstanceCreateInfo),
        StructureType::DEVICE_QUEUE_CREATE_INFO => &*(obj as *const VkDeviceQueueCreateInfo),
        StructureType::DEVICE_CREATE_INFO => &*(obj as *const VkDeviceCreateInfo),
        StructureType::SUBMIT_INFO => &*(obj as *const VkSubmitInfo),
        StructureType::MEMORY_ALLOCATE_INFO => &*(obj as *const VkMemoryAllocateInfo),
        StructureType::MAPPED_MEMORY_RANGE => &*(obj as *const VkMappedMemoryRange),
        StructureType::BIND_SPARSE_INFO => &*(obj as *const VkBindSparseInfo),
        StructureType::FENCE_CREATE_INFO => &*(obj as *const VkFenceCreateInfo),
        StructureType::SEMAPHORE_CREATE_INFO => &*(obj as *const VkSemaphoreCreateInfo),
        StructureType::EVENT_CREATE_INFO => &*(obj as *const VkEventCreateInfo),
        StructureType::QUERY_POOL_CREATE_INFO => &*(obj as *const VkQueryPoolCreateInfo),
        StructureType::BUFFER_CREATE_INFO => &*(obj as *const VkBufferCreateInfo),
        StructureType::BUFFER_VIEW_CREATE_INFO => &*(obj as *const VkBufferViewCreateInfo),
        StructureType::IMAGE_CREATE_INFO => &*(obj as *const VkImageCreateInfo),
        StructureType::IMAGE_VIEW_CREATE_INFO => &*(obj as *const VkImageViewCreateInfo),
        StructureType::SHADER_MODULE_CREATE_INFO => &*(obj as *const VkShaderModuleCreateInfo),
        StructureType::PIPELINE_CACHE_CREATE_INFO => &*(obj as *const VkPipelineCacheCreateInfo),
        StructureType::PIPELINE_SHADER_STAGE_CREATE_INFO => {
            &*(obj as *const VkPipelineShaderStageCreateInfo)
        }
        StructureType::PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineVertexInputStateCreateInfo)
        }
        StructureType::PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineInputAssemblyStateCreateInfo)
        }
        StructureType::PIPELINE_TESSELLATION_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineTessellationStateCreateInfo)
        }
        StructureType::PIPELINE_VIEWPORT_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineViewportStateCreateInfo)
        }
        StructureType::PIPELINE_RASTERIZATION_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineRasterizationStateCreateInfo)
        }
        StructureType::PIPELINE_MULTISAMPLE_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineMultisampleStateCreateInfo)
        }
        StructureType::PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineDepthStencilStateCreateInfo)
        }
        StructureType::PIPELINE_COLOR_BLEND_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineColorBlendStateCreateInfo)
        }
        StructureType::PIPELINE_DYNAMIC_STATE_CREATE_INFO => {
            &*(obj as *const VkPipelineDynamicStateCreateInfo)
        }
        StructureType::GRAPHICS_PIPELINE_CREATE_INFO => {
            &*(obj as *const VkGraphicsPipelineCreateInfo)
        }
        StructureType::COMPUTE_PIPELINE_CREATE_INFO => {
            &*(obj as *const VkComputePipelineCreateInfo)
        }
        StructureType::PIPELINE_LAYOUT_CREATE_INFO => &*(obj as *const VkPipelineLayoutCreateInfo),
        StructureType::SAMPLER_CREATE_INFO => &*(obj as *const VkSamplerCreateInfo),
        StructureType::DESCRIPTOR_SET_LAYOUT_CREATE_INFO => {
            &*(obj as *const VkDescriptorSetLayoutCreateInfo)
        }
        StructureType::DESCRIPTOR_POOL_CREATE_INFO => &*(obj as *const VkDescriptorPoolCreateInfo),
        StructureType::DESCRIPTOR_SET_ALLOCATE_INFO => {
            &*(obj as *const VkDescriptorSetAllocateInfo)
        }
        StructureType::WRITE_DESCRIPTOR_SET => &*(obj as *const VkWriteDescriptorSet),
        StructureType::COPY_DESCRIPTOR_SET => &*(obj as *const VkCopyDescriptorSet),
        StructureType::FRAMEBUFFER_CREATE_INFO => &*(obj as *const VkFramebufferCreateInfo),
        StructureType::RENDER_PASS_CREATE_INFO => &*(obj as *const VkRenderPassCreateInfo),
        StructureType::COMMAND_POOL_CREATE_INFO => &*(obj as *const VkCommandPoolCreateInfo),
        StructureType::COMMAND_BUFFER_ALLOCATE_INFO => {
            &*(obj as *const VkCommandBufferAllocateInfo)
        }
        StructureType::COMMAND_BUFFER_INHERITANCE_INFO => {
            &*(obj as *const VkCommandBufferInheritanceInfo)
        }
        StructureType::COMMAND_BUFFER_BEGIN_INFO => &*(obj as *const VkCommandBufferBeginInfo),
        StructureType::RENDER_PASS_BEGIN_INFO => &*(obj as *const VkRenderPassBeginInfo),
        StructureType::BUFFER_MEMORY_BARRIER => &*(obj as *const VkBufferMemoryBarrier),
        StructureType::IMAGE_MEMORY_BARRIER => &*(obj as *const VkImageMemoryBarrier),
        StructureType::MEMORY_BARRIER => &*(obj as *const VkMemoryBarrier),
        StructureType::SWAPCHAIN_CREATE_INFO_KHR => &*(obj as *const VkSwapchainCreateInfoKHR),
        StructureType::PRESENT_INFO_KHR => &*(obj as *const VkPresentInfoKHR),
        StructureType::DEVICE_GROUP_PRESENT_CAPABILITIES_KHR => {
            &*(obj as *const VkDeviceGroupPresentCapabilitiesKHR)
        }
        StructureType::IMAGE_SWAPCHAIN_CREATE_INFO_KHR => {
            &*(obj as *const VkImageSwapchainCreateInfoKHR)
        }
        StructureType::BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR => {
            &*(obj as *const VkBindImageMemorySwapchainInfoKHR)
        }
        StructureType::ACQUIRE_NEXT_IMAGE_INFO_KHR => &*(obj as *const VkAcquireNextImageInfoKHR),
        StructureType::DEVICE_GROUP_PRESENT_INFO_KHR => {
            &*(obj as *const VkDeviceGroupPresentInfoKHR)
        }
        StructureType::DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR => {
            &*(obj as *const VkDeviceGroupSwapchainCreateInfoKHR)
        }
        StructureType::DISPLAY_MODE_CREATE_INFO_KHR => &*(obj as *const VkDisplayModeCreateInfoKHR),
        StructureType::DISPLAY_SURFACE_CREATE_INFO_KHR => {
            &*(obj as *const VkDisplaySurfaceCreateInfoKHR)
        }
        StructureType::DISPLAY_PRESENT_INFO_KHR => &*(obj as *const VkDisplayPresentInfoKHR),
        StructureType::XLIB_SURFACE_CREATE_INFO_KHR => &*(obj as *const VkXlibSurfaceCreateInfoKHR),
        StructureType::XCB_SURFACE_CREATE_INFO_KHR => &*(obj as *const VkXcbSurfaceCreateInfoKHR),
        StructureType::WAYLAND_SURFACE_CREATE_INFO_KHR => {
            &*(obj as *const VkWaylandSurfaceCreateInfoKHR)
        }
        StructureType::ANDROID_SURFACE_CREATE_INFO_KHR => {
            &*(obj as *const VkAndroidSurfaceCreateInfoKHR)
        }
        StructureType::WIN32_SURFACE_CREATE_INFO_KHR => {
            &*(obj as *const VkWin32SurfaceCreateInfoKHR)
        }
        StructureType::NATIVE_BUFFER_ANDROID => &*(obj as *const VkNativeBufferANDROID),
        StructureType::SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID => {
            &*(obj as *const VkSwapchainImageCreateInfoANDROID)
        }
        StructureType::PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID => {
            &*(obj as *const VkPhysicalDevicePresentationPropertiesANDROID)
        }
        StructureType::DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT => {
            &*(obj as *const VkDebugReportCallbackCreateInfoEXT)
        }
        StructureType::PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD => {
            &*(obj as *const VkPipelineRasterizationStateRasterizationOrderAMD)
        }
        StructureType::DEBUG_MARKER_OBJECT_NAME_INFO_EXT => {
            &*(obj as *const VkDebugMarkerObjectNameInfoEXT)
        }
        StructureType::DEBUG_MARKER_OBJECT_TAG_INFO_EXT => {
            &*(obj as *const VkDebugMarkerObjectTagInfoEXT)
        }
        StructureType::DEBUG_MARKER_MARKER_INFO_EXT => &*(obj as *const VkDebugMarkerMarkerInfoEXT),
        StructureType::VIDEO_PROFILE_INFO_KHR => &*(obj as *const VkVideoProfileInfoKHR),
        StructureType::VIDEO_CAPABILITIES_KHR => &*(obj as *const VkVideoCapabilitiesKHR),
        StructureType::VIDEO_PICTURE_RESOURCE_INFO_KHR => {
            &*(obj as *const VkVideoPictureResourceInfoKHR)
        }
        StructureType::VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR => {
            &*(obj as *const VkVideoSessionMemoryRequirementsKHR)
        }
        StructureType::BIND_VIDEO_SESSION_MEMORY_INFO_KHR => {
            &*(obj as *const VkBindVideoSessionMemoryInfoKHR)
        }
        StructureType::VIDEO_SESSION_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoSessionCreateInfoKHR)
        }
        StructureType::VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoSessionParametersCreateInfoKHR)
        }
        StructureType::VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR => {
            &*(obj as *const VkVideoSessionParametersUpdateInfoKHR)
        }
        StructureType::VIDEO_BEGIN_CODING_INFO_KHR => &*(obj as *const VkVideoBeginCodingInfoKHR),
        StructureType::VIDEO_END_CODING_INFO_KHR => &*(obj as *const VkVideoEndCodingInfoKHR),
        StructureType::VIDEO_CODING_CONTROL_INFO_KHR => {
            &*(obj as *const VkVideoCodingControlInfoKHR)
        }
        StructureType::VIDEO_REFERENCE_SLOT_INFO_KHR => {
            &*(obj as *const VkVideoReferenceSlotInfoKHR)
        }
        StructureType::QUEUE_FAMILY_VIDEO_PROPERTIES_KHR => {
            &*(obj as *const VkQueueFamilyVideoPropertiesKHR)
        }
        StructureType::VIDEO_PROFILE_LIST_INFO_KHR => &*(obj as *const VkVideoProfileListInfoKHR),
        StructureType::PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR => {
            &*(obj as *const VkPhysicalDeviceVideoFormatInfoKHR)
        }
        StructureType::VIDEO_FORMAT_PROPERTIES_KHR => &*(obj as *const VkVideoFormatPropertiesKHR),
        StructureType::QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR => {
            &*(obj as *const VkQueueFamilyQueryResultStatusPropertiesKHR)
        }
        StructureType::VIDEO_DECODE_INFO_KHR => &*(obj as *const VkVideoDecodeInfoKHR),
        StructureType::VIDEO_DECODE_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoDecodeCapabilitiesKHR)
        }
        StructureType::VIDEO_DECODE_USAGE_INFO_KHR => &*(obj as *const VkVideoDecodeUsageInfoKHR),
        StructureType::DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV => {
            &*(obj as *const VkDedicatedAllocationImageCreateInfoNV)
        }
        StructureType::DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV => {
            &*(obj as *const VkDedicatedAllocationBufferCreateInfoNV)
        }
        StructureType::DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV => {
            &*(obj as *const VkDedicatedAllocationMemoryAllocateInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceTransformFeedbackFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceTransformFeedbackPropertiesEXT)
        }
        StructureType::PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineRasterizationStateStreamCreateInfoEXT)
        }
        StructureType::CU_MODULE_CREATE_INFO_NVX => &*(obj as *const VkCuModuleCreateInfoNVX),
        StructureType::CU_FUNCTION_CREATE_INFO_NVX => &*(obj as *const VkCuFunctionCreateInfoNVX),
        StructureType::CU_LAUNCH_INFO_NVX => &*(obj as *const VkCuLaunchInfoNVX),
        StructureType::IMAGE_VIEW_HANDLE_INFO_NVX => &*(obj as *const VkImageViewHandleInfoNVX),
        StructureType::IMAGE_VIEW_ADDRESS_PROPERTIES_NVX => {
            &*(obj as *const VkImageViewAddressPropertiesNVX)
        }
        StructureType::VIDEO_ENCODE_H264_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoEncodeH264CapabilitiesKHR)
        }
        StructureType::VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264SessionParametersCreateInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264SessionParametersAddInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_PICTURE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264PictureInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264DpbSlotInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264NaluSliceInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264GopRemainingFrameInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_PROFILE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264ProfileInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264RateControlInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264RateControlLayerInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264SessionCreateInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR => {
            &*(obj as *const VkVideoEncodeH264QualityLevelPropertiesKHR)
        }
        StructureType::VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264SessionParametersGetInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH264SessionParametersFeedbackInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoEncodeH265CapabilitiesKHR)
        }
        StructureType::VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265SessionParametersCreateInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265SessionParametersAddInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_PICTURE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265PictureInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265DpbSlotInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265NaluSliceSegmentInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265GopRemainingFrameInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_PROFILE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265ProfileInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265RateControlInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265RateControlLayerInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265SessionCreateInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR => {
            &*(obj as *const VkVideoEncodeH265QualityLevelPropertiesKHR)
        }
        StructureType::VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265SessionParametersGetInfoKHR)
        }
        StructureType::VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR => {
            &*(obj as *const VkVideoEncodeH265SessionParametersFeedbackInfoKHR)
        }
        StructureType::VIDEO_DECODE_H264_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoDecodeH264CapabilitiesKHR)
        }
        StructureType::VIDEO_DECODE_H264_PICTURE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH264PictureInfoKHR)
        }
        StructureType::VIDEO_DECODE_H264_PROFILE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH264ProfileInfoKHR)
        }
        StructureType::VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH264SessionParametersCreateInfoKHR)
        }
        StructureType::VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH264SessionParametersAddInfoKHR)
        }
        StructureType::VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH264DpbSlotInfoKHR)
        }
        StructureType::TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD => {
            &*(obj as *const VkTextureLODGatherFormatPropertiesAMD)
        }
        StructureType::RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR => {
            &*(obj as *const VkRenderingFragmentShadingRateAttachmentInfoKHR)
        }
        StructureType::RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT => {
            &*(obj as *const VkRenderingFragmentDensityMapAttachmentInfoEXT)
        }
        StructureType::ATTACHMENT_SAMPLE_COUNT_INFO_AMD => {
            &*(obj as *const VkAttachmentSampleCountInfoAMD)
        }
        StructureType::MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX => {
            &*(obj as *const VkMultiviewPerViewAttributesInfoNVX)
        }
        StructureType::STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP => {
            &*(obj as *const VkStreamDescriptorSurfaceCreateInfoGGP)
        }
        StructureType::PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceCornerSampledImageFeaturesNV)
        }
        StructureType::EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV => {
            &*(obj as *const VkExternalMemoryImageCreateInfoNV)
        }
        StructureType::EXPORT_MEMORY_ALLOCATE_INFO_NV => {
            &*(obj as *const VkExportMemoryAllocateInfoNV)
        }
        StructureType::IMPORT_MEMORY_WIN32_HANDLE_INFO_NV => {
            &*(obj as *const VkImportMemoryWin32HandleInfoNV)
        }
        StructureType::EXPORT_MEMORY_WIN32_HANDLE_INFO_NV => {
            &*(obj as *const VkExportMemoryWin32HandleInfoNV)
        }
        StructureType::WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV => {
            &*(obj as *const VkWin32KeyedMutexAcquireReleaseInfoNV)
        }
        StructureType::VALIDATION_FLAGS_EXT => &*(obj as *const VkValidationFlagsEXT),
        StructureType::VI_SURFACE_CREATE_INFO_NN => &*(obj as *const VkViSurfaceCreateInfoNN),
        StructureType::IMAGE_VIEW_ASTC_DECODE_MODE_EXT => {
            &*(obj as *const VkImageViewASTCDecodeModeEXT)
        }
        StructureType::PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceASTCDecodeFeaturesEXT)
        }
        StructureType::PIPELINE_ROBUSTNESS_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineRobustnessCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePipelineRobustnessFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDevicePipelineRobustnessPropertiesEXT)
        }
        StructureType::IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkImportMemoryWin32HandleInfoKHR)
        }
        StructureType::EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkExportMemoryWin32HandleInfoKHR)
        }
        StructureType::MEMORY_WIN32_HANDLE_PROPERTIES_KHR => {
            &*(obj as *const VkMemoryWin32HandlePropertiesKHR)
        }
        StructureType::MEMORY_GET_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkMemoryGetWin32HandleInfoKHR)
        }
        StructureType::IMPORT_MEMORY_FD_INFO_KHR => &*(obj as *const VkImportMemoryFdInfoKHR),
        StructureType::MEMORY_FD_PROPERTIES_KHR => &*(obj as *const VkMemoryFdPropertiesKHR),
        StructureType::MEMORY_GET_FD_INFO_KHR => &*(obj as *const VkMemoryGetFdInfoKHR),
        StructureType::WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR => {
            &*(obj as *const VkWin32KeyedMutexAcquireReleaseInfoKHR)
        }
        StructureType::IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkImportSemaphoreWin32HandleInfoKHR)
        }
        StructureType::EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkExportSemaphoreWin32HandleInfoKHR)
        }
        StructureType::D3D12_FENCE_SUBMIT_INFO_KHR => &*(obj as *const VkD3D12FenceSubmitInfoKHR),
        StructureType::SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkSemaphoreGetWin32HandleInfoKHR)
        }
        StructureType::IMPORT_SEMAPHORE_FD_INFO_KHR => &*(obj as *const VkImportSemaphoreFdInfoKHR),
        StructureType::SEMAPHORE_GET_FD_INFO_KHR => &*(obj as *const VkSemaphoreGetFdInfoKHR),
        StructureType::PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDevicePushDescriptorPropertiesKHR)
        }
        StructureType::COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT => {
            &*(obj as *const VkCommandBufferInheritanceConditionalRenderingInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceConditionalRenderingFeaturesEXT)
        }
        StructureType::CONDITIONAL_RENDERING_BEGIN_INFO_EXT => {
            &*(obj as *const VkConditionalRenderingBeginInfoEXT)
        }
        StructureType::PRESENT_REGIONS_KHR => &*(obj as *const VkPresentRegionsKHR),
        StructureType::PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineViewportWScalingStateCreateInfoNV)
        }
        StructureType::SURFACE_CAPABILITIES_2_EXT => &*(obj as *const VkSurfaceCapabilities2EXT),
        StructureType::DISPLAY_POWER_INFO_EXT => &*(obj as *const VkDisplayPowerInfoEXT),
        StructureType::DEVICE_EVENT_INFO_EXT => &*(obj as *const VkDeviceEventInfoEXT),
        StructureType::DISPLAY_EVENT_INFO_EXT => &*(obj as *const VkDisplayEventInfoEXT),
        StructureType::SWAPCHAIN_COUNTER_CREATE_INFO_EXT => {
            &*(obj as *const VkSwapchainCounterCreateInfoEXT)
        }
        StructureType::PRESENT_TIMES_INFO_GOOGLE => &*(obj as *const VkPresentTimesInfoGOOGLE),
        StructureType::PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX => {
            &*(obj as *const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)
        }
        StructureType::PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineViewportSwizzleStateCreateInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceDiscardRectanglePropertiesEXT)
        }
        StructureType::PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineDiscardRectangleStateCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceConservativeRasterizationPropertiesEXT)
        }
        StructureType::PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineRasterizationConservativeStateCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDepthClipEnableFeaturesEXT)
        }
        StructureType::PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineRasterizationDepthClipStateCreateInfoEXT)
        }
        StructureType::HDR_METADATA_EXT => &*(obj as *const VkHdrMetadataEXT),
        StructureType::PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG => {
            &*(obj as *const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG)
        }
        StructureType::SHARED_PRESENT_SURFACE_CAPABILITIES_KHR => {
            &*(obj as *const VkSharedPresentSurfaceCapabilitiesKHR)
        }
        StructureType::IMPORT_FENCE_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkImportFenceWin32HandleInfoKHR)
        }
        StructureType::EXPORT_FENCE_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkExportFenceWin32HandleInfoKHR)
        }
        StructureType::FENCE_GET_WIN32_HANDLE_INFO_KHR => {
            &*(obj as *const VkFenceGetWin32HandleInfoKHR)
        }
        StructureType::IMPORT_FENCE_FD_INFO_KHR => &*(obj as *const VkImportFenceFdInfoKHR),
        StructureType::FENCE_GET_FD_INFO_KHR => &*(obj as *const VkFenceGetFdInfoKHR),
        StructureType::PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDevicePerformanceQueryFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDevicePerformanceQueryPropertiesKHR)
        }
        StructureType::QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR => {
            &*(obj as *const VkQueryPoolPerformanceCreateInfoKHR)
        }
        StructureType::PERFORMANCE_QUERY_SUBMIT_INFO_KHR => {
            &*(obj as *const VkPerformanceQuerySubmitInfoKHR)
        }
        StructureType::ACQUIRE_PROFILING_LOCK_INFO_KHR => {
            &*(obj as *const VkAcquireProfilingLockInfoKHR)
        }
        StructureType::PERFORMANCE_COUNTER_KHR => &*(obj as *const VkPerformanceCounterKHR),
        StructureType::PERFORMANCE_COUNTER_DESCRIPTION_KHR => {
            &*(obj as *const VkPerformanceCounterDescriptionKHR)
        }
        StructureType::PHYSICAL_DEVICE_SURFACE_INFO_2_KHR => {
            &*(obj as *const VkPhysicalDeviceSurfaceInfo2KHR)
        }
        StructureType::SURFACE_CAPABILITIES_2_KHR => &*(obj as *const VkSurfaceCapabilities2KHR),
        StructureType::SURFACE_FORMAT_2_KHR => &*(obj as *const VkSurfaceFormat2KHR),
        StructureType::DISPLAY_PROPERTIES_2_KHR => &*(obj as *const VkDisplayProperties2KHR),
        StructureType::DISPLAY_PLANE_PROPERTIES_2_KHR => {
            &*(obj as *const VkDisplayPlaneProperties2KHR)
        }
        StructureType::DISPLAY_MODE_PROPERTIES_2_KHR => {
            &*(obj as *const VkDisplayModeProperties2KHR)
        }
        StructureType::DISPLAY_PLANE_INFO_2_KHR => &*(obj as *const VkDisplayPlaneInfo2KHR),
        StructureType::DISPLAY_PLANE_CAPABILITIES_2_KHR => {
            &*(obj as *const VkDisplayPlaneCapabilities2KHR)
        }
        StructureType::IOS_SURFACE_CREATE_INFO_MVK => &*(obj as *const VkIOSSurfaceCreateInfoMVK),
        StructureType::MACOS_SURFACE_CREATE_INFO_MVK => {
            &*(obj as *const VkMacOSSurfaceCreateInfoMVK)
        }
        StructureType::DEBUG_UTILS_OBJECT_NAME_INFO_EXT => {
            &*(obj as *const VkDebugUtilsObjectNameInfoEXT)
        }
        StructureType::DEBUG_UTILS_OBJECT_TAG_INFO_EXT => {
            &*(obj as *const VkDebugUtilsObjectTagInfoEXT)
        }
        StructureType::DEBUG_UTILS_LABEL_EXT => &*(obj as *const VkDebugUtilsLabelEXT),
        StructureType::DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT => {
            &*(obj as *const VkDebugUtilsMessengerCallbackDataEXT)
        }
        StructureType::DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT => {
            &*(obj as *const VkDebugUtilsMessengerCreateInfoEXT)
        }
        StructureType::ANDROID_HARDWARE_BUFFER_USAGE_ANDROID => {
            &*(obj as *const VkAndroidHardwareBufferUsageANDROID)
        }
        StructureType::ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID => {
            &*(obj as *const VkAndroidHardwareBufferPropertiesANDROID)
        }
        StructureType::ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID => {
            &*(obj as *const VkAndroidHardwareBufferFormatPropertiesANDROID)
        }
        StructureType::IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID => {
            &*(obj as *const VkImportAndroidHardwareBufferInfoANDROID)
        }
        StructureType::MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID => {
            &*(obj as *const VkMemoryGetAndroidHardwareBufferInfoANDROID)
        }
        StructureType::EXTERNAL_FORMAT_ANDROID => &*(obj as *const VkExternalFormatANDROID),
        StructureType::ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID => {
            &*(obj as *const VkAndroidHardwareBufferFormatProperties2ANDROID)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX => {
            &*(obj as *const VkPhysicalDeviceShaderEnqueueFeaturesAMDX)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX => {
            &*(obj as *const VkPhysicalDeviceShaderEnqueuePropertiesAMDX)
        }
        StructureType::EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX => {
            &*(obj as *const VkExecutionGraphPipelineScratchSizeAMDX)
        }
        StructureType::EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX => {
            &*(obj as *const VkExecutionGraphPipelineCreateInfoAMDX)
        }
        StructureType::PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX => {
            &*(obj as *const VkPipelineShaderStageNodeCreateInfoAMDX)
        }
        StructureType::SAMPLE_LOCATIONS_INFO_EXT => &*(obj as *const VkSampleLocationsInfoEXT),
        StructureType::RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT => {
            &*(obj as *const VkRenderPassSampleLocationsBeginInfoEXT)
        }
        StructureType::PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineSampleLocationsStateCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceSampleLocationsPropertiesEXT)
        }
        StructureType::MULTISAMPLE_PROPERTIES_EXT => &*(obj as *const VkMultisamplePropertiesEXT),
        StructureType::PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)
        }
        StructureType::PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineColorBlendAdvancedStateCreateInfoEXT)
        }
        StructureType::PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineCoverageToColorStateCreateInfoNV)
        }
        StructureType::WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR => {
            &*(obj as *const VkWriteDescriptorSetAccelerationStructureKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR => {
            &*(obj as *const VkAccelerationStructureBuildGeometryInfoKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR => {
            &*(obj as *const VkAccelerationStructureDeviceAddressInfoKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR => {
            &*(obj as *const VkAccelerationStructureGeometryAabbsDataKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR => {
            &*(obj as *const VkAccelerationStructureGeometryInstancesDataKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR => {
            &*(obj as *const VkAccelerationStructureGeometryTrianglesDataKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_GEOMETRY_KHR => {
            &*(obj as *const VkAccelerationStructureGeometryKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_VERSION_INFO_KHR => {
            &*(obj as *const VkAccelerationStructureVersionInfoKHR)
        }
        StructureType::COPY_ACCELERATION_STRUCTURE_INFO_KHR => {
            &*(obj as *const VkCopyAccelerationStructureInfoKHR)
        }
        StructureType::COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR => {
            &*(obj as *const VkCopyAccelerationStructureToMemoryInfoKHR)
        }
        StructureType::COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR => {
            &*(obj as *const VkCopyMemoryToAccelerationStructureInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceAccelerationStructureFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceAccelerationStructurePropertiesKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_CREATE_INFO_KHR => {
            &*(obj as *const VkAccelerationStructureCreateInfoKHR)
        }
        StructureType::ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR => {
            &*(obj as *const VkAccelerationStructureBuildSizesInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceRayTracingPipelineFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceRayTracingPipelinePropertiesKHR)
        }
        StructureType::RAY_TRACING_PIPELINE_CREATE_INFO_KHR => {
            &*(obj as *const VkRayTracingPipelineCreateInfoKHR)
        }
        StructureType::RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR => {
            &*(obj as *const VkRayTracingShaderGroupCreateInfoKHR)
        }
        StructureType::RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR => {
            &*(obj as *const VkRayTracingPipelineInterfaceCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceRayQueryFeaturesKHR)
        }
        StructureType::PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineCoverageModulationStateCreateInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV)
        }
        StructureType::DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT => {
            &*(obj as *const VkDrmFormatModifierPropertiesListEXT)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT => {
            &*(obj as *const VkPhysicalDeviceImageDrmFormatModifierInfoEXT)
        }
        StructureType::IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT => {
            &*(obj as *const VkImageDrmFormatModifierListCreateInfoEXT)
        }
        StructureType::IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT => {
            &*(obj as *const VkImageDrmFormatModifierExplicitCreateInfoEXT)
        }
        StructureType::IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT => {
            &*(obj as *const VkImageDrmFormatModifierPropertiesEXT)
        }
        StructureType::DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT => {
            &*(obj as *const VkDrmFormatModifierPropertiesList2EXT)
        }
        StructureType::VALIDATION_CACHE_CREATE_INFO_EXT => {
            &*(obj as *const VkValidationCacheCreateInfoEXT)
        }
        StructureType::SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT => {
            &*(obj as *const VkShaderModuleValidationCacheCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDevicePortabilitySubsetFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDevicePortabilitySubsetPropertiesKHR)
        }
        StructureType::PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineViewportShadingRateImageStateCreateInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceShadingRateImageFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceShadingRateImagePropertiesNV)
        }
        StructureType::PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)
        }
        StructureType::RAY_TRACING_PIPELINE_CREATE_INFO_NV => {
            &*(obj as *const VkRayTracingPipelineCreateInfoNV)
        }
        StructureType::ACCELERATION_STRUCTURE_CREATE_INFO_NV => {
            &*(obj as *const VkAccelerationStructureCreateInfoNV)
        }
        StructureType::GEOMETRY_NV => &*(obj as *const VkGeometryNV),
        StructureType::GEOMETRY_TRIANGLES_NV => &*(obj as *const VkGeometryTrianglesNV),
        StructureType::GEOMETRY_AABB_NV => &*(obj as *const VkGeometryAABBNV),
        StructureType::BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV => {
            &*(obj as *const VkBindAccelerationStructureMemoryInfoNV)
        }
        StructureType::WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV => {
            &*(obj as *const VkWriteDescriptorSetAccelerationStructureNV)
        }
        StructureType::ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV => {
            &*(obj as *const VkAccelerationStructureMemoryRequirementsInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceRayTracingPropertiesNV)
        }
        StructureType::RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV => {
            &*(obj as *const VkRayTracingShaderGroupCreateInfoNV)
        }
        StructureType::ACCELERATION_STRUCTURE_INFO_NV => {
            &*(obj as *const VkAccelerationStructureInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)
        }
        StructureType::PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineRepresentativeFragmentTestStateCreateInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT => {
            &*(obj as *const VkPhysicalDeviceImageViewImageFormatInfoEXT)
        }
        StructureType::FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT => {
            &*(obj as *const VkFilterCubicImageViewImageFormatPropertiesEXT)
        }
        StructureType::IMPORT_MEMORY_HOST_POINTER_INFO_EXT => {
            &*(obj as *const VkImportMemoryHostPointerInfoEXT)
        }
        StructureType::MEMORY_HOST_POINTER_PROPERTIES_EXT => {
            &*(obj as *const VkMemoryHostPointerPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceExternalMemoryHostPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderClockFeaturesKHR)
        }
        StructureType::PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD => {
            &*(obj as *const VkPipelineCompilerControlCreateInfoAMD)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD => {
            &*(obj as *const VkPhysicalDeviceShaderCorePropertiesAMD)
        }
        StructureType::VIDEO_DECODE_H265_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoDecodeH265CapabilitiesKHR)
        }
        StructureType::VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH265SessionParametersCreateInfoKHR)
        }
        StructureType::VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH265SessionParametersAddInfoKHR)
        }
        StructureType::VIDEO_DECODE_H265_PROFILE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH265ProfileInfoKHR)
        }
        StructureType::VIDEO_DECODE_H265_PICTURE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH265PictureInfoKHR)
        }
        StructureType::VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR => {
            &*(obj as *const VkVideoDecodeH265DpbSlotInfoKHR)
        }
        StructureType::DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR => {
            &*(obj as *const VkDeviceQueueGlobalPriorityCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR)
        }
        StructureType::QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR => {
            &*(obj as *const VkQueueFamilyGlobalPriorityPropertiesKHR)
        }
        StructureType::DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD => {
            &*(obj as *const VkDeviceMemoryOverallocationCreateInfoAMD)
        }
        StructureType::PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)
        }
        StructureType::PRESENT_FRAME_TOKEN_GGP => &*(obj as *const VkPresentFrameTokenGGP),
        StructureType::PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceMeshShaderFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceMeshShaderPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceShaderImageFootprintFeaturesNV)
        }
        StructureType::PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineViewportExclusiveScissorStateCreateInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceExclusiveScissorFeaturesNV)
        }
        StructureType::CHECKPOINT_DATA_NV => &*(obj as *const VkCheckpointDataNV),
        StructureType::QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV => {
            &*(obj as *const VkQueueFamilyCheckpointPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL => {
            &*(obj as *const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL)
        }
        StructureType::QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL => {
            &*(obj as *const VkQueryPoolPerformanceQueryCreateInfoINTEL)
        }
        StructureType::INITIALIZE_PERFORMANCE_API_INFO_INTEL => {
            &*(obj as *const VkInitializePerformanceApiInfoINTEL)
        }
        StructureType::PERFORMANCE_MARKER_INFO_INTEL => {
            &*(obj as *const VkPerformanceMarkerInfoINTEL)
        }
        StructureType::PERFORMANCE_STREAM_MARKER_INFO_INTEL => {
            &*(obj as *const VkPerformanceStreamMarkerInfoINTEL)
        }
        StructureType::PERFORMANCE_OVERRIDE_INFO_INTEL => {
            &*(obj as *const VkPerformanceOverrideInfoINTEL)
        }
        StructureType::PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL => {
            &*(obj as *const VkPerformanceConfigurationAcquireInfoINTEL)
        }
        StructureType::PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDevicePCIBusInfoPropertiesEXT)
        }
        StructureType::DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD => {
            &*(obj as *const VkDisplayNativeHdrSurfaceCapabilitiesAMD)
        }
        StructureType::SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD => {
            &*(obj as *const VkSwapchainDisplayNativeHdrCreateInfoAMD)
        }
        StructureType::IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA => {
            &*(obj as *const VkImagePipeSurfaceCreateInfoFUCHSIA)
        }
        StructureType::METAL_SURFACE_CREATE_INFO_EXT => {
            &*(obj as *const VkMetalSurfaceCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceFragmentDensityMapFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceFragmentDensityMapPropertiesEXT)
        }
        StructureType::RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT => {
            &*(obj as *const VkRenderPassFragmentDensityMapCreateInfoEXT)
        }
        StructureType::FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR => {
            &*(obj as *const VkFragmentShadingRateAttachmentInfoKHR)
        }
        StructureType::PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR => {
            &*(obj as *const VkPipelineFragmentShadingRateStateCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceFragmentShadingRatePropertiesKHR)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceFragmentShadingRateFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR => {
            &*(obj as *const VkPhysicalDeviceFragmentShadingRateKHR)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD => {
            &*(obj as *const VkPhysicalDeviceShaderCoreProperties2AMD)
        }
        StructureType::PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD => {
            &*(obj as *const VkPhysicalDeviceCoherentMemoryFeaturesAMD)
        }
        StructureType::PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR)
        }
        StructureType::RENDERING_ATTACHMENT_LOCATION_INFO_KHR => {
            &*(obj as *const VkRenderingAttachmentLocationInfoKHR)
        }
        StructureType::RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR => {
            &*(obj as *const VkRenderingInputAttachmentIndexInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderQuadControlFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceMemoryBudgetPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceMemoryPriorityFeaturesEXT)
        }
        StructureType::MEMORY_PRIORITY_ALLOCATE_INFO_EXT => {
            &*(obj as *const VkMemoryPriorityAllocateInfoEXT)
        }
        StructureType::SURFACE_PROTECTED_CAPABILITIES_KHR => {
            &*(obj as *const VkSurfaceProtectedCapabilitiesKHR)
        }
        StructureType::PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT)
        }
        StructureType::BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT => {
            &*(obj as *const VkBufferDeviceAddressCreateInfoEXT)
        }
        StructureType::VALIDATION_FEATURES_EXT => &*(obj as *const VkValidationFeaturesEXT),
        StructureType::PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDevicePresentWaitFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceCooperativeMatrixFeaturesNV)
        }
        StructureType::COOPERATIVE_MATRIX_PROPERTIES_NV => {
            &*(obj as *const VkCooperativeMatrixPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceCooperativeMatrixPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceCoverageReductionModeFeaturesNV)
        }
        StructureType::PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineCoverageReductionStateCreateInfoNV)
        }
        StructureType::FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV => {
            &*(obj as *const VkFramebufferMixedSamplesCombinationNV)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceProvokingVertexFeaturesEXT)
        }
        StructureType::PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceProvokingVertexPropertiesEXT)
        }
        StructureType::SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT => {
            &*(obj as *const VkSurfaceFullScreenExclusiveInfoEXT)
        }
        StructureType::SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT => {
            &*(obj as *const VkSurfaceCapabilitiesFullScreenExclusiveEXT)
        }
        StructureType::SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT => {
            &*(obj as *const VkSurfaceFullScreenExclusiveWin32InfoEXT)
        }
        StructureType::HEADLESS_SURFACE_CREATE_INFO_EXT => {
            &*(obj as *const VkHeadlessSurfaceCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR)
        }
        StructureType::PIPELINE_INFO_KHR => &*(obj as *const VkPipelineInfoKHR),
        StructureType::PIPELINE_EXECUTABLE_PROPERTIES_KHR => {
            &*(obj as *const VkPipelineExecutablePropertiesKHR)
        }
        StructureType::PIPELINE_EXECUTABLE_INFO_KHR => {
            &*(obj as *const VkPipelineExecutableInfoKHR)
        }
        StructureType::PIPELINE_EXECUTABLE_STATISTIC_KHR => {
            &*(obj as *const VkPipelineExecutableStatisticKHR)
        }
        StructureType::PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR => {
            &*(obj as *const VkPipelineExecutableInternalRepresentationKHR)
        }
        StructureType::PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceHostImageCopyFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceHostImageCopyPropertiesEXT)
        }
        StructureType::MEMORY_TO_IMAGE_COPY_EXT => &*(obj as *const VkMemoryToImageCopyEXT),
        StructureType::IMAGE_TO_MEMORY_COPY_EXT => &*(obj as *const VkImageToMemoryCopyEXT),
        StructureType::COPY_IMAGE_TO_MEMORY_INFO_EXT => {
            &*(obj as *const VkCopyImageToMemoryInfoEXT)
        }
        StructureType::COPY_MEMORY_TO_IMAGE_INFO_EXT => {
            &*(obj as *const VkCopyMemoryToImageInfoEXT)
        }
        StructureType::HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT => {
            &*(obj as *const VkHostImageLayoutTransitionInfoEXT)
        }
        StructureType::COPY_IMAGE_TO_IMAGE_INFO_EXT => &*(obj as *const VkCopyImageToImageInfoEXT),
        StructureType::SUBRESOURCE_HOST_MEMCPY_SIZE_EXT => {
            &*(obj as *const VkSubresourceHostMemcpySizeEXT)
        }
        StructureType::HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT => {
            &*(obj as *const VkHostImageCopyDevicePerformanceQueryEXT)
        }
        StructureType::MEMORY_MAP_INFO_KHR => &*(obj as *const VkMemoryMapInfoKHR),
        StructureType::MEMORY_UNMAP_INFO_KHR => &*(obj as *const VkMemoryUnmapInfoKHR),
        StructureType::PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceMapMemoryPlacedFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceMapMemoryPlacedPropertiesEXT)
        }
        StructureType::MEMORY_MAP_PLACED_INFO_EXT => &*(obj as *const VkMemoryMapPlacedInfoEXT),
        StructureType::PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT)
        }
        StructureType::SURFACE_PRESENT_MODE_EXT => &*(obj as *const VkSurfacePresentModeEXT),
        StructureType::SURFACE_PRESENT_SCALING_CAPABILITIES_EXT => {
            &*(obj as *const VkSurfacePresentScalingCapabilitiesEXT)
        }
        StructureType::SURFACE_PRESENT_MODE_COMPATIBILITY_EXT => {
            &*(obj as *const VkSurfacePresentModeCompatibilityEXT)
        }
        StructureType::PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT)
        }
        StructureType::SWAPCHAIN_PRESENT_FENCE_INFO_EXT => {
            &*(obj as *const VkSwapchainPresentFenceInfoEXT)
        }
        StructureType::SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT => {
            &*(obj as *const VkSwapchainPresentModesCreateInfoEXT)
        }
        StructureType::SWAPCHAIN_PRESENT_MODE_INFO_EXT => {
            &*(obj as *const VkSwapchainPresentModeInfoEXT)
        }
        StructureType::SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT => {
            &*(obj as *const VkSwapchainPresentScalingCreateInfoEXT)
        }
        StructureType::RELEASE_SWAPCHAIN_IMAGES_INFO_EXT => {
            &*(obj as *const VkReleaseSwapchainImagesInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV)
        }
        StructureType::GRAPHICS_SHADER_GROUP_CREATE_INFO_NV => {
            &*(obj as *const VkGraphicsShaderGroupCreateInfoNV)
        }
        StructureType::GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV => {
            &*(obj as *const VkGraphicsPipelineShaderGroupsCreateInfoNV)
        }
        StructureType::INDIRECT_COMMANDS_LAYOUT_TOKEN_NV => {
            &*(obj as *const VkIndirectCommandsLayoutTokenNV)
        }
        StructureType::INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV => {
            &*(obj as *const VkIndirectCommandsLayoutCreateInfoNV)
        }
        StructureType::GENERATED_COMMANDS_INFO_NV => &*(obj as *const VkGeneratedCommandsInfoNV),
        StructureType::GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV => {
            &*(obj as *const VkGeneratedCommandsMemoryRequirementsInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceInheritedViewportScissorFeaturesNV)
        }
        StructureType::COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV => {
            &*(obj as *const VkCommandBufferInheritanceViewportScissorInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT)
        }
        StructureType::COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM => {
            &*(obj as *const VkCommandBufferInheritanceRenderPassTransformInfoQCOM)
        }
        StructureType::RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM => {
            &*(obj as *const VkRenderPassTransformBeginInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDepthBiasControlFeaturesEXT)
        }
        StructureType::DEPTH_BIAS_INFO_EXT => &*(obj as *const VkDepthBiasInfoEXT),
        StructureType::DEPTH_BIAS_REPRESENTATION_INFO_EXT => {
            &*(obj as *const VkDepthBiasRepresentationInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT)
        }
        StructureType::DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT => {
            &*(obj as *const VkDeviceDeviceMemoryReportCreateInfoEXT)
        }
        StructureType::DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT => {
            &*(obj as *const VkDeviceMemoryReportCallbackDataEXT)
        }
        StructureType::PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceRobustness2FeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceRobustness2PropertiesEXT)
        }
        StructureType::SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT => {
            &*(obj as *const VkSamplerCustomBorderColorCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceCustomBorderColorPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceCustomBorderColorFeaturesEXT)
        }
        StructureType::PIPELINE_LIBRARY_CREATE_INFO_KHR => {
            &*(obj as *const VkPipelineLibraryCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV => {
            &*(obj as *const VkPhysicalDevicePresentBarrierFeaturesNV)
        }
        StructureType::SURFACE_CAPABILITIES_PRESENT_BARRIER_NV => {
            &*(obj as *const VkSurfaceCapabilitiesPresentBarrierNV)
        }
        StructureType::SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV => {
            &*(obj as *const VkSwapchainPresentBarrierCreateInfoNV)
        }
        StructureType::PRESENT_ID_KHR => &*(obj as *const VkPresentIdKHR),
        StructureType::PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDevicePresentIdFeaturesKHR)
        }
        StructureType::VIDEO_ENCODE_INFO_KHR => &*(obj as *const VkVideoEncodeInfoKHR),
        StructureType::VIDEO_ENCODE_RATE_CONTROL_INFO_KHR => {
            &*(obj as *const VkVideoEncodeRateControlInfoKHR)
        }
        StructureType::VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR => {
            &*(obj as *const VkVideoEncodeRateControlLayerInfoKHR)
        }
        StructureType::VIDEO_ENCODE_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoEncodeCapabilitiesKHR)
        }
        StructureType::VIDEO_ENCODE_USAGE_INFO_KHR => &*(obj as *const VkVideoEncodeUsageInfoKHR),
        StructureType::QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR => {
            &*(obj as *const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR => {
            &*(obj as *const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR)
        }
        StructureType::VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR => {
            &*(obj as *const VkVideoEncodeQualityLevelPropertiesKHR)
        }
        StructureType::VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR => {
            &*(obj as *const VkVideoEncodeQualityLevelInfoKHR)
        }
        StructureType::VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR => {
            &*(obj as *const VkVideoEncodeSessionParametersGetInfoKHR)
        }
        StructureType::VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR => {
            &*(obj as *const VkVideoEncodeSessionParametersFeedbackInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceDiagnosticsConfigFeaturesNV)
        }
        StructureType::DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV => {
            &*(obj as *const VkDeviceDiagnosticsConfigCreateInfoNV)
        }
        StructureType::CUDA_MODULE_CREATE_INFO_NV => &*(obj as *const VkCudaModuleCreateInfoNV),
        StructureType::CUDA_FUNCTION_CREATE_INFO_NV => &*(obj as *const VkCudaFunctionCreateInfoNV),
        StructureType::CUDA_LAUNCH_INFO_NV => &*(obj as *const VkCudaLaunchInfoNV),
        StructureType::PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceCudaKernelLaunchFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceCudaKernelLaunchPropertiesNV)
        }
        StructureType::QUERY_LOW_LATENCY_SUPPORT_NV => &*(obj as *const VkQueryLowLatencySupportNV),
        StructureType::EXPORT_METAL_OBJECT_CREATE_INFO_EXT => {
            &*(obj as *const VkExportMetalObjectCreateInfoEXT)
        }
        StructureType::EXPORT_METAL_OBJECTS_INFO_EXT => {
            &*(obj as *const VkExportMetalObjectsInfoEXT)
        }
        StructureType::EXPORT_METAL_DEVICE_INFO_EXT => &*(obj as *const VkExportMetalDeviceInfoEXT),
        StructureType::EXPORT_METAL_COMMAND_QUEUE_INFO_EXT => {
            &*(obj as *const VkExportMetalCommandQueueInfoEXT)
        }
        StructureType::EXPORT_METAL_BUFFER_INFO_EXT => &*(obj as *const VkExportMetalBufferInfoEXT),
        StructureType::IMPORT_METAL_BUFFER_INFO_EXT => &*(obj as *const VkImportMetalBufferInfoEXT),
        StructureType::EXPORT_METAL_TEXTURE_INFO_EXT => {
            &*(obj as *const VkExportMetalTextureInfoEXT)
        }
        StructureType::IMPORT_METAL_TEXTURE_INFO_EXT => {
            &*(obj as *const VkImportMetalTextureInfoEXT)
        }
        StructureType::EXPORT_METAL_IO_SURFACE_INFO_EXT => {
            &*(obj as *const VkExportMetalIOSurfaceInfoEXT)
        }
        StructureType::IMPORT_METAL_IO_SURFACE_INFO_EXT => {
            &*(obj as *const VkImportMetalIOSurfaceInfoEXT)
        }
        StructureType::EXPORT_METAL_SHARED_EVENT_INFO_EXT => {
            &*(obj as *const VkExportMetalSharedEventInfoEXT)
        }
        StructureType::IMPORT_METAL_SHARED_EVENT_INFO_EXT => {
            &*(obj as *const VkImportMetalSharedEventInfoEXT)
        }
        StructureType::QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV => {
            &*(obj as *const VkQueueFamilyCheckpointProperties2NV)
        }
        StructureType::CHECKPOINT_DATA_2_NV => &*(obj as *const VkCheckpointData2NV),
        StructureType::PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceDescriptorBufferPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDescriptorBufferFeaturesEXT)
        }
        StructureType::DESCRIPTOR_ADDRESS_INFO_EXT => &*(obj as *const VkDescriptorAddressInfoEXT),
        StructureType::DESCRIPTOR_GET_INFO_EXT => &*(obj as *const VkDescriptorGetInfoEXT),
        StructureType::BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT => {
            &*(obj as *const VkBufferCaptureDescriptorDataInfoEXT)
        }
        StructureType::IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT => {
            &*(obj as *const VkImageCaptureDescriptorDataInfoEXT)
        }
        StructureType::IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT => {
            &*(obj as *const VkImageViewCaptureDescriptorDataInfoEXT)
        }
        StructureType::SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT => {
            &*(obj as *const VkSamplerCaptureDescriptorDataInfoEXT)
        }
        StructureType::OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT => {
            &*(obj as *const VkOpaqueCaptureDescriptorDataCreateInfoEXT)
        }
        StructureType::DESCRIPTOR_BUFFER_BINDING_INFO_EXT => {
            &*(obj as *const VkDescriptorBufferBindingInfoEXT)
        }
        StructureType::DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT => {
            &*(obj as *const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT)
        }
        StructureType::ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT => {
            &*(obj as *const VkAccelerationStructureCaptureDescriptorDataInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT)
        }
        StructureType::GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT => {
            &*(obj as *const VkGraphicsPipelineLibraryCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD => {
            &*(obj as *const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV)
        }
        StructureType::PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV => {
            &*(obj as *const VkPipelineFragmentShadingRateEnumStateCreateInfoNV)
        }
        StructureType::ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV => {
            &*(obj as *const VkAccelerationStructureGeometryMotionTrianglesDataNV)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV)
        }
        StructureType::ACCELERATION_STRUCTURE_MOTION_INFO_NV => {
            &*(obj as *const VkAccelerationStructureMotionInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceMeshShaderFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceMeshShaderPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT)
        }
        StructureType::COPY_COMMAND_TRANSFORM_INFO_QCOM => {
            &*(obj as *const VkCopyCommandTransformInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceImageCompressionControlFeaturesEXT)
        }
        StructureType::IMAGE_COMPRESSION_CONTROL_EXT => {
            &*(obj as *const VkImageCompressionControlEXT)
        }
        StructureType::IMAGE_COMPRESSION_PROPERTIES_EXT => {
            &*(obj as *const VkImageCompressionPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevice4444FormatsFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_FAULT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceFaultFeaturesEXT)
        }
        StructureType::DEVICE_FAULT_COUNTS_EXT => &*(obj as *const VkDeviceFaultCountsEXT),
        StructureType::DEVICE_FAULT_INFO_EXT => &*(obj as *const VkDeviceFaultInfoEXT),
        StructureType::PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT)
        }
        StructureType::DIRECTFB_SURFACE_CREATE_INFO_EXT => {
            &*(obj as *const VkDirectFBSurfaceCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT)
        }
        StructureType::VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT => {
            &*(obj as *const VkVertexInputBindingDescription2EXT)
        }
        StructureType::VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT => {
            &*(obj as *const VkVertexInputAttributeDescription2EXT)
        }
        StructureType::PHYSICAL_DEVICE_DRM_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceDrmPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceAddressBindingReportFeaturesEXT)
        }
        StructureType::DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT => {
            &*(obj as *const VkDeviceAddressBindingCallbackDataEXT)
        }
        StructureType::PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDepthClipControlFeaturesEXT)
        }
        StructureType::PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineViewportDepthClipControlCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT)
        }
        StructureType::IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA => {
            &*(obj as *const VkImportMemoryZirconHandleInfoFUCHSIA)
        }
        StructureType::MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA => {
            &*(obj as *const VkMemoryZirconHandlePropertiesFUCHSIA)
        }
        StructureType::MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA => {
            &*(obj as *const VkMemoryGetZirconHandleInfoFUCHSIA)
        }
        StructureType::IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA => {
            &*(obj as *const VkImportSemaphoreZirconHandleInfoFUCHSIA)
        }
        StructureType::SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA => {
            &*(obj as *const VkSemaphoreGetZirconHandleInfoFUCHSIA)
        }
        StructureType::BUFFER_COLLECTION_CREATE_INFO_FUCHSIA => {
            &*(obj as *const VkBufferCollectionCreateInfoFUCHSIA)
        }
        StructureType::IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA => {
            &*(obj as *const VkImportMemoryBufferCollectionFUCHSIA)
        }
        StructureType::BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA => {
            &*(obj as *const VkBufferCollectionImageCreateInfoFUCHSIA)
        }
        StructureType::BUFFER_COLLECTION_PROPERTIES_FUCHSIA => {
            &*(obj as *const VkBufferCollectionPropertiesFUCHSIA)
        }
        StructureType::BUFFER_CONSTRAINTS_INFO_FUCHSIA => {
            &*(obj as *const VkBufferConstraintsInfoFUCHSIA)
        }
        StructureType::BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA => {
            &*(obj as *const VkBufferCollectionBufferCreateInfoFUCHSIA)
        }
        StructureType::IMAGE_CONSTRAINTS_INFO_FUCHSIA => {
            &*(obj as *const VkImageConstraintsInfoFUCHSIA)
        }
        StructureType::IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA => {
            &*(obj as *const VkImageFormatConstraintsInfoFUCHSIA)
        }
        StructureType::SYSMEM_COLOR_SPACE_FUCHSIA => &*(obj as *const VkSysmemColorSpaceFUCHSIA),
        StructureType::BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA => {
            &*(obj as *const VkBufferCollectionConstraintsInfoFUCHSIA)
        }
        StructureType::SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI => {
            &*(obj as *const VkSubpassShadingPipelineCreateInfoHUAWEI)
        }
        StructureType::PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI => {
            &*(obj as *const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI)
        }
        StructureType::PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI => {
            &*(obj as *const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI)
        }
        StructureType::PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI => {
            &*(obj as *const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI)
        }
        StructureType::MEMORY_GET_REMOTE_ADDRESS_INFO_NV => {
            &*(obj as *const VkMemoryGetRemoteAddressInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV)
        }
        StructureType::PIPELINE_PROPERTIES_IDENTIFIER_EXT => {
            &*(obj as *const VkPipelinePropertiesIdentifierEXT)
        }
        StructureType::PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePipelinePropertiesFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceFrameBoundaryFeaturesEXT)
        }
        StructureType::FRAME_BOUNDARY_EXT => &*(obj as *const VkFrameBoundaryEXT),
        StructureType::PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT)
        }
        StructureType::SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT => {
            &*(obj as *const VkSubpassResolvePerformanceQueryEXT)
        }
        StructureType::MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT => {
            &*(obj as *const VkMultisampledRenderToSingleSampledInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT)
        }
        StructureType::SCREEN_SURFACE_CREATE_INFO_QNX => {
            &*(obj as *const VkScreenSurfaceCreateInfoQNX)
        }
        StructureType::PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceColorWriteEnableFeaturesEXT)
        }
        StructureType::PIPELINE_COLOR_WRITE_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineColorWriteCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceImageViewMinLodFeaturesEXT)
        }
        StructureType::IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT => {
            &*(obj as *const VkImageViewMinLodCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceMultiDrawFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceMultiDrawPropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderTileImageFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderTileImagePropertiesEXT)
        }
        StructureType::MICROMAP_BUILD_INFO_EXT => &*(obj as *const VkMicromapBuildInfoEXT),
        StructureType::MICROMAP_VERSION_INFO_EXT => &*(obj as *const VkMicromapVersionInfoEXT),
        StructureType::COPY_MICROMAP_INFO_EXT => &*(obj as *const VkCopyMicromapInfoEXT),
        StructureType::COPY_MICROMAP_TO_MEMORY_INFO_EXT => {
            &*(obj as *const VkCopyMicromapToMemoryInfoEXT)
        }
        StructureType::COPY_MEMORY_TO_MICROMAP_INFO_EXT => {
            &*(obj as *const VkCopyMemoryToMicromapInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceOpacityMicromapFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceOpacityMicromapPropertiesEXT)
        }
        StructureType::MICROMAP_CREATE_INFO_EXT => &*(obj as *const VkMicromapCreateInfoEXT),
        StructureType::MICROMAP_BUILD_SIZES_INFO_EXT => {
            &*(obj as *const VkMicromapBuildSizesInfoEXT)
        }
        StructureType::ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT => {
            &*(obj as *const VkAccelerationStructureTrianglesOpacityMicromapEXT)
        }
        StructureType::PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceDisplacementMicromapFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceDisplacementMicromapPropertiesNV)
        }
        StructureType::ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV => {
            &*(obj as *const VkAccelerationStructureTrianglesDisplacementMicromapNV)
        }
        StructureType::PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI => {
            &*(obj as *const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI)
        }
        StructureType::PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI => {
            &*(obj as *const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI)
        }
        StructureType::PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI => {
            &*(obj as *const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI)
        }
        StructureType::PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT)
        }
        StructureType::SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT => {
            &*(obj as *const VkSamplerBorderColorComponentMappingCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM => {
            &*(obj as *const VkPhysicalDeviceShaderCorePropertiesARM)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR)
        }
        StructureType::DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM => {
            &*(obj as *const VkDeviceQueueShaderCoreControlCreateInfoARM)
        }
        StructureType::PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM => {
            &*(obj as *const VkPhysicalDeviceSchedulingControlsFeaturesARM)
        }
        StructureType::PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM => {
            &*(obj as *const VkPhysicalDeviceSchedulingControlsPropertiesARM)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT)
        }
        StructureType::IMAGE_VIEW_SLICED_CREATE_INFO_EXT => {
            &*(obj as *const VkImageViewSlicedCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE => {
            &*(obj as *const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE)
        }
        StructureType::DESCRIPTOR_SET_BINDING_REFERENCE_VALVE => {
            &*(obj as *const VkDescriptorSetBindingReferenceVALVE)
        }
        StructureType::DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE => {
            &*(obj as *const VkDescriptorSetLayoutHostMappingInfoVALVE)
        }
        StructureType::PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM => {
            &*(obj as *const VkPhysicalDeviceRenderPassStripedFeaturesARM)
        }
        StructureType::PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM => {
            &*(obj as *const VkPhysicalDeviceRenderPassStripedPropertiesARM)
        }
        StructureType::RENDER_PASS_STRIPE_BEGIN_INFO_ARM => {
            &*(obj as *const VkRenderPassStripeBeginInfoARM)
        }
        StructureType::RENDER_PASS_STRIPE_INFO_ARM => &*(obj as *const VkRenderPassStripeInfoARM),
        StructureType::RENDER_PASS_STRIPE_SUBMIT_INFO_ARM => {
            &*(obj as *const VkRenderPassStripeSubmitInfoARM)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM)
        }
        StructureType::PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM => {
            &*(obj as *const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM)
        }
        StructureType::SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM => {
            &*(obj as *const VkSubpassFragmentDensityMapOffsetEndInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceMemoryDecompressionFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceMemoryDecompressionPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV)
        }
        StructureType::COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV => {
            &*(obj as *const VkComputePipelineIndirectBufferInfoNV)
        }
        StructureType::PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV => {
            &*(obj as *const VkPipelineIndirectDeviceAddressInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceLinearColorAttachmentFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceImageProcessingFeaturesQCOM)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM => {
            &*(obj as *const VkPhysicalDeviceImageProcessingPropertiesQCOM)
        }
        StructureType::IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM => {
            &*(obj as *const VkImageViewSampleWeightCreateInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceNestedCommandBufferFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceNestedCommandBufferPropertiesEXT)
        }
        StructureType::EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT => {
            &*(obj as *const VkExternalMemoryAcquireUnmodifiedEXT)
        }
        StructureType::PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT)
        }
        StructureType::RENDER_PASS_CREATION_CONTROL_EXT => {
            &*(obj as *const VkRenderPassCreationControlEXT)
        }
        StructureType::RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT => {
            &*(obj as *const VkRenderPassCreationFeedbackCreateInfoEXT)
        }
        StructureType::RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT => {
            &*(obj as *const VkRenderPassSubpassFeedbackCreateInfoEXT)
        }
        StructureType::DIRECT_DRIVER_LOADING_INFO_LUNARG => {
            &*(obj as *const VkDirectDriverLoadingInfoLUNARG)
        }
        StructureType::DIRECT_DRIVER_LOADING_LIST_LUNARG => {
            &*(obj as *const VkDirectDriverLoadingListLUNARG)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT)
        }
        StructureType::PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT => {
            &*(obj as *const VkPipelineShaderStageModuleIdentifierCreateInfoEXT)
        }
        StructureType::SHADER_MODULE_IDENTIFIER_EXT => {
            &*(obj as *const VkShaderModuleIdentifierEXT)
        }
        StructureType::PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceOpticalFlowFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceOpticalFlowPropertiesNV)
        }
        StructureType::OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV => {
            &*(obj as *const VkOpticalFlowImageFormatInfoNV)
        }
        StructureType::OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV => {
            &*(obj as *const VkOpticalFlowImageFormatPropertiesNV)
        }
        StructureType::OPTICAL_FLOW_SESSION_CREATE_INFO_NV => {
            &*(obj as *const VkOpticalFlowSessionCreateInfoNV)
        }
        StructureType::OPTICAL_FLOW_EXECUTE_INFO_NV => &*(obj as *const VkOpticalFlowExecuteInfoNV),
        StructureType::OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV => {
            &*(obj as *const VkOpticalFlowSessionCreatePrivateDataInfoNV)
        }
        StructureType::PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceLegacyDitheringFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID => {
            &*(obj as *const VkPhysicalDeviceExternalFormatResolveFeaturesANDROID)
        }
        StructureType::PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID => {
            &*(obj as *const VkPhysicalDeviceExternalFormatResolvePropertiesANDROID)
        }
        StructureType::ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID => {
            &*(obj as *const VkAndroidHardwareBufferFormatResolvePropertiesANDROID)
        }
        StructureType::PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceMaintenance5FeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceMaintenance5PropertiesKHR)
        }
        StructureType::RENDERING_AREA_INFO_KHR => &*(obj as *const VkRenderingAreaInfoKHR),
        StructureType::DEVICE_IMAGE_SUBRESOURCE_INFO_KHR => {
            &*(obj as *const VkDeviceImageSubresourceInfoKHR)
        }
        StructureType::SUBRESOURCE_LAYOUT_2_KHR => &*(obj as *const VkSubresourceLayout2KHR),
        StructureType::IMAGE_SUBRESOURCE_2_KHR => &*(obj as *const VkImageSubresource2KHR),
        StructureType::PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR => {
            &*(obj as *const VkPipelineCreateFlags2CreateInfoKHR)
        }
        StructureType::BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR => {
            &*(obj as *const VkBufferUsageFlags2CreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderObjectFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT => {
            &*(obj as *const VkPhysicalDeviceShaderObjectPropertiesEXT)
        }
        StructureType::SHADER_CREATE_INFO_EXT => &*(obj as *const VkShaderCreateInfoEXT),
        StructureType::PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceTilePropertiesFeaturesQCOM)
        }
        StructureType::TILE_PROPERTIES_QCOM => &*(obj as *const VkTilePropertiesQCOM),
        StructureType::PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC => {
            &*(obj as *const VkPhysicalDeviceAmigoProfilingFeaturesSEC)
        }
        StructureType::AMIGO_PROFILING_SUBMIT_INFO_SEC => {
            &*(obj as *const VkAmigoProfilingSubmitInfoSEC)
        }
        StructureType::PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV => {
            &*(obj as *const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV)
        }
        StructureType::PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT)
        }
        StructureType::MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT => {
            &*(obj as *const VkMutableDescriptorTypeCreateInfoEXT)
        }
        StructureType::LAYER_SETTINGS_CREATE_INFO_EXT => {
            &*(obj as *const VkLayerSettingsCreateInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM => {
            &*(obj as *const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM => {
            &*(obj as *const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM)
        }
        StructureType::PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT)
        }
        StructureType::LATENCY_SLEEP_MODE_INFO_NV => &*(obj as *const VkLatencySleepModeInfoNV),
        StructureType::LATENCY_SLEEP_INFO_NV => &*(obj as *const VkLatencySleepInfoNV),
        StructureType::SET_LATENCY_MARKER_INFO_NV => &*(obj as *const VkSetLatencyMarkerInfoNV),
        StructureType::GET_LATENCY_MARKER_INFO_NV => &*(obj as *const VkGetLatencyMarkerInfoNV),
        StructureType::LATENCY_TIMINGS_FRAME_REPORT_NV => {
            &*(obj as *const VkLatencyTimingsFrameReportNV)
        }
        StructureType::LATENCY_SUBMISSION_PRESENT_ID_NV => {
            &*(obj as *const VkLatencySubmissionPresentIdNV)
        }
        StructureType::OUT_OF_BAND_QUEUE_TYPE_INFO_NV => {
            &*(obj as *const VkOutOfBandQueueTypeInfoNV)
        }
        StructureType::SWAPCHAIN_LATENCY_CREATE_INFO_NV => {
            &*(obj as *const VkSwapchainLatencyCreateInfoNV)
        }
        StructureType::LATENCY_SURFACE_CAPABILITIES_NV => {
            &*(obj as *const VkLatencySurfaceCapabilitiesNV)
        }
        StructureType::PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceCooperativeMatrixFeaturesKHR)
        }
        StructureType::COOPERATIVE_MATRIX_PROPERTIES_KHR => {
            &*(obj as *const VkCooperativeMatrixPropertiesKHR)
        }
        StructureType::PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceCooperativeMatrixPropertiesKHR)
        }
        StructureType::PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM)
        }
        StructureType::MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM => {
            &*(obj as *const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM)
        }
        StructureType::VIDEO_DECODE_AV1_CAPABILITIES_KHR => {
            &*(obj as *const VkVideoDecodeAV1CapabilitiesKHR)
        }
        StructureType::VIDEO_DECODE_AV1_PICTURE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeAV1PictureInfoKHR)
        }
        StructureType::VIDEO_DECODE_AV1_PROFILE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeAV1ProfileInfoKHR)
        }
        StructureType::VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR => {
            &*(obj as *const VkVideoDecodeAV1SessionParametersCreateInfoKHR)
        }
        StructureType::VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR => {
            &*(obj as *const VkVideoDecodeAV1DpbSlotInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceVideoMaintenance1FeaturesKHR)
        }
        StructureType::VIDEO_INLINE_QUERY_INFO_KHR => &*(obj as *const VkVideoInlineQueryInfoKHR),
        StructureType::PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV => {
            &*(obj as *const VkPhysicalDevicePerStageDescriptorSetFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceImageProcessing2FeaturesQCOM)
        }
        StructureType::PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM => {
            &*(obj as *const VkPhysicalDeviceImageProcessing2PropertiesQCOM)
        }
        StructureType::SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM => {
            &*(obj as *const VkSamplerBlockMatchWindowCreateInfoQCOM)
        }
        StructureType::SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM => {
            &*(obj as *const VkSamplerCubicWeightsCreateInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceCubicWeightsFeaturesQCOM)
        }
        StructureType::BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM => {
            &*(obj as *const VkBlitImageCubicWeightsInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM)
        }
        StructureType::SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM => {
            &*(obj as *const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM)
        }
        StructureType::PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM => {
            &*(obj as *const VkPhysicalDeviceCubicClampFeaturesQCOM)
        }
        StructureType::PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT => {
            &*(obj as *const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT)
        }
        StructureType::PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR)
        }
        StructureType::PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR => {
            &*(obj as *const VkPipelineVertexInputDivisorStateCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderFloatControls2FeaturesKHR)
        }
        StructureType::SCREEN_BUFFER_PROPERTIES_QNX => {
            &*(obj as *const VkScreenBufferPropertiesQNX)
        }
        StructureType::SCREEN_BUFFER_FORMAT_PROPERTIES_QNX => {
            &*(obj as *const VkScreenBufferFormatPropertiesQNX)
        }
        StructureType::IMPORT_SCREEN_BUFFER_INFO_QNX => {
            &*(obj as *const VkImportScreenBufferInfoQNX)
        }
        StructureType::EXTERNAL_FORMAT_QNX => &*(obj as *const VkExternalFormatQNX),
        StructureType::PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX => {
            &*(obj as *const VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX)
        }
        StructureType::PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT => {
            &*(obj as *const VkPhysicalDeviceLayeredDriverPropertiesMSFT)
        }
        StructureType::PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceIndexTypeUint8FeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceLineRasterizationFeaturesKHR)
        }
        StructureType::PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR => {
            &*(obj as *const VkPipelineRasterizationLineStateCreateInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceLineRasterizationPropertiesKHR)
        }
        StructureType::CALIBRATED_TIMESTAMP_INFO_KHR => {
            &*(obj as *const VkCalibratedTimestampInfoKHR)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceShaderExpectAssumeFeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR => {
            &*(obj as *const VkPhysicalDeviceMaintenance6FeaturesKHR)
        }
        StructureType::PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR => {
            &*(obj as *const VkPhysicalDeviceMaintenance6PropertiesKHR)
        }
        StructureType::BIND_MEMORY_STATUS_KHR => &*(obj as *const VkBindMemoryStatusKHR),
        StructureType::BIND_DESCRIPTOR_SETS_INFO_KHR => {
            &*(obj as *const VkBindDescriptorSetsInfoKHR)
        }
        StructureType::PUSH_CONSTANTS_INFO_KHR => &*(obj as *const VkPushConstantsInfoKHR),
        StructureType::PUSH_DESCRIPTOR_SET_INFO_KHR => &*(obj as *const VkPushDescriptorSetInfoKHR),
        StructureType::PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR => {
            &*(obj as *const VkPushDescriptorSetWithTemplateInfoKHR)
        }
        StructureType::SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT => {
            &*(obj as *const VkSetDescriptorBufferOffsetsInfoEXT)
        }
        StructureType::BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT => {
            &*(obj as *const VkBindDescriptorBufferEmbeddedSamplersInfoEXT)
        }
        StructureType::PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceRawAccessChainsFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV)
        }
        StructureType::PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV => {
            &*(obj as *const VkPhysicalDeviceRayTracingValidationFeaturesNV)
        }
        _ => panic!("Unknown structure type: {:?}", ty),
    }
}
