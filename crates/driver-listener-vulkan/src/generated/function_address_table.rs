//! THIS FILE IS GENERATED BY TOOL, DO NOT MODIFY.

use ash::vk;
use wie_driver_common_vulkan::{*, generated::vulkan_types::*, generated::vulkan_pfn_functions::*};
use std::ffi::{c_char, c_void};

pub struct FunctionAddressTable {
    pub vk_create_instance: PFN_vkCreateInstance,
    pub vk_destroy_instance: PFN_vkDestroyInstance,
    pub vk_enumerate_physical_devices: PFN_vkEnumeratePhysicalDevices,
    pub vk_get_device_proc_addr: PFN_vkGetDeviceProcAddr,
    pub vk_get_instance_proc_addr: PFN_vkGetInstanceProcAddr,
    pub vk_get_physical_device_properties: PFN_vkGetPhysicalDeviceProperties,
    pub vk_get_physical_device_queue_family_properties: PFN_vkGetPhysicalDeviceQueueFamilyProperties,
    pub vk_get_physical_device_memory_properties: PFN_vkGetPhysicalDeviceMemoryProperties,
    pub vk_get_physical_device_features: PFN_vkGetPhysicalDeviceFeatures,
    pub vk_get_physical_device_format_properties: PFN_vkGetPhysicalDeviceFormatProperties,
    pub vk_get_physical_device_image_format_properties: PFN_vkGetPhysicalDeviceImageFormatProperties,
    pub vk_create_device: PFN_vkCreateDevice,
    pub vk_destroy_device: PFN_vkDestroyDevice,
    pub vk_enumerate_instance_version: PFN_vkEnumerateInstanceVersion,
    pub vk_enumerate_instance_layer_properties: PFN_vkEnumerateInstanceLayerProperties,
    pub vk_enumerate_instance_extension_properties: PFN_vkEnumerateInstanceExtensionProperties,
    pub vk_enumerate_device_layer_properties: PFN_vkEnumerateDeviceLayerProperties,
    pub vk_enumerate_device_extension_properties: PFN_vkEnumerateDeviceExtensionProperties,
    pub vk_get_device_queue: PFN_vkGetDeviceQueue,
    pub vk_queue_submit: PFN_vkQueueSubmit,
    pub vk_queue_wait_idle: PFN_vkQueueWaitIdle,
    pub vk_device_wait_idle: PFN_vkDeviceWaitIdle,
    pub vk_allocate_memory: PFN_vkAllocateMemory,
    pub vk_free_memory: PFN_vkFreeMemory,
    pub vk_map_memory: PFN_vkMapMemory,
    pub vk_unmap_memory: PFN_vkUnmapMemory,
    pub vk_flush_mapped_memory_ranges: PFN_vkFlushMappedMemoryRanges,
    pub vk_invalidate_mapped_memory_ranges: PFN_vkInvalidateMappedMemoryRanges,
    pub vk_get_device_memory_commitment: PFN_vkGetDeviceMemoryCommitment,
    pub vk_get_buffer_memory_requirements: PFN_vkGetBufferMemoryRequirements,
    pub vk_bind_buffer_memory: PFN_vkBindBufferMemory,
    pub vk_get_image_memory_requirements: PFN_vkGetImageMemoryRequirements,
    pub vk_bind_image_memory: PFN_vkBindImageMemory,
    pub vk_get_image_sparse_memory_requirements: PFN_vkGetImageSparseMemoryRequirements,
    pub vk_get_physical_device_sparse_image_format_properties: PFN_vkGetPhysicalDeviceSparseImageFormatProperties,
    pub vk_queue_bind_sparse: PFN_vkQueueBindSparse,
    pub vk_create_fence: PFN_vkCreateFence,
    pub vk_destroy_fence: PFN_vkDestroyFence,
    pub vk_reset_fences: PFN_vkResetFences,
    pub vk_get_fence_status: PFN_vkGetFenceStatus,
    pub vk_wait_for_fences: PFN_vkWaitForFences,
    pub vk_create_semaphore: PFN_vkCreateSemaphore,
    pub vk_destroy_semaphore: PFN_vkDestroySemaphore,
    pub vk_create_event: PFN_vkCreateEvent,
    pub vk_destroy_event: PFN_vkDestroyEvent,
    pub vk_get_event_status: PFN_vkGetEventStatus,
    pub vk_set_event: PFN_vkSetEvent,
    pub vk_reset_event: PFN_vkResetEvent,
    pub vk_create_query_pool: PFN_vkCreateQueryPool,
    pub vk_destroy_query_pool: PFN_vkDestroyQueryPool,
    pub vk_get_query_pool_results: PFN_vkGetQueryPoolResults,
    pub vk_reset_query_pool: PFN_vkResetQueryPool,
    pub vk_create_buffer: PFN_vkCreateBuffer,
    pub vk_destroy_buffer: PFN_vkDestroyBuffer,
    pub vk_create_buffer_view: PFN_vkCreateBufferView,
    pub vk_destroy_buffer_view: PFN_vkDestroyBufferView,
    pub vk_create_image: PFN_vkCreateImage,
    pub vk_destroy_image: PFN_vkDestroyImage,
    pub vk_get_image_subresource_layout: PFN_vkGetImageSubresourceLayout,
    pub vk_create_image_view: PFN_vkCreateImageView,
    pub vk_destroy_image_view: PFN_vkDestroyImageView,
    pub vk_create_shader_module: PFN_vkCreateShaderModule,
    pub vk_destroy_shader_module: PFN_vkDestroyShaderModule,
    pub vk_create_pipeline_cache: PFN_vkCreatePipelineCache,
    pub vk_destroy_pipeline_cache: PFN_vkDestroyPipelineCache,
    pub vk_get_pipeline_cache_data: PFN_vkGetPipelineCacheData,
    pub vk_merge_pipeline_caches: PFN_vkMergePipelineCaches,
    pub vk_create_graphics_pipelines: PFN_vkCreateGraphicsPipelines,
    pub vk_create_compute_pipelines: PFN_vkCreateComputePipelines,
    pub vk_get_device_subpass_shading_max_workgroup_size_huawei: PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI,
    pub vk_destroy_pipeline: PFN_vkDestroyPipeline,
    pub vk_create_pipeline_layout: PFN_vkCreatePipelineLayout,
    pub vk_destroy_pipeline_layout: PFN_vkDestroyPipelineLayout,
    pub vk_create_sampler: PFN_vkCreateSampler,
    pub vk_destroy_sampler: PFN_vkDestroySampler,
    pub vk_create_descriptor_set_layout: PFN_vkCreateDescriptorSetLayout,
    pub vk_destroy_descriptor_set_layout: PFN_vkDestroyDescriptorSetLayout,
    pub vk_create_descriptor_pool: PFN_vkCreateDescriptorPool,
    pub vk_destroy_descriptor_pool: PFN_vkDestroyDescriptorPool,
    pub vk_reset_descriptor_pool: PFN_vkResetDescriptorPool,
    pub vk_allocate_descriptor_sets: PFN_vkAllocateDescriptorSets,
    pub vk_free_descriptor_sets: PFN_vkFreeDescriptorSets,
    pub vk_update_descriptor_sets: PFN_vkUpdateDescriptorSets,
    pub vk_create_framebuffer: PFN_vkCreateFramebuffer,
    pub vk_destroy_framebuffer: PFN_vkDestroyFramebuffer,
    pub vk_create_render_pass: PFN_vkCreateRenderPass,
    pub vk_destroy_render_pass: PFN_vkDestroyRenderPass,
    pub vk_get_render_area_granularity: PFN_vkGetRenderAreaGranularity,
    pub vk_get_rendering_area_granularity_khr: PFN_vkGetRenderingAreaGranularityKHR,
    pub vk_create_command_pool: PFN_vkCreateCommandPool,
    pub vk_destroy_command_pool: PFN_vkDestroyCommandPool,
    pub vk_reset_command_pool: PFN_vkResetCommandPool,
    pub vk_allocate_command_buffers: PFN_vkAllocateCommandBuffers,
    pub vk_free_command_buffers: PFN_vkFreeCommandBuffers,
    pub vk_begin_command_buffer: PFN_vkBeginCommandBuffer,
    pub vk_end_command_buffer: PFN_vkEndCommandBuffer,
    pub vk_reset_command_buffer: PFN_vkResetCommandBuffer,
    pub vk_cmd_bind_pipeline: PFN_vkCmdBindPipeline,
    pub vk_cmd_set_attachment_feedback_loop_enable_ext: PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT,
    pub vk_cmd_set_viewport: PFN_vkCmdSetViewport,
    pub vk_cmd_set_scissor: PFN_vkCmdSetScissor,
    pub vk_cmd_set_line_width: PFN_vkCmdSetLineWidth,
    pub vk_cmd_set_depth_bias: PFN_vkCmdSetDepthBias,
    pub vk_cmd_set_blend_constants: PFN_vkCmdSetBlendConstants,
    pub vk_cmd_set_depth_bounds: PFN_vkCmdSetDepthBounds,
    pub vk_cmd_set_stencil_compare_mask: PFN_vkCmdSetStencilCompareMask,
    pub vk_cmd_set_stencil_write_mask: PFN_vkCmdSetStencilWriteMask,
    pub vk_cmd_set_stencil_reference: PFN_vkCmdSetStencilReference,
    pub vk_cmd_bind_descriptor_sets: PFN_vkCmdBindDescriptorSets,
    pub vk_cmd_bind_index_buffer: PFN_vkCmdBindIndexBuffer,
    pub vk_cmd_bind_vertex_buffers: PFN_vkCmdBindVertexBuffers,
    pub vk_cmd_draw: PFN_vkCmdDraw,
    pub vk_cmd_draw_indexed: PFN_vkCmdDrawIndexed,
    pub vk_cmd_draw_multi_ext: PFN_vkCmdDrawMultiEXT,
    pub vk_cmd_draw_multi_indexed_ext: PFN_vkCmdDrawMultiIndexedEXT,
    pub vk_cmd_draw_indirect: PFN_vkCmdDrawIndirect,
    pub vk_cmd_draw_indexed_indirect: PFN_vkCmdDrawIndexedIndirect,
    pub vk_cmd_dispatch: PFN_vkCmdDispatch,
    pub vk_cmd_dispatch_indirect: PFN_vkCmdDispatchIndirect,
    pub vk_cmd_subpass_shading_huawei: PFN_vkCmdSubpassShadingHUAWEI,
    pub vk_cmd_draw_cluster_huawei: PFN_vkCmdDrawClusterHUAWEI,
    pub vk_cmd_draw_cluster_indirect_huawei: PFN_vkCmdDrawClusterIndirectHUAWEI,
    pub vk_cmd_update_pipeline_indirect_buffer_nv: PFN_vkCmdUpdatePipelineIndirectBufferNV,
    pub vk_cmd_copy_buffer: PFN_vkCmdCopyBuffer,
    pub vk_cmd_copy_image: PFN_vkCmdCopyImage,
    pub vk_cmd_blit_image: PFN_vkCmdBlitImage,
    pub vk_cmd_copy_buffer_to_image: PFN_vkCmdCopyBufferToImage,
    pub vk_cmd_copy_image_to_buffer: PFN_vkCmdCopyImageToBuffer,
    pub vk_cmd_copy_memory_indirect_nv: PFN_vkCmdCopyMemoryIndirectNV,
    pub vk_cmd_copy_memory_to_image_indirect_nv: PFN_vkCmdCopyMemoryToImageIndirectNV,
    pub vk_cmd_update_buffer: PFN_vkCmdUpdateBuffer,
    pub vk_cmd_fill_buffer: PFN_vkCmdFillBuffer,
    pub vk_cmd_clear_color_image: PFN_vkCmdClearColorImage,
    pub vk_cmd_clear_depth_stencil_image: PFN_vkCmdClearDepthStencilImage,
    pub vk_cmd_clear_attachments: PFN_vkCmdClearAttachments,
    pub vk_cmd_resolve_image: PFN_vkCmdResolveImage,
    pub vk_cmd_set_event: PFN_vkCmdSetEvent,
    pub vk_cmd_reset_event: PFN_vkCmdResetEvent,
    pub vk_cmd_wait_events: PFN_vkCmdWaitEvents,
    pub vk_cmd_pipeline_barrier: PFN_vkCmdPipelineBarrier,
    pub vk_cmd_begin_query: PFN_vkCmdBeginQuery,
    pub vk_cmd_end_query: PFN_vkCmdEndQuery,
    pub vk_cmd_begin_conditional_rendering_ext: PFN_vkCmdBeginConditionalRenderingEXT,
    pub vk_cmd_end_conditional_rendering_ext: PFN_vkCmdEndConditionalRenderingEXT,
    pub vk_cmd_reset_query_pool: PFN_vkCmdResetQueryPool,
    pub vk_cmd_write_timestamp: PFN_vkCmdWriteTimestamp,
    pub vk_cmd_copy_query_pool_results: PFN_vkCmdCopyQueryPoolResults,
    pub vk_cmd_push_constants: PFN_vkCmdPushConstants,
    pub vk_cmd_begin_render_pass: PFN_vkCmdBeginRenderPass,
    pub vk_cmd_next_subpass: PFN_vkCmdNextSubpass,
    pub vk_cmd_end_render_pass: PFN_vkCmdEndRenderPass,
    pub vk_cmd_execute_commands: PFN_vkCmdExecuteCommands,
    pub vk_create_android_surface_khr: PFN_vkCreateAndroidSurfaceKHR,
    pub vk_get_physical_device_display_properties_khr: PFN_vkGetPhysicalDeviceDisplayPropertiesKHR,
    pub vk_get_physical_device_display_plane_properties_khr: PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
    pub vk_get_display_plane_supported_displays_khr: PFN_vkGetDisplayPlaneSupportedDisplaysKHR,
    pub vk_get_display_mode_properties_khr: PFN_vkGetDisplayModePropertiesKHR,
    pub vk_create_display_mode_khr: PFN_vkCreateDisplayModeKHR,
    pub vk_get_display_plane_capabilities_khr: PFN_vkGetDisplayPlaneCapabilitiesKHR,
    pub vk_create_display_plane_surface_khr: PFN_vkCreateDisplayPlaneSurfaceKHR,
    pub vk_create_shared_swapchains_khr: PFN_vkCreateSharedSwapchainsKHR,
    pub vk_destroy_surface_khr: PFN_vkDestroySurfaceKHR,
    pub vk_get_physical_device_surface_support_khr: PFN_vkGetPhysicalDeviceSurfaceSupportKHR,
    pub vk_get_physical_device_surface_capabilities_khr: PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
    pub vk_get_physical_device_surface_formats_khr: PFN_vkGetPhysicalDeviceSurfaceFormatsKHR,
    pub vk_get_physical_device_surface_present_modes_khr: PFN_vkGetPhysicalDeviceSurfacePresentModesKHR,
    pub vk_create_swapchain_khr: PFN_vkCreateSwapchainKHR,
    pub vk_destroy_swapchain_khr: PFN_vkDestroySwapchainKHR,
    pub vk_get_swapchain_images_khr: PFN_vkGetSwapchainImagesKHR,
    pub vk_acquire_next_image_khr: PFN_vkAcquireNextImageKHR,
    pub vk_queue_present_khr: PFN_vkQueuePresentKHR,
    pub vk_create_vi_surface_nn: PFN_vkCreateViSurfaceNN,
    pub vk_create_wayland_surface_khr: PFN_vkCreateWaylandSurfaceKHR,
    pub vk_get_physical_device_wayland_presentation_support_khr: PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR,
    pub vk_create_win32_surface_khr: PFN_vkCreateWin32SurfaceKHR,
    pub vk_get_physical_device_win32_presentation_support_khr: PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR,
    pub vk_create_xlib_surface_khr: PFN_vkCreateXlibSurfaceKHR,
    pub vk_get_physical_device_xlib_presentation_support_khr: PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR,
    pub vk_create_xcb_surface_khr: PFN_vkCreateXcbSurfaceKHR,
    pub vk_get_physical_device_xcb_presentation_support_khr: PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR,
    pub vk_create_direct_fbsurface_ext: PFN_vkCreateDirectFBSurfaceEXT,
    pub vk_get_physical_device_direct_fbpresentation_support_ext: PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT,
    pub vk_create_image_pipe_surface_fuchsia: PFN_vkCreateImagePipeSurfaceFUCHSIA,
    pub vk_create_stream_descriptor_surface_ggp: PFN_vkCreateStreamDescriptorSurfaceGGP,
    pub vk_create_screen_surface_qnx: PFN_vkCreateScreenSurfaceQNX,
    pub vk_get_physical_device_screen_presentation_support_qnx: PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX,
    pub vk_create_debug_report_callback_ext: PFN_vkCreateDebugReportCallbackEXT,
    pub vk_destroy_debug_report_callback_ext: PFN_vkDestroyDebugReportCallbackEXT,
    pub vk_debug_report_message_ext: PFN_vkDebugReportMessageEXT,
    pub vk_debug_marker_set_object_name_ext: PFN_vkDebugMarkerSetObjectNameEXT,
    pub vk_debug_marker_set_object_tag_ext: PFN_vkDebugMarkerSetObjectTagEXT,
    pub vk_cmd_debug_marker_begin_ext: PFN_vkCmdDebugMarkerBeginEXT,
    pub vk_cmd_debug_marker_end_ext: PFN_vkCmdDebugMarkerEndEXT,
    pub vk_cmd_debug_marker_insert_ext: PFN_vkCmdDebugMarkerInsertEXT,
    pub vk_get_physical_device_external_image_format_properties_nv: PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
    pub vk_get_memory_win32_handle_nv: PFN_vkGetMemoryWin32HandleNV,
    pub vk_cmd_execute_generated_commands_nv: PFN_vkCmdExecuteGeneratedCommandsNV,
    pub vk_cmd_preprocess_generated_commands_nv: PFN_vkCmdPreprocessGeneratedCommandsNV,
    pub vk_cmd_bind_pipeline_shader_group_nv: PFN_vkCmdBindPipelineShaderGroupNV,
    pub vk_get_generated_commands_memory_requirements_nv: PFN_vkGetGeneratedCommandsMemoryRequirementsNV,
    pub vk_create_indirect_commands_layout_nv: PFN_vkCreateIndirectCommandsLayoutNV,
    pub vk_destroy_indirect_commands_layout_nv: PFN_vkDestroyIndirectCommandsLayoutNV,
    pub vk_get_physical_device_features2: PFN_vkGetPhysicalDeviceFeatures2,
    pub vk_get_physical_device_properties2: PFN_vkGetPhysicalDeviceProperties2,
    pub vk_get_physical_device_format_properties2: PFN_vkGetPhysicalDeviceFormatProperties2,
    pub vk_get_physical_device_image_format_properties2: PFN_vkGetPhysicalDeviceImageFormatProperties2,
    pub vk_get_physical_device_queue_family_properties2: PFN_vkGetPhysicalDeviceQueueFamilyProperties2,
    pub vk_get_physical_device_memory_properties2: PFN_vkGetPhysicalDeviceMemoryProperties2,
    pub vk_get_physical_device_sparse_image_format_properties2: PFN_vkGetPhysicalDeviceSparseImageFormatProperties2,
    pub vk_cmd_push_descriptor_set_khr: PFN_vkCmdPushDescriptorSetKHR,
    pub vk_trim_command_pool: PFN_vkTrimCommandPool,
    pub vk_get_physical_device_external_buffer_properties: PFN_vkGetPhysicalDeviceExternalBufferProperties,
    pub vk_get_memory_win32_handle_khr: PFN_vkGetMemoryWin32HandleKHR,
    pub vk_get_memory_win32_handle_properties_khr: PFN_vkGetMemoryWin32HandlePropertiesKHR,
    pub vk_get_memory_fd_khr: PFN_vkGetMemoryFdKHR,
    pub vk_get_memory_fd_properties_khr: PFN_vkGetMemoryFdPropertiesKHR,
    pub vk_get_memory_zircon_handle_fuchsia: PFN_vkGetMemoryZirconHandleFUCHSIA,
    pub vk_get_memory_zircon_handle_properties_fuchsia: PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA,
    pub vk_get_memory_remote_address_nv: PFN_vkGetMemoryRemoteAddressNV,
    pub vk_get_physical_device_external_semaphore_properties: PFN_vkGetPhysicalDeviceExternalSemaphoreProperties,
    pub vk_get_semaphore_win32_handle_khr: PFN_vkGetSemaphoreWin32HandleKHR,
    pub vk_import_semaphore_win32_handle_khr: PFN_vkImportSemaphoreWin32HandleKHR,
    pub vk_get_semaphore_fd_khr: PFN_vkGetSemaphoreFdKHR,
    pub vk_import_semaphore_fd_khr: PFN_vkImportSemaphoreFdKHR,
    pub vk_get_semaphore_zircon_handle_fuchsia: PFN_vkGetSemaphoreZirconHandleFUCHSIA,
    pub vk_import_semaphore_zircon_handle_fuchsia: PFN_vkImportSemaphoreZirconHandleFUCHSIA,
    pub vk_get_physical_device_external_fence_properties: PFN_vkGetPhysicalDeviceExternalFenceProperties,
    pub vk_get_fence_win32_handle_khr: PFN_vkGetFenceWin32HandleKHR,
    pub vk_import_fence_win32_handle_khr: PFN_vkImportFenceWin32HandleKHR,
    pub vk_get_fence_fd_khr: PFN_vkGetFenceFdKHR,
    pub vk_import_fence_fd_khr: PFN_vkImportFenceFdKHR,
    pub vk_release_display_ext: PFN_vkReleaseDisplayEXT,
    pub vk_acquire_xlib_display_ext: PFN_vkAcquireXlibDisplayEXT,
    pub vk_get_rand_routput_display_ext: PFN_vkGetRandROutputDisplayEXT,
    pub vk_acquire_winrt_display_nv: PFN_vkAcquireWinrtDisplayNV,
    pub vk_get_winrt_display_nv: PFN_vkGetWinrtDisplayNV,
    pub vk_display_power_control_ext: PFN_vkDisplayPowerControlEXT,
    pub vk_register_device_event_ext: PFN_vkRegisterDeviceEventEXT,
    pub vk_register_display_event_ext: PFN_vkRegisterDisplayEventEXT,
    pub vk_get_swapchain_counter_ext: PFN_vkGetSwapchainCounterEXT,
    pub vk_get_physical_device_surface_capabilities2_ext: PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT,
    pub vk_enumerate_physical_device_groups: PFN_vkEnumeratePhysicalDeviceGroups,
    pub vk_get_device_group_peer_memory_features: PFN_vkGetDeviceGroupPeerMemoryFeatures,
    pub vk_bind_buffer_memory2: PFN_vkBindBufferMemory2,
    pub vk_bind_image_memory2: PFN_vkBindImageMemory2,
    pub vk_cmd_set_device_mask: PFN_vkCmdSetDeviceMask,
    pub vk_get_device_group_present_capabilities_khr: PFN_vkGetDeviceGroupPresentCapabilitiesKHR,
    pub vk_get_device_group_surface_present_modes_khr: PFN_vkGetDeviceGroupSurfacePresentModesKHR,
    pub vk_acquire_next_image2_khr: PFN_vkAcquireNextImage2KHR,
    pub vk_cmd_dispatch_base: PFN_vkCmdDispatchBase,
    pub vk_get_physical_device_present_rectangles_khr: PFN_vkGetPhysicalDevicePresentRectanglesKHR,
    pub vk_create_descriptor_update_template: PFN_vkCreateDescriptorUpdateTemplate,
    pub vk_destroy_descriptor_update_template: PFN_vkDestroyDescriptorUpdateTemplate,
    pub vk_update_descriptor_set_with_template: PFN_vkUpdateDescriptorSetWithTemplate,
    pub vk_cmd_push_descriptor_set_with_template_khr: PFN_vkCmdPushDescriptorSetWithTemplateKHR,
    pub vk_set_hdr_metadata_ext: PFN_vkSetHdrMetadataEXT,
    pub vk_get_swapchain_status_khr: PFN_vkGetSwapchainStatusKHR,
    pub vk_get_refresh_cycle_duration_google: PFN_vkGetRefreshCycleDurationGOOGLE,
    pub vk_get_past_presentation_timing_google: PFN_vkGetPastPresentationTimingGOOGLE,
    pub vk_create_iossurface_mvk: PFN_vkCreateIOSSurfaceMVK,
    pub vk_create_mac_ossurface_mvk: PFN_vkCreateMacOSSurfaceMVK,
    pub vk_create_metal_surface_ext: PFN_vkCreateMetalSurfaceEXT,
    pub vk_cmd_set_viewport_wscaling_nv: PFN_vkCmdSetViewportWScalingNV,
    pub vk_cmd_set_discard_rectangle_ext: PFN_vkCmdSetDiscardRectangleEXT,
    pub vk_cmd_set_discard_rectangle_enable_ext: PFN_vkCmdSetDiscardRectangleEnableEXT,
    pub vk_cmd_set_discard_rectangle_mode_ext: PFN_vkCmdSetDiscardRectangleModeEXT,
    pub vk_cmd_set_sample_locations_ext: PFN_vkCmdSetSampleLocationsEXT,
    pub vk_get_physical_device_multisample_properties_ext: PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT,
    pub vk_get_physical_device_surface_capabilities2_khr: PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR,
    pub vk_get_physical_device_surface_formats2_khr: PFN_vkGetPhysicalDeviceSurfaceFormats2KHR,
    pub vk_get_physical_device_display_properties2_khr: PFN_vkGetPhysicalDeviceDisplayProperties2KHR,
    pub vk_get_physical_device_display_plane_properties2_khr: PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
    pub vk_get_display_mode_properties2_khr: PFN_vkGetDisplayModeProperties2KHR,
    pub vk_get_display_plane_capabilities2_khr: PFN_vkGetDisplayPlaneCapabilities2KHR,
    pub vk_get_buffer_memory_requirements2: PFN_vkGetBufferMemoryRequirements2,
    pub vk_get_image_memory_requirements2: PFN_vkGetImageMemoryRequirements2,
    pub vk_get_image_sparse_memory_requirements2: PFN_vkGetImageSparseMemoryRequirements2,
    pub vk_get_device_buffer_memory_requirements: PFN_vkGetDeviceBufferMemoryRequirements,
    pub vk_get_device_image_memory_requirements: PFN_vkGetDeviceImageMemoryRequirements,
    pub vk_get_device_image_sparse_memory_requirements: PFN_vkGetDeviceImageSparseMemoryRequirements,
    pub vk_create_sampler_ycbcr_conversion: PFN_vkCreateSamplerYcbcrConversion,
    pub vk_destroy_sampler_ycbcr_conversion: PFN_vkDestroySamplerYcbcrConversion,
    pub vk_get_device_queue2: PFN_vkGetDeviceQueue2,
    pub vk_create_validation_cache_ext: PFN_vkCreateValidationCacheEXT,
    pub vk_destroy_validation_cache_ext: PFN_vkDestroyValidationCacheEXT,
    pub vk_get_validation_cache_data_ext: PFN_vkGetValidationCacheDataEXT,
    pub vk_merge_validation_caches_ext: PFN_vkMergeValidationCachesEXT,
    pub vk_get_descriptor_set_layout_support: PFN_vkGetDescriptorSetLayoutSupport,
    pub vk_get_swapchain_gralloc_usage_android: PFN_vkGetSwapchainGrallocUsageANDROID,
    pub vk_get_swapchain_gralloc_usage2_android: PFN_vkGetSwapchainGrallocUsage2ANDROID,
    pub vk_acquire_image_android: PFN_vkAcquireImageANDROID,
    pub vk_queue_signal_release_image_android: PFN_vkQueueSignalReleaseImageANDROID,
    pub vk_get_shader_info_amd: PFN_vkGetShaderInfoAMD,
    pub vk_set_local_dimming_amd: PFN_vkSetLocalDimmingAMD,
    pub vk_get_physical_device_calibrateable_time_domains_khr: PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR,
    pub vk_get_calibrated_timestamps_khr: PFN_vkGetCalibratedTimestampsKHR,
    pub vk_set_debug_utils_object_name_ext: PFN_vkSetDebugUtilsObjectNameEXT,
    pub vk_set_debug_utils_object_tag_ext: PFN_vkSetDebugUtilsObjectTagEXT,
    pub vk_queue_begin_debug_utils_label_ext: PFN_vkQueueBeginDebugUtilsLabelEXT,
    pub vk_queue_end_debug_utils_label_ext: PFN_vkQueueEndDebugUtilsLabelEXT,
    pub vk_queue_insert_debug_utils_label_ext: PFN_vkQueueInsertDebugUtilsLabelEXT,
    pub vk_cmd_begin_debug_utils_label_ext: PFN_vkCmdBeginDebugUtilsLabelEXT,
    pub vk_cmd_end_debug_utils_label_ext: PFN_vkCmdEndDebugUtilsLabelEXT,
    pub vk_cmd_insert_debug_utils_label_ext: PFN_vkCmdInsertDebugUtilsLabelEXT,
    pub vk_create_debug_utils_messenger_ext: PFN_vkCreateDebugUtilsMessengerEXT,
    pub vk_destroy_debug_utils_messenger_ext: PFN_vkDestroyDebugUtilsMessengerEXT,
    pub vk_submit_debug_utils_message_ext: PFN_vkSubmitDebugUtilsMessageEXT,
    pub vk_get_memory_host_pointer_properties_ext: PFN_vkGetMemoryHostPointerPropertiesEXT,
    pub vk_cmd_write_buffer_marker_amd: PFN_vkCmdWriteBufferMarkerAMD,
    pub vk_create_render_pass2: PFN_vkCreateRenderPass2,
    pub vk_cmd_begin_render_pass2: PFN_vkCmdBeginRenderPass2,
    pub vk_cmd_next_subpass2: PFN_vkCmdNextSubpass2,
    pub vk_cmd_end_render_pass2: PFN_vkCmdEndRenderPass2,
    pub vk_get_semaphore_counter_value: PFN_vkGetSemaphoreCounterValue,
    pub vk_wait_semaphores: PFN_vkWaitSemaphores,
    pub vk_signal_semaphore: PFN_vkSignalSemaphore,
    pub vk_get_android_hardware_buffer_properties_android: PFN_vkGetAndroidHardwareBufferPropertiesANDROID,
    pub vk_get_memory_android_hardware_buffer_android: PFN_vkGetMemoryAndroidHardwareBufferANDROID,
    pub vk_cmd_draw_indirect_count: PFN_vkCmdDrawIndirectCount,
    pub vk_cmd_draw_indexed_indirect_count: PFN_vkCmdDrawIndexedIndirectCount,
    pub vk_cmd_set_checkpoint_nv: PFN_vkCmdSetCheckpointNV,
    pub vk_get_queue_checkpoint_data_nv: PFN_vkGetQueueCheckpointDataNV,
    pub vk_cmd_bind_transform_feedback_buffers_ext: PFN_vkCmdBindTransformFeedbackBuffersEXT,
    pub vk_cmd_begin_transform_feedback_ext: PFN_vkCmdBeginTransformFeedbackEXT,
    pub vk_cmd_end_transform_feedback_ext: PFN_vkCmdEndTransformFeedbackEXT,
    pub vk_cmd_begin_query_indexed_ext: PFN_vkCmdBeginQueryIndexedEXT,
    pub vk_cmd_end_query_indexed_ext: PFN_vkCmdEndQueryIndexedEXT,
    pub vk_cmd_draw_indirect_byte_count_ext: PFN_vkCmdDrawIndirectByteCountEXT,
    pub vk_cmd_set_exclusive_scissor_nv: PFN_vkCmdSetExclusiveScissorNV,
    pub vk_cmd_set_exclusive_scissor_enable_nv: PFN_vkCmdSetExclusiveScissorEnableNV,
    pub vk_cmd_bind_shading_rate_image_nv: PFN_vkCmdBindShadingRateImageNV,
    pub vk_cmd_set_viewport_shading_rate_palette_nv: PFN_vkCmdSetViewportShadingRatePaletteNV,
    pub vk_cmd_set_coarse_sample_order_nv: PFN_vkCmdSetCoarseSampleOrderNV,
    pub vk_cmd_draw_mesh_tasks_nv: PFN_vkCmdDrawMeshTasksNV,
    pub vk_cmd_draw_mesh_tasks_indirect_nv: PFN_vkCmdDrawMeshTasksIndirectNV,
    pub vk_cmd_draw_mesh_tasks_indirect_count_nv: PFN_vkCmdDrawMeshTasksIndirectCountNV,
    pub vk_cmd_draw_mesh_tasks_ext: PFN_vkCmdDrawMeshTasksEXT,
    pub vk_cmd_draw_mesh_tasks_indirect_ext: PFN_vkCmdDrawMeshTasksIndirectEXT,
    pub vk_cmd_draw_mesh_tasks_indirect_count_ext: PFN_vkCmdDrawMeshTasksIndirectCountEXT,
    pub vk_compile_deferred_nv: PFN_vkCompileDeferredNV,
    pub vk_create_acceleration_structure_nv: PFN_vkCreateAccelerationStructureNV,
    pub vk_cmd_bind_invocation_mask_huawei: PFN_vkCmdBindInvocationMaskHUAWEI,
    pub vk_destroy_acceleration_structure_khr: PFN_vkDestroyAccelerationStructureKHR,
    pub vk_destroy_acceleration_structure_nv: PFN_vkDestroyAccelerationStructureNV,
    pub vk_get_acceleration_structure_memory_requirements_nv: PFN_vkGetAccelerationStructureMemoryRequirementsNV,
    pub vk_bind_acceleration_structure_memory_nv: PFN_vkBindAccelerationStructureMemoryNV,
    pub vk_cmd_copy_acceleration_structure_nv: PFN_vkCmdCopyAccelerationStructureNV,
    pub vk_cmd_copy_acceleration_structure_khr: PFN_vkCmdCopyAccelerationStructureKHR,
    pub vk_copy_acceleration_structure_khr: PFN_vkCopyAccelerationStructureKHR,
    pub vk_cmd_copy_acceleration_structure_to_memory_khr: PFN_vkCmdCopyAccelerationStructureToMemoryKHR,
    pub vk_copy_acceleration_structure_to_memory_khr: PFN_vkCopyAccelerationStructureToMemoryKHR,
    pub vk_cmd_copy_memory_to_acceleration_structure_khr: PFN_vkCmdCopyMemoryToAccelerationStructureKHR,
    pub vk_copy_memory_to_acceleration_structure_khr: PFN_vkCopyMemoryToAccelerationStructureKHR,
    pub vk_cmd_write_acceleration_structures_properties_khr: PFN_vkCmdWriteAccelerationStructuresPropertiesKHR,
    pub vk_cmd_write_acceleration_structures_properties_nv: PFN_vkCmdWriteAccelerationStructuresPropertiesNV,
    pub vk_cmd_build_acceleration_structure_nv: PFN_vkCmdBuildAccelerationStructureNV,
    pub vk_write_acceleration_structures_properties_khr: PFN_vkWriteAccelerationStructuresPropertiesKHR,
    pub vk_cmd_trace_rays_khr: PFN_vkCmdTraceRaysKHR,
    pub vk_cmd_trace_rays_nv: PFN_vkCmdTraceRaysNV,
    pub vk_get_ray_tracing_shader_group_handles_khr: PFN_vkGetRayTracingShaderGroupHandlesKHR,
    pub vk_get_ray_tracing_capture_replay_shader_group_handles_khr: PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR,
    pub vk_get_acceleration_structure_handle_nv: PFN_vkGetAccelerationStructureHandleNV,
    pub vk_create_ray_tracing_pipelines_nv: PFN_vkCreateRayTracingPipelinesNV,
    pub vk_create_ray_tracing_pipelines_khr: PFN_vkCreateRayTracingPipelinesKHR,
    pub vk_get_physical_device_cooperative_matrix_properties_nv: PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
    pub vk_cmd_trace_rays_indirect_khr: PFN_vkCmdTraceRaysIndirectKHR,
    pub vk_cmd_trace_rays_indirect2_khr: PFN_vkCmdTraceRaysIndirect2KHR,
    pub vk_get_device_acceleration_structure_compatibility_khr: PFN_vkGetDeviceAccelerationStructureCompatibilityKHR,
    pub vk_get_ray_tracing_shader_group_stack_size_khr: PFN_vkGetRayTracingShaderGroupStackSizeKHR,
    pub vk_cmd_set_ray_tracing_pipeline_stack_size_khr: PFN_vkCmdSetRayTracingPipelineStackSizeKHR,
    pub vk_get_image_view_handle_nvx: PFN_vkGetImageViewHandleNVX,
    pub vk_get_image_view_address_nvx: PFN_vkGetImageViewAddressNVX,
    pub vk_get_physical_device_surface_present_modes2_ext: PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT,
    pub vk_get_device_group_surface_present_modes2_ext: PFN_vkGetDeviceGroupSurfacePresentModes2EXT,
    pub vk_acquire_full_screen_exclusive_mode_ext: PFN_vkAcquireFullScreenExclusiveModeEXT,
    pub vk_release_full_screen_exclusive_mode_ext: PFN_vkReleaseFullScreenExclusiveModeEXT,
    pub vk_enumerate_physical_device_queue_family_performance_query_counters_khr: PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
    pub vk_get_physical_device_queue_family_performance_query_passes_khr: PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
    pub vk_acquire_profiling_lock_khr: PFN_vkAcquireProfilingLockKHR,
    pub vk_release_profiling_lock_khr: PFN_vkReleaseProfilingLockKHR,
    pub vk_get_image_drm_format_modifier_properties_ext: PFN_vkGetImageDrmFormatModifierPropertiesEXT,
    pub vk_get_buffer_opaque_capture_address: PFN_vkGetBufferOpaqueCaptureAddress,
    pub vk_get_buffer_device_address: PFN_vkGetBufferDeviceAddress,
    pub vk_create_headless_surface_ext: PFN_vkCreateHeadlessSurfaceEXT,
    pub vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv: PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
    pub vk_initialize_performance_api_intel: PFN_vkInitializePerformanceApiINTEL,
    pub vk_uninitialize_performance_api_intel: PFN_vkUninitializePerformanceApiINTEL,
    pub vk_cmd_set_performance_marker_intel: PFN_vkCmdSetPerformanceMarkerINTEL,
    pub vk_cmd_set_performance_stream_marker_intel: PFN_vkCmdSetPerformanceStreamMarkerINTEL,
    pub vk_cmd_set_performance_override_intel: PFN_vkCmdSetPerformanceOverrideINTEL,
    pub vk_acquire_performance_configuration_intel: PFN_vkAcquirePerformanceConfigurationINTEL,
    pub vk_release_performance_configuration_intel: PFN_vkReleasePerformanceConfigurationINTEL,
    pub vk_queue_set_performance_configuration_intel: PFN_vkQueueSetPerformanceConfigurationINTEL,
    pub vk_get_performance_parameter_intel: PFN_vkGetPerformanceParameterINTEL,
    pub vk_get_device_memory_opaque_capture_address: PFN_vkGetDeviceMemoryOpaqueCaptureAddress,
    pub vk_get_pipeline_executable_properties_khr: PFN_vkGetPipelineExecutablePropertiesKHR,
    pub vk_get_pipeline_executable_statistics_khr: PFN_vkGetPipelineExecutableStatisticsKHR,
    pub vk_get_pipeline_executable_internal_representations_khr: PFN_vkGetPipelineExecutableInternalRepresentationsKHR,
    pub vk_cmd_set_line_stipple_khr: PFN_vkCmdSetLineStippleKHR,
    pub vk_get_physical_device_tool_properties: PFN_vkGetPhysicalDeviceToolProperties,
    pub vk_create_acceleration_structure_khr: PFN_vkCreateAccelerationStructureKHR,
    pub vk_cmd_build_acceleration_structures_khr: PFN_vkCmdBuildAccelerationStructuresKHR,
    pub vk_cmd_build_acceleration_structures_indirect_khr: PFN_vkCmdBuildAccelerationStructuresIndirectKHR,
    pub vk_build_acceleration_structures_khr: PFN_vkBuildAccelerationStructuresKHR,
    pub vk_get_acceleration_structure_device_address_khr: PFN_vkGetAccelerationStructureDeviceAddressKHR,
    pub vk_create_deferred_operation_khr: PFN_vkCreateDeferredOperationKHR,
    pub vk_destroy_deferred_operation_khr: PFN_vkDestroyDeferredOperationKHR,
    pub vk_get_deferred_operation_max_concurrency_khr: PFN_vkGetDeferredOperationMaxConcurrencyKHR,
    pub vk_get_deferred_operation_result_khr: PFN_vkGetDeferredOperationResultKHR,
    pub vk_deferred_operation_join_khr: PFN_vkDeferredOperationJoinKHR,
    pub vk_get_pipeline_indirect_memory_requirements_nv: PFN_vkGetPipelineIndirectMemoryRequirementsNV,
    pub vk_get_pipeline_indirect_device_address_nv: PFN_vkGetPipelineIndirectDeviceAddressNV,
    pub vk_cmd_set_cull_mode: PFN_vkCmdSetCullMode,
    pub vk_cmd_set_front_face: PFN_vkCmdSetFrontFace,
    pub vk_cmd_set_primitive_topology: PFN_vkCmdSetPrimitiveTopology,
    pub vk_cmd_set_viewport_with_count: PFN_vkCmdSetViewportWithCount,
    pub vk_cmd_set_scissor_with_count: PFN_vkCmdSetScissorWithCount,
    pub vk_cmd_bind_index_buffer2_khr: PFN_vkCmdBindIndexBuffer2KHR,
    pub vk_cmd_bind_vertex_buffers2: PFN_vkCmdBindVertexBuffers2,
    pub vk_cmd_set_depth_test_enable: PFN_vkCmdSetDepthTestEnable,
    pub vk_cmd_set_depth_write_enable: PFN_vkCmdSetDepthWriteEnable,
    pub vk_cmd_set_depth_compare_op: PFN_vkCmdSetDepthCompareOp,
    pub vk_cmd_set_depth_bounds_test_enable: PFN_vkCmdSetDepthBoundsTestEnable,
    pub vk_cmd_set_stencil_test_enable: PFN_vkCmdSetStencilTestEnable,
    pub vk_cmd_set_stencil_op: PFN_vkCmdSetStencilOp,
    pub vk_cmd_set_patch_control_points_ext: PFN_vkCmdSetPatchControlPointsEXT,
    pub vk_cmd_set_rasterizer_discard_enable: PFN_vkCmdSetRasterizerDiscardEnable,
    pub vk_cmd_set_depth_bias_enable: PFN_vkCmdSetDepthBiasEnable,
    pub vk_cmd_set_logic_op_ext: PFN_vkCmdSetLogicOpEXT,
    pub vk_cmd_set_primitive_restart_enable: PFN_vkCmdSetPrimitiveRestartEnable,
    pub vk_cmd_set_tessellation_domain_origin_ext: PFN_vkCmdSetTessellationDomainOriginEXT,
    pub vk_cmd_set_depth_clamp_enable_ext: PFN_vkCmdSetDepthClampEnableEXT,
    pub vk_cmd_set_polygon_mode_ext: PFN_vkCmdSetPolygonModeEXT,
    pub vk_cmd_set_rasterization_samples_ext: PFN_vkCmdSetRasterizationSamplesEXT,
    pub vk_cmd_set_sample_mask_ext: PFN_vkCmdSetSampleMaskEXT,
    pub vk_cmd_set_alpha_to_coverage_enable_ext: PFN_vkCmdSetAlphaToCoverageEnableEXT,
    pub vk_cmd_set_alpha_to_one_enable_ext: PFN_vkCmdSetAlphaToOneEnableEXT,
    pub vk_cmd_set_logic_op_enable_ext: PFN_vkCmdSetLogicOpEnableEXT,
    pub vk_cmd_set_color_blend_enable_ext: PFN_vkCmdSetColorBlendEnableEXT,
    pub vk_cmd_set_color_blend_equation_ext: PFN_vkCmdSetColorBlendEquationEXT,
    pub vk_cmd_set_color_write_mask_ext: PFN_vkCmdSetColorWriteMaskEXT,
    pub vk_cmd_set_rasterization_stream_ext: PFN_vkCmdSetRasterizationStreamEXT,
    pub vk_cmd_set_conservative_rasterization_mode_ext: PFN_vkCmdSetConservativeRasterizationModeEXT,
    pub vk_cmd_set_extra_primitive_overestimation_size_ext: PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT,
    pub vk_cmd_set_depth_clip_enable_ext: PFN_vkCmdSetDepthClipEnableEXT,
    pub vk_cmd_set_sample_locations_enable_ext: PFN_vkCmdSetSampleLocationsEnableEXT,
    pub vk_cmd_set_color_blend_advanced_ext: PFN_vkCmdSetColorBlendAdvancedEXT,
    pub vk_cmd_set_provoking_vertex_mode_ext: PFN_vkCmdSetProvokingVertexModeEXT,
    pub vk_cmd_set_line_rasterization_mode_ext: PFN_vkCmdSetLineRasterizationModeEXT,
    pub vk_cmd_set_line_stipple_enable_ext: PFN_vkCmdSetLineStippleEnableEXT,
    pub vk_cmd_set_depth_clip_negative_one_to_one_ext: PFN_vkCmdSetDepthClipNegativeOneToOneEXT,
    pub vk_cmd_set_viewport_wscaling_enable_nv: PFN_vkCmdSetViewportWScalingEnableNV,
    pub vk_cmd_set_viewport_swizzle_nv: PFN_vkCmdSetViewportSwizzleNV,
    pub vk_cmd_set_coverage_to_color_enable_nv: PFN_vkCmdSetCoverageToColorEnableNV,
    pub vk_cmd_set_coverage_to_color_location_nv: PFN_vkCmdSetCoverageToColorLocationNV,
    pub vk_cmd_set_coverage_modulation_mode_nv: PFN_vkCmdSetCoverageModulationModeNV,
    pub vk_cmd_set_coverage_modulation_table_enable_nv: PFN_vkCmdSetCoverageModulationTableEnableNV,
    pub vk_cmd_set_coverage_modulation_table_nv: PFN_vkCmdSetCoverageModulationTableNV,
    pub vk_cmd_set_shading_rate_image_enable_nv: PFN_vkCmdSetShadingRateImageEnableNV,
    pub vk_cmd_set_coverage_reduction_mode_nv: PFN_vkCmdSetCoverageReductionModeNV,
    pub vk_cmd_set_representative_fragment_test_enable_nv: PFN_vkCmdSetRepresentativeFragmentTestEnableNV,
    pub vk_create_private_data_slot: PFN_vkCreatePrivateDataSlot,
    pub vk_destroy_private_data_slot: PFN_vkDestroyPrivateDataSlot,
    pub vk_set_private_data: PFN_vkSetPrivateData,
    pub vk_get_private_data: PFN_vkGetPrivateData,
    pub vk_cmd_copy_buffer2: PFN_vkCmdCopyBuffer2,
    pub vk_cmd_copy_image2: PFN_vkCmdCopyImage2,
    pub vk_cmd_blit_image2: PFN_vkCmdBlitImage2,
    pub vk_cmd_copy_buffer_to_image2: PFN_vkCmdCopyBufferToImage2,
    pub vk_cmd_copy_image_to_buffer2: PFN_vkCmdCopyImageToBuffer2,
    pub vk_cmd_resolve_image2: PFN_vkCmdResolveImage2,
    pub vk_cmd_set_fragment_shading_rate_khr: PFN_vkCmdSetFragmentShadingRateKHR,
    pub vk_get_physical_device_fragment_shading_rates_khr: PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR,
    pub vk_cmd_set_fragment_shading_rate_enum_nv: PFN_vkCmdSetFragmentShadingRateEnumNV,
    pub vk_get_acceleration_structure_build_sizes_khr: PFN_vkGetAccelerationStructureBuildSizesKHR,
    pub vk_cmd_set_vertex_input_ext: PFN_vkCmdSetVertexInputEXT,
    pub vk_cmd_set_color_write_enable_ext: PFN_vkCmdSetColorWriteEnableEXT,
    pub vk_cmd_set_event2: PFN_vkCmdSetEvent2,
    pub vk_cmd_reset_event2: PFN_vkCmdResetEvent2,
    pub vk_cmd_wait_events2: PFN_vkCmdWaitEvents2,
    pub vk_cmd_pipeline_barrier2: PFN_vkCmdPipelineBarrier2,
    pub vk_queue_submit2: PFN_vkQueueSubmit2,
    pub vk_cmd_write_timestamp2: PFN_vkCmdWriteTimestamp2,
    pub vk_cmd_write_buffer_marker2_amd: PFN_vkCmdWriteBufferMarker2AMD,
    pub vk_get_queue_checkpoint_data2_nv: PFN_vkGetQueueCheckpointData2NV,
    pub vk_copy_memory_to_image_ext: PFN_vkCopyMemoryToImageEXT,
    pub vk_copy_image_to_memory_ext: PFN_vkCopyImageToMemoryEXT,
    pub vk_copy_image_to_image_ext: PFN_vkCopyImageToImageEXT,
    pub vk_transition_image_layout_ext: PFN_vkTransitionImageLayoutEXT,
    pub vk_get_physical_device_video_capabilities_khr: PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR,
    pub vk_get_physical_device_video_format_properties_khr: PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR,
    pub vk_get_physical_device_video_encode_quality_level_properties_khr: PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR,
    pub vk_create_video_session_khr: PFN_vkCreateVideoSessionKHR,
    pub vk_destroy_video_session_khr: PFN_vkDestroyVideoSessionKHR,
    pub vk_create_video_session_parameters_khr: PFN_vkCreateVideoSessionParametersKHR,
    pub vk_update_video_session_parameters_khr: PFN_vkUpdateVideoSessionParametersKHR,
    pub vk_get_encoded_video_session_parameters_khr: PFN_vkGetEncodedVideoSessionParametersKHR,
    pub vk_destroy_video_session_parameters_khr: PFN_vkDestroyVideoSessionParametersKHR,
    pub vk_get_video_session_memory_requirements_khr: PFN_vkGetVideoSessionMemoryRequirementsKHR,
    pub vk_bind_video_session_memory_khr: PFN_vkBindVideoSessionMemoryKHR,
    pub vk_cmd_decode_video_khr: PFN_vkCmdDecodeVideoKHR,
    pub vk_cmd_begin_video_coding_khr: PFN_vkCmdBeginVideoCodingKHR,
    pub vk_cmd_control_video_coding_khr: PFN_vkCmdControlVideoCodingKHR,
    pub vk_cmd_end_video_coding_khr: PFN_vkCmdEndVideoCodingKHR,
    pub vk_cmd_encode_video_khr: PFN_vkCmdEncodeVideoKHR,
    pub vk_cmd_decompress_memory_nv: PFN_vkCmdDecompressMemoryNV,
    pub vk_cmd_decompress_memory_indirect_count_nv: PFN_vkCmdDecompressMemoryIndirectCountNV,
    pub vk_create_cu_module_nvx: PFN_vkCreateCuModuleNVX,
    pub vk_create_cu_function_nvx: PFN_vkCreateCuFunctionNVX,
    pub vk_destroy_cu_module_nvx: PFN_vkDestroyCuModuleNVX,
    pub vk_destroy_cu_function_nvx: PFN_vkDestroyCuFunctionNVX,
    pub vk_cmd_cu_launch_kernel_nvx: PFN_vkCmdCuLaunchKernelNVX,
    pub vk_get_descriptor_set_layout_size_ext: PFN_vkGetDescriptorSetLayoutSizeEXT,
    pub vk_get_descriptor_set_layout_binding_offset_ext: PFN_vkGetDescriptorSetLayoutBindingOffsetEXT,
    pub vk_get_descriptor_ext: PFN_vkGetDescriptorEXT,
    pub vk_cmd_bind_descriptor_buffers_ext: PFN_vkCmdBindDescriptorBuffersEXT,
    pub vk_cmd_set_descriptor_buffer_offsets_ext: PFN_vkCmdSetDescriptorBufferOffsetsEXT,
    pub vk_cmd_bind_descriptor_buffer_embedded_samplers_ext: PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT,
    pub vk_get_buffer_opaque_capture_descriptor_data_ext: PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT,
    pub vk_get_image_opaque_capture_descriptor_data_ext: PFN_vkGetImageOpaqueCaptureDescriptorDataEXT,
    pub vk_get_image_view_opaque_capture_descriptor_data_ext: PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT,
    pub vk_get_sampler_opaque_capture_descriptor_data_ext: PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT,
    pub vk_get_acceleration_structure_opaque_capture_descriptor_data_ext: PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT,
    pub vk_set_device_memory_priority_ext: PFN_vkSetDeviceMemoryPriorityEXT,
    pub vk_acquire_drm_display_ext: PFN_vkAcquireDrmDisplayEXT,
    pub vk_get_drm_display_ext: PFN_vkGetDrmDisplayEXT,
    pub vk_wait_for_present_khr: PFN_vkWaitForPresentKHR,
    pub vk_create_buffer_collection_fuchsia: PFN_vkCreateBufferCollectionFUCHSIA,
    pub vk_set_buffer_collection_buffer_constraints_fuchsia: PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA,
    pub vk_set_buffer_collection_image_constraints_fuchsia: PFN_vkSetBufferCollectionImageConstraintsFUCHSIA,
    pub vk_destroy_buffer_collection_fuchsia: PFN_vkDestroyBufferCollectionFUCHSIA,
    pub vk_get_buffer_collection_properties_fuchsia: PFN_vkGetBufferCollectionPropertiesFUCHSIA,
    pub vk_create_cuda_module_nv: PFN_vkCreateCudaModuleNV,
    pub vk_get_cuda_module_cache_nv: PFN_vkGetCudaModuleCacheNV,
    pub vk_create_cuda_function_nv: PFN_vkCreateCudaFunctionNV,
    pub vk_destroy_cuda_module_nv: PFN_vkDestroyCudaModuleNV,
    pub vk_destroy_cuda_function_nv: PFN_vkDestroyCudaFunctionNV,
    pub vk_cmd_cuda_launch_kernel_nv: PFN_vkCmdCudaLaunchKernelNV,
    pub vk_cmd_begin_rendering: PFN_vkCmdBeginRendering,
    pub vk_cmd_end_rendering: PFN_vkCmdEndRendering,
    pub vk_get_descriptor_set_layout_host_mapping_info_valve: PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE,
    pub vk_get_descriptor_set_host_mapping_valve: PFN_vkGetDescriptorSetHostMappingVALVE,
    pub vk_create_micromap_ext: PFN_vkCreateMicromapEXT,
    pub vk_cmd_build_micromaps_ext: PFN_vkCmdBuildMicromapsEXT,
    pub vk_build_micromaps_ext: PFN_vkBuildMicromapsEXT,
    pub vk_destroy_micromap_ext: PFN_vkDestroyMicromapEXT,
    pub vk_cmd_copy_micromap_ext: PFN_vkCmdCopyMicromapEXT,
    pub vk_copy_micromap_ext: PFN_vkCopyMicromapEXT,
    pub vk_cmd_copy_micromap_to_memory_ext: PFN_vkCmdCopyMicromapToMemoryEXT,
    pub vk_copy_micromap_to_memory_ext: PFN_vkCopyMicromapToMemoryEXT,
    pub vk_cmd_copy_memory_to_micromap_ext: PFN_vkCmdCopyMemoryToMicromapEXT,
    pub vk_copy_memory_to_micromap_ext: PFN_vkCopyMemoryToMicromapEXT,
    pub vk_cmd_write_micromaps_properties_ext: PFN_vkCmdWriteMicromapsPropertiesEXT,
    pub vk_write_micromaps_properties_ext: PFN_vkWriteMicromapsPropertiesEXT,
    pub vk_get_device_micromap_compatibility_ext: PFN_vkGetDeviceMicromapCompatibilityEXT,
    pub vk_get_micromap_build_sizes_ext: PFN_vkGetMicromapBuildSizesEXT,
    pub vk_get_shader_module_identifier_ext: PFN_vkGetShaderModuleIdentifierEXT,
    pub vk_get_shader_module_create_info_identifier_ext: PFN_vkGetShaderModuleCreateInfoIdentifierEXT,
    pub vk_get_image_subresource_layout2_khr: PFN_vkGetImageSubresourceLayout2KHR,
    pub vk_get_pipeline_properties_ext: PFN_vkGetPipelinePropertiesEXT,
    pub vk_export_metal_objects_ext: PFN_vkExportMetalObjectsEXT,
    pub vk_get_framebuffer_tile_properties_qcom: PFN_vkGetFramebufferTilePropertiesQCOM,
    pub vk_get_dynamic_rendering_tile_properties_qcom: PFN_vkGetDynamicRenderingTilePropertiesQCOM,
    pub vk_get_physical_device_optical_flow_image_formats_nv: PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV,
    pub vk_create_optical_flow_session_nv: PFN_vkCreateOpticalFlowSessionNV,
    pub vk_destroy_optical_flow_session_nv: PFN_vkDestroyOpticalFlowSessionNV,
    pub vk_bind_optical_flow_session_image_nv: PFN_vkBindOpticalFlowSessionImageNV,
    pub vk_cmd_optical_flow_execute_nv: PFN_vkCmdOpticalFlowExecuteNV,
    pub vk_get_device_fault_info_ext: PFN_vkGetDeviceFaultInfoEXT,
    pub vk_cmd_set_depth_bias2_ext: PFN_vkCmdSetDepthBias2EXT,
    pub vk_release_swapchain_images_ext: PFN_vkReleaseSwapchainImagesEXT,
    pub vk_get_device_image_subresource_layout_khr: PFN_vkGetDeviceImageSubresourceLayoutKHR,
    pub vk_map_memory2_khr: PFN_vkMapMemory2KHR,
    pub vk_unmap_memory2_khr: PFN_vkUnmapMemory2KHR,
    pub vk_create_shaders_ext: PFN_vkCreateShadersEXT,
    pub vk_destroy_shader_ext: PFN_vkDestroyShaderEXT,
    pub vk_get_shader_binary_data_ext: PFN_vkGetShaderBinaryDataEXT,
    pub vk_cmd_bind_shaders_ext: PFN_vkCmdBindShadersEXT,
    pub vk_get_screen_buffer_properties_qnx: PFN_vkGetScreenBufferPropertiesQNX,
    pub vk_get_physical_device_cooperative_matrix_properties_khr: PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR,
    pub vk_get_execution_graph_pipeline_scratch_size_amdx: PFN_vkGetExecutionGraphPipelineScratchSizeAMDX,
    pub vk_get_execution_graph_pipeline_node_index_amdx: PFN_vkGetExecutionGraphPipelineNodeIndexAMDX,
    pub vk_create_execution_graph_pipelines_amdx: PFN_vkCreateExecutionGraphPipelinesAMDX,
    pub vk_cmd_initialize_graph_scratch_memory_amdx: PFN_vkCmdInitializeGraphScratchMemoryAMDX,
    pub vk_cmd_dispatch_graph_amdx: PFN_vkCmdDispatchGraphAMDX,
    pub vk_cmd_dispatch_graph_indirect_amdx: PFN_vkCmdDispatchGraphIndirectAMDX,
    pub vk_cmd_dispatch_graph_indirect_count_amdx: PFN_vkCmdDispatchGraphIndirectCountAMDX,
    pub vk_cmd_bind_descriptor_sets2_khr: PFN_vkCmdBindDescriptorSets2KHR,
    pub vk_cmd_push_constants2_khr: PFN_vkCmdPushConstants2KHR,
    pub vk_cmd_push_descriptor_set2_khr: PFN_vkCmdPushDescriptorSet2KHR,
    pub vk_cmd_push_descriptor_set_with_template2_khr: PFN_vkCmdPushDescriptorSetWithTemplate2KHR,
    pub vk_cmd_set_descriptor_buffer_offsets2_ext: PFN_vkCmdSetDescriptorBufferOffsets2EXT,
    pub vk_cmd_bind_descriptor_buffer_embedded_samplers2_ext: PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT,
    pub vk_set_latency_sleep_mode_nv: PFN_vkSetLatencySleepModeNV,
    pub vk_latency_sleep_nv: PFN_vkLatencySleepNV,
    pub vk_set_latency_marker_nv: PFN_vkSetLatencyMarkerNV,
    pub vk_get_latency_timings_nv: PFN_vkGetLatencyTimingsNV,
    pub vk_queue_notify_out_of_band_nv: PFN_vkQueueNotifyOutOfBandNV,
    pub vk_cmd_set_rendering_attachment_locations_khr: PFN_vkCmdSetRenderingAttachmentLocationsKHR,
    pub vk_cmd_set_rendering_input_attachment_indices_khr: PFN_vkCmdSetRenderingInputAttachmentIndicesKHR,
}

impl FunctionAddressTable {
    pub const fn new() -> Self {
        Self {
            vk_create_instance: {
                unsafe extern "system" fn vkCreateInstance(
                    p_create_info: *const VkInstanceCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_instance: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateInstance))
                }
                vkCreateInstance
            },
            vk_destroy_instance: {
                unsafe extern "system" fn vkDestroyInstance(
                    instance: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyInstance))
                }
                vkDestroyInstance
            },
            vk_enumerate_physical_devices: {
                unsafe extern "system" fn vkEnumeratePhysicalDevices(
                    instance: NonDisposableHandle,
                    p_physical_device_count: *mut u32,
                    p_physical_devices: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumeratePhysicalDevices))
                }
                vkEnumeratePhysicalDevices
            },
            vk_get_device_proc_addr: {
                unsafe extern "system" fn vkGetDeviceProcAddr(
                    device: NonDisposableHandle,
                    p_name: *const c_char,
                ) -> PFN_vkVoidFunction {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceProcAddr))
                }
                vkGetDeviceProcAddr
            },
            vk_get_instance_proc_addr: {
                unsafe extern "system" fn vkGetInstanceProcAddr(
                    instance: NonDisposableHandle,
                    p_name: *const c_char,
                ) -> PFN_vkVoidFunction {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetInstanceProcAddr))
                }
                vkGetInstanceProcAddr
            },
            vk_get_physical_device_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceProperties(
                    physical_device: NonDisposableHandle,
                    p_properties: *mut VkPhysicalDeviceProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceProperties))
                }
                vkGetPhysicalDeviceProperties
            },
            vk_get_physical_device_queue_family_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceQueueFamilyProperties(
                    physical_device: NonDisposableHandle,
                    p_queue_family_property_count: *mut u32,
                    p_queue_family_properties: *mut VkQueueFamilyProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceQueueFamilyProperties))
                }
                vkGetPhysicalDeviceQueueFamilyProperties
            },
            vk_get_physical_device_memory_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceMemoryProperties(
                    physical_device: NonDisposableHandle,
                    p_memory_properties: *mut VkPhysicalDeviceMemoryProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceMemoryProperties))
                }
                vkGetPhysicalDeviceMemoryProperties
            },
            vk_get_physical_device_features: {
                unsafe extern "system" fn vkGetPhysicalDeviceFeatures(
                    physical_device: NonDisposableHandle,
                    p_features: *mut VkPhysicalDeviceFeatures,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceFeatures))
                }
                vkGetPhysicalDeviceFeatures
            },
            vk_get_physical_device_format_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceFormatProperties(
                    physical_device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    p_format_properties: *mut VkFormatProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceFormatProperties))
                }
                vkGetPhysicalDeviceFormatProperties
            },
            vk_get_physical_device_image_format_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceImageFormatProperties(
                    physical_device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    type_: NonDisposableHandle,
                    tiling: NonDisposableHandle,
                    usage: NonDisposableHandle,
                    flags: NonDisposableHandle,
                    p_image_format_properties: *mut VkImageFormatProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceImageFormatProperties))
                }
                vkGetPhysicalDeviceImageFormatProperties
            },
            vk_create_device: {
                unsafe extern "system" fn vkCreateDevice(
                    physical_device: NonDisposableHandle,
                    p_create_info: *const VkDeviceCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_device: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDevice))
                }
                vkCreateDevice
            },
            vk_destroy_device: {
                unsafe extern "system" fn vkDestroyDevice(
                    device: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDevice))
                }
                vkDestroyDevice
            },
            vk_enumerate_instance_version: {
                unsafe extern "system" fn vkEnumerateInstanceVersion(
                    p_api_version: *mut u32,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumerateInstanceVersion))
                }
                vkEnumerateInstanceVersion
            },
            vk_enumerate_instance_layer_properties: {
                unsafe extern "system" fn vkEnumerateInstanceLayerProperties(
                    p_property_count: *mut u32,
                    p_properties: *mut VkLayerProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumerateInstanceLayerProperties))
                }
                vkEnumerateInstanceLayerProperties
            },
            vk_enumerate_instance_extension_properties: {
                unsafe extern "system" fn vkEnumerateInstanceExtensionProperties(
                    p_layer_name: *const c_char,
                    p_property_count: *mut u32,
                    p_properties: *mut VkExtensionProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumerateInstanceExtensionProperties))
                }
                vkEnumerateInstanceExtensionProperties
            },
            vk_enumerate_device_layer_properties: {
                unsafe extern "system" fn vkEnumerateDeviceLayerProperties(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkLayerProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumerateDeviceLayerProperties))
                }
                vkEnumerateDeviceLayerProperties
            },
            vk_enumerate_device_extension_properties: {
                unsafe extern "system" fn vkEnumerateDeviceExtensionProperties(
                    physical_device: NonDisposableHandle,
                    p_layer_name: *const c_char,
                    p_property_count: *mut u32,
                    p_properties: *mut VkExtensionProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumerateDeviceExtensionProperties))
                }
                vkEnumerateDeviceExtensionProperties
            },
            vk_get_device_queue: {
                unsafe extern "system" fn vkGetDeviceQueue(
                    device: NonDisposableHandle,
                    queue_family_index: u32,
                    queue_index: u32,
                    p_queue: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceQueue))
                }
                vkGetDeviceQueue
            },
            vk_queue_submit: {
                unsafe extern "system" fn vkQueueSubmit(
                    queue: NonDisposableHandle,
                    submit_count: u32,
                    p_submits: *const VkSubmitInfo,
                    fence: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueSubmit))
                }
                vkQueueSubmit
            },
            vk_queue_wait_idle: {
                unsafe extern "system" fn vkQueueWaitIdle(
                    queue: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueWaitIdle))
                }
                vkQueueWaitIdle
            },
            vk_device_wait_idle: {
                unsafe extern "system" fn vkDeviceWaitIdle(
                    device: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDeviceWaitIdle))
                }
                vkDeviceWaitIdle
            },
            vk_allocate_memory: {
                unsafe extern "system" fn vkAllocateMemory(
                    device: NonDisposableHandle,
                    p_allocate_info: *const VkMemoryAllocateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_memory: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAllocateMemory))
                }
                vkAllocateMemory
            },
            vk_free_memory: {
                unsafe extern "system" fn vkFreeMemory(
                    device: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkFreeMemory))
                }
                vkFreeMemory
            },
            vk_map_memory: {
                unsafe extern "system" fn vkMapMemory(
                    device: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    size: NonDisposableHandle,
                    flags: NonDisposableHandle,
                    pp_data: *mut *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkMapMemory))
                }
                vkMapMemory
            },
            vk_unmap_memory: {
                unsafe extern "system" fn vkUnmapMemory(
                    device: NonDisposableHandle,
                    memory: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkUnmapMemory))
                }
                vkUnmapMemory
            },
            vk_flush_mapped_memory_ranges: {
                unsafe extern "system" fn vkFlushMappedMemoryRanges(
                    device: NonDisposableHandle,
                    memory_range_count: u32,
                    p_memory_ranges: *const VkMappedMemoryRange,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkFlushMappedMemoryRanges))
                }
                vkFlushMappedMemoryRanges
            },
            vk_invalidate_mapped_memory_ranges: {
                unsafe extern "system" fn vkInvalidateMappedMemoryRanges(
                    device: NonDisposableHandle,
                    memory_range_count: u32,
                    p_memory_ranges: *const VkMappedMemoryRange,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkInvalidateMappedMemoryRanges))
                }
                vkInvalidateMappedMemoryRanges
            },
            vk_get_device_memory_commitment: {
                unsafe extern "system" fn vkGetDeviceMemoryCommitment(
                    device: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    p_committed_memory_in_bytes: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceMemoryCommitment))
                }
                vkGetDeviceMemoryCommitment
            },
            vk_get_buffer_memory_requirements: {
                unsafe extern "system" fn vkGetBufferMemoryRequirements(
                    device: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    p_memory_requirements: *mut VkMemoryRequirements,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetBufferMemoryRequirements))
                }
                vkGetBufferMemoryRequirements
            },
            vk_bind_buffer_memory: {
                unsafe extern "system" fn vkBindBufferMemory(
                    device: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    memory_offset: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindBufferMemory))
                }
                vkBindBufferMemory
            },
            vk_get_image_memory_requirements: {
                unsafe extern "system" fn vkGetImageMemoryRequirements(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_memory_requirements: *mut VkMemoryRequirements,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageMemoryRequirements))
                }
                vkGetImageMemoryRequirements
            },
            vk_bind_image_memory: {
                unsafe extern "system" fn vkBindImageMemory(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    memory_offset: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindImageMemory))
                }
                vkBindImageMemory
            },
            vk_get_image_sparse_memory_requirements: {
                unsafe extern "system" fn vkGetImageSparseMemoryRequirements(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_sparse_memory_requirement_count: *mut u32,
                    p_sparse_memory_requirements: *mut VkSparseImageMemoryRequirements,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageSparseMemoryRequirements))
                }
                vkGetImageSparseMemoryRequirements
            },
            vk_get_physical_device_sparse_image_format_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceSparseImageFormatProperties(
                    physical_device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    type_: NonDisposableHandle,
                    samples: vk::SampleCountFlags,
                    usage: NonDisposableHandle,
                    tiling: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkSparseImageFormatProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSparseImageFormatProperties))
                }
                vkGetPhysicalDeviceSparseImageFormatProperties
            },
            vk_queue_bind_sparse: {
                unsafe extern "system" fn vkQueueBindSparse(
                    queue: NonDisposableHandle,
                    bind_info_count: u32,
                    p_bind_info: *const VkBindSparseInfo,
                    fence: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueBindSparse))
                }
                vkQueueBindSparse
            },
            vk_create_fence: {
                unsafe extern "system" fn vkCreateFence(
                    device: NonDisposableHandle,
                    p_create_info: *const VkFenceCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_fence: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateFence))
                }
                vkCreateFence
            },
            vk_destroy_fence: {
                unsafe extern "system" fn vkDestroyFence(
                    device: NonDisposableHandle,
                    fence: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyFence))
                }
                vkDestroyFence
            },
            vk_reset_fences: {
                unsafe extern "system" fn vkResetFences(
                    device: NonDisposableHandle,
                    fence_count: u32,
                    p_fences: *const NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkResetFences))
                }
                vkResetFences
            },
            vk_get_fence_status: {
                unsafe extern "system" fn vkGetFenceStatus(
                    device: NonDisposableHandle,
                    fence: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetFenceStatus))
                }
                vkGetFenceStatus
            },
            vk_wait_for_fences: {
                unsafe extern "system" fn vkWaitForFences(
                    device: NonDisposableHandle,
                    fence_count: u32,
                    p_fences: *const NonDisposableHandle,
                    wait_all: NonDisposableHandle,
                    timeout: u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkWaitForFences))
                }
                vkWaitForFences
            },
            vk_create_semaphore: {
                unsafe extern "system" fn vkCreateSemaphore(
                    device: NonDisposableHandle,
                    p_create_info: *const VkSemaphoreCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_semaphore: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateSemaphore))
                }
                vkCreateSemaphore
            },
            vk_destroy_semaphore: {
                unsafe extern "system" fn vkDestroySemaphore(
                    device: NonDisposableHandle,
                    semaphore: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroySemaphore))
                }
                vkDestroySemaphore
            },
            vk_create_event: {
                unsafe extern "system" fn vkCreateEvent(
                    device: NonDisposableHandle,
                    p_create_info: *const VkEventCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_event: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateEvent))
                }
                vkCreateEvent
            },
            vk_destroy_event: {
                unsafe extern "system" fn vkDestroyEvent(
                    device: NonDisposableHandle,
                    event: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyEvent))
                }
                vkDestroyEvent
            },
            vk_get_event_status: {
                unsafe extern "system" fn vkGetEventStatus(
                    device: NonDisposableHandle,
                    event: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetEventStatus))
                }
                vkGetEventStatus
            },
            vk_set_event: {
                unsafe extern "system" fn vkSetEvent(
                    device: NonDisposableHandle,
                    event: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetEvent))
                }
                vkSetEvent
            },
            vk_reset_event: {
                unsafe extern "system" fn vkResetEvent(
                    device: NonDisposableHandle,
                    event: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkResetEvent))
                }
                vkResetEvent
            },
            vk_create_query_pool: {
                unsafe extern "system" fn vkCreateQueryPool(
                    device: NonDisposableHandle,
                    p_create_info: *const VkQueryPoolCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_query_pool: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateQueryPool))
                }
                vkCreateQueryPool
            },
            vk_destroy_query_pool: {
                unsafe extern "system" fn vkDestroyQueryPool(
                    device: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyQueryPool))
                }
                vkDestroyQueryPool
            },
            vk_get_query_pool_results: {
                unsafe extern "system" fn vkGetQueryPoolResults(
                    device: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                    query_count: u32,
                    data_size: usize,
                    p_data: *mut c_void,
                    stride: NonDisposableHandle,
                    flags: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetQueryPoolResults))
                }
                vkGetQueryPoolResults
            },
            vk_reset_query_pool: {
                unsafe extern "system" fn vkResetQueryPool(
                    device: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                    query_count: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkResetQueryPool))
                }
                vkResetQueryPool
            },
            vk_create_buffer: {
                unsafe extern "system" fn vkCreateBuffer(
                    device: NonDisposableHandle,
                    p_create_info: *const VkBufferCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_buffer: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateBuffer))
                }
                vkCreateBuffer
            },
            vk_destroy_buffer: {
                unsafe extern "system" fn vkDestroyBuffer(
                    device: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyBuffer))
                }
                vkDestroyBuffer
            },
            vk_create_buffer_view: {
                unsafe extern "system" fn vkCreateBufferView(
                    device: NonDisposableHandle,
                    p_create_info: *const VkBufferViewCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_view: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateBufferView))
                }
                vkCreateBufferView
            },
            vk_destroy_buffer_view: {
                unsafe extern "system" fn vkDestroyBufferView(
                    device: NonDisposableHandle,
                    buffer_view: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyBufferView))
                }
                vkDestroyBufferView
            },
            vk_create_image: {
                unsafe extern "system" fn vkCreateImage(
                    device: NonDisposableHandle,
                    p_create_info: *const VkImageCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_image: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateImage))
                }
                vkCreateImage
            },
            vk_destroy_image: {
                unsafe extern "system" fn vkDestroyImage(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyImage))
                }
                vkDestroyImage
            },
            vk_get_image_subresource_layout: {
                unsafe extern "system" fn vkGetImageSubresourceLayout(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_subresource: *const VkImageSubresource,
                    p_layout: *mut VkSubresourceLayout,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageSubresourceLayout))
                }
                vkGetImageSubresourceLayout
            },
            vk_create_image_view: {
                unsafe extern "system" fn vkCreateImageView(
                    device: NonDisposableHandle,
                    p_create_info: *const VkImageViewCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_view: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateImageView))
                }
                vkCreateImageView
            },
            vk_destroy_image_view: {
                unsafe extern "system" fn vkDestroyImageView(
                    device: NonDisposableHandle,
                    image_view: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyImageView))
                }
                vkDestroyImageView
            },
            vk_create_shader_module: {
                unsafe extern "system" fn vkCreateShaderModule(
                    device: NonDisposableHandle,
                    p_create_info: *const VkShaderModuleCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_shader_module: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateShaderModule))
                }
                vkCreateShaderModule
            },
            vk_destroy_shader_module: {
                unsafe extern "system" fn vkDestroyShaderModule(
                    device: NonDisposableHandle,
                    shader_module: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyShaderModule))
                }
                vkDestroyShaderModule
            },
            vk_create_pipeline_cache: {
                unsafe extern "system" fn vkCreatePipelineCache(
                    device: NonDisposableHandle,
                    p_create_info: *const VkPipelineCacheCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipeline_cache: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreatePipelineCache))
                }
                vkCreatePipelineCache
            },
            vk_destroy_pipeline_cache: {
                unsafe extern "system" fn vkDestroyPipelineCache(
                    device: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyPipelineCache))
                }
                vkDestroyPipelineCache
            },
            vk_get_pipeline_cache_data: {
                unsafe extern "system" fn vkGetPipelineCacheData(
                    device: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    p_data_size: *mut usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelineCacheData))
                }
                vkGetPipelineCacheData
            },
            vk_merge_pipeline_caches: {
                unsafe extern "system" fn vkMergePipelineCaches(
                    device: NonDisposableHandle,
                    dst_cache: NonDisposableHandle,
                    src_cache_count: u32,
                    p_src_caches: *const NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkMergePipelineCaches))
                }
                vkMergePipelineCaches
            },
            vk_create_graphics_pipelines: {
                unsafe extern "system" fn vkCreateGraphicsPipelines(
                    device: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    create_info_count: u32,
                    p_create_infos: *const VkGraphicsPipelineCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipelines: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateGraphicsPipelines))
                }
                vkCreateGraphicsPipelines
            },
            vk_create_compute_pipelines: {
                unsafe extern "system" fn vkCreateComputePipelines(
                    device: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    create_info_count: u32,
                    p_create_infos: *const VkComputePipelineCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipelines: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateComputePipelines))
                }
                vkCreateComputePipelines
            },
            vk_get_device_subpass_shading_max_workgroup_size_huawei: {
                unsafe extern "system" fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
                    device: NonDisposableHandle,
                    renderpass: NonDisposableHandle,
                    p_max_workgroup_size: *mut VkExtent2D,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI))
                }
                vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI
            },
            vk_destroy_pipeline: {
                unsafe extern "system" fn vkDestroyPipeline(
                    device: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyPipeline))
                }
                vkDestroyPipeline
            },
            vk_create_pipeline_layout: {
                unsafe extern "system" fn vkCreatePipelineLayout(
                    device: NonDisposableHandle,
                    p_create_info: *const VkPipelineLayoutCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipeline_layout: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreatePipelineLayout))
                }
                vkCreatePipelineLayout
            },
            vk_destroy_pipeline_layout: {
                unsafe extern "system" fn vkDestroyPipelineLayout(
                    device: NonDisposableHandle,
                    pipeline_layout: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyPipelineLayout))
                }
                vkDestroyPipelineLayout
            },
            vk_create_sampler: {
                unsafe extern "system" fn vkCreateSampler(
                    device: NonDisposableHandle,
                    p_create_info: *const VkSamplerCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_sampler: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateSampler))
                }
                vkCreateSampler
            },
            vk_destroy_sampler: {
                unsafe extern "system" fn vkDestroySampler(
                    device: NonDisposableHandle,
                    sampler: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroySampler))
                }
                vkDestroySampler
            },
            vk_create_descriptor_set_layout: {
                unsafe extern "system" fn vkCreateDescriptorSetLayout(
                    device: NonDisposableHandle,
                    p_create_info: *const VkDescriptorSetLayoutCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_set_layout: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDescriptorSetLayout))
                }
                vkCreateDescriptorSetLayout
            },
            vk_destroy_descriptor_set_layout: {
                unsafe extern "system" fn vkDestroyDescriptorSetLayout(
                    device: NonDisposableHandle,
                    descriptor_set_layout: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDescriptorSetLayout))
                }
                vkDestroyDescriptorSetLayout
            },
            vk_create_descriptor_pool: {
                unsafe extern "system" fn vkCreateDescriptorPool(
                    device: NonDisposableHandle,
                    p_create_info: *const VkDescriptorPoolCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_descriptor_pool: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDescriptorPool))
                }
                vkCreateDescriptorPool
            },
            vk_destroy_descriptor_pool: {
                unsafe extern "system" fn vkDestroyDescriptorPool(
                    device: NonDisposableHandle,
                    descriptor_pool: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDescriptorPool))
                }
                vkDestroyDescriptorPool
            },
            vk_reset_descriptor_pool: {
                unsafe extern "system" fn vkResetDescriptorPool(
                    device: NonDisposableHandle,
                    descriptor_pool: NonDisposableHandle,
                    flags: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkResetDescriptorPool))
                }
                vkResetDescriptorPool
            },
            vk_allocate_descriptor_sets: {
                unsafe extern "system" fn vkAllocateDescriptorSets(
                    device: NonDisposableHandle,
                    p_allocate_info: *const VkDescriptorSetAllocateInfo,
                    p_descriptor_sets: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAllocateDescriptorSets))
                }
                vkAllocateDescriptorSets
            },
            vk_free_descriptor_sets: {
                unsafe extern "system" fn vkFreeDescriptorSets(
                    device: NonDisposableHandle,
                    descriptor_pool: NonDisposableHandle,
                    descriptor_set_count: u32,
                    p_descriptor_sets: *const NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkFreeDescriptorSets))
                }
                vkFreeDescriptorSets
            },
            vk_update_descriptor_sets: {
                unsafe extern "system" fn vkUpdateDescriptorSets(
                    device: NonDisposableHandle,
                    descriptor_write_count: u32,
                    p_descriptor_writes: *const VkWriteDescriptorSet,
                    descriptor_copy_count: u32,
                    p_descriptor_copies: *const VkCopyDescriptorSet,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkUpdateDescriptorSets))
                }
                vkUpdateDescriptorSets
            },
            vk_create_framebuffer: {
                unsafe extern "system" fn vkCreateFramebuffer(
                    device: NonDisposableHandle,
                    p_create_info: *const VkFramebufferCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_framebuffer: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateFramebuffer))
                }
                vkCreateFramebuffer
            },
            vk_destroy_framebuffer: {
                unsafe extern "system" fn vkDestroyFramebuffer(
                    device: NonDisposableHandle,
                    framebuffer: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyFramebuffer))
                }
                vkDestroyFramebuffer
            },
            vk_create_render_pass: {
                unsafe extern "system" fn vkCreateRenderPass(
                    device: NonDisposableHandle,
                    p_create_info: *const VkRenderPassCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_render_pass: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateRenderPass))
                }
                vkCreateRenderPass
            },
            vk_destroy_render_pass: {
                unsafe extern "system" fn vkDestroyRenderPass(
                    device: NonDisposableHandle,
                    render_pass: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyRenderPass))
                }
                vkDestroyRenderPass
            },
            vk_get_render_area_granularity: {
                unsafe extern "system" fn vkGetRenderAreaGranularity(
                    device: NonDisposableHandle,
                    render_pass: NonDisposableHandle,
                    p_granularity: *mut VkExtent2D,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRenderAreaGranularity))
                }
                vkGetRenderAreaGranularity
            },
            vk_get_rendering_area_granularity_khr: {
                unsafe extern "system" fn vkGetRenderingAreaGranularityKHR(
                    device: NonDisposableHandle,
                    p_rendering_area_info: *const VkRenderingAreaInfoKHR,
                    p_granularity: *mut VkExtent2D,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRenderingAreaGranularityKHR))
                }
                vkGetRenderingAreaGranularityKHR
            },
            vk_create_command_pool: {
                unsafe extern "system" fn vkCreateCommandPool(
                    device: NonDisposableHandle,
                    p_create_info: *const VkCommandPoolCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_command_pool: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateCommandPool))
                }
                vkCreateCommandPool
            },
            vk_destroy_command_pool: {
                unsafe extern "system" fn vkDestroyCommandPool(
                    device: NonDisposableHandle,
                    command_pool: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyCommandPool))
                }
                vkDestroyCommandPool
            },
            vk_reset_command_pool: {
                unsafe extern "system" fn vkResetCommandPool(
                    device: NonDisposableHandle,
                    command_pool: NonDisposableHandle,
                    flags: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkResetCommandPool))
                }
                vkResetCommandPool
            },
            vk_allocate_command_buffers: {
                unsafe extern "system" fn vkAllocateCommandBuffers(
                    device: NonDisposableHandle,
                    p_allocate_info: *const VkCommandBufferAllocateInfo,
                    p_command_buffers: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAllocateCommandBuffers))
                }
                vkAllocateCommandBuffers
            },
            vk_free_command_buffers: {
                unsafe extern "system" fn vkFreeCommandBuffers(
                    device: NonDisposableHandle,
                    command_pool: NonDisposableHandle,
                    command_buffer_count: u32,
                    p_command_buffers: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkFreeCommandBuffers))
                }
                vkFreeCommandBuffers
            },
            vk_begin_command_buffer: {
                unsafe extern "system" fn vkBeginCommandBuffer(
                    command_buffer: NonDisposableHandle,
                    p_begin_info: *const VkCommandBufferBeginInfo,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBeginCommandBuffer))
                }
                vkBeginCommandBuffer
            },
            vk_end_command_buffer: {
                unsafe extern "system" fn vkEndCommandBuffer(
                    command_buffer: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEndCommandBuffer))
                }
                vkEndCommandBuffer
            },
            vk_reset_command_buffer: {
                unsafe extern "system" fn vkResetCommandBuffer(
                    command_buffer: NonDisposableHandle,
                    flags: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkResetCommandBuffer))
                }
                vkResetCommandBuffer
            },
            vk_cmd_bind_pipeline: {
                unsafe extern "system" fn vkCmdBindPipeline(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindPipeline))
                }
                vkCmdBindPipeline
            },
            vk_cmd_set_attachment_feedback_loop_enable_ext: {
                unsafe extern "system" fn vkCmdSetAttachmentFeedbackLoopEnableEXT(
                    command_buffer: NonDisposableHandle,
                    aspect_mask: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetAttachmentFeedbackLoopEnableEXT))
                }
                vkCmdSetAttachmentFeedbackLoopEnableEXT
            },
            vk_cmd_set_viewport: {
                unsafe extern "system" fn vkCmdSetViewport(
                    command_buffer: NonDisposableHandle,
                    first_viewport: u32,
                    viewport_count: u32,
                    p_viewports: *const VkViewport,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetViewport))
                }
                vkCmdSetViewport
            },
            vk_cmd_set_scissor: {
                unsafe extern "system" fn vkCmdSetScissor(
                    command_buffer: NonDisposableHandle,
                    first_scissor: u32,
                    scissor_count: u32,
                    p_scissors: *const VkRect2D,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetScissor))
                }
                vkCmdSetScissor
            },
            vk_cmd_set_line_width: {
                unsafe extern "system" fn vkCmdSetLineWidth(
                    command_buffer: NonDisposableHandle,
                    line_width: f32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetLineWidth))
                }
                vkCmdSetLineWidth
            },
            vk_cmd_set_depth_bias: {
                unsafe extern "system" fn vkCmdSetDepthBias(
                    command_buffer: NonDisposableHandle,
                    depth_bias_constant_factor: f32,
                    depth_bias_clamp: f32,
                    depth_bias_slope_factor: f32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthBias))
                }
                vkCmdSetDepthBias
            },
            vk_cmd_set_blend_constants: {
                unsafe extern "system" fn vkCmdSetBlendConstants(
                    command_buffer: NonDisposableHandle,
                    blend_constants: *const [f32; 4],
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetBlendConstants))
                }
                vkCmdSetBlendConstants
            },
            vk_cmd_set_depth_bounds: {
                unsafe extern "system" fn vkCmdSetDepthBounds(
                    command_buffer: NonDisposableHandle,
                    min_depth_bounds: f32,
                    max_depth_bounds: f32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthBounds))
                }
                vkCmdSetDepthBounds
            },
            vk_cmd_set_stencil_compare_mask: {
                unsafe extern "system" fn vkCmdSetStencilCompareMask(
                    command_buffer: NonDisposableHandle,
                    face_mask: NonDisposableHandle,
                    compare_mask: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetStencilCompareMask))
                }
                vkCmdSetStencilCompareMask
            },
            vk_cmd_set_stencil_write_mask: {
                unsafe extern "system" fn vkCmdSetStencilWriteMask(
                    command_buffer: NonDisposableHandle,
                    face_mask: NonDisposableHandle,
                    write_mask: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetStencilWriteMask))
                }
                vkCmdSetStencilWriteMask
            },
            vk_cmd_set_stencil_reference: {
                unsafe extern "system" fn vkCmdSetStencilReference(
                    command_buffer: NonDisposableHandle,
                    face_mask: NonDisposableHandle,
                    reference: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetStencilReference))
                }
                vkCmdSetStencilReference
            },
            vk_cmd_bind_descriptor_sets: {
                unsafe extern "system" fn vkCmdBindDescriptorSets(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    first_set: u32,
                    descriptor_set_count: u32,
                    p_descriptor_sets: *const NonDisposableHandle,
                    dynamic_offset_count: u32,
                    p_dynamic_offsets: *const u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindDescriptorSets))
                }
                vkCmdBindDescriptorSets
            },
            vk_cmd_bind_index_buffer: {
                unsafe extern "system" fn vkCmdBindIndexBuffer(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    index_type: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindIndexBuffer))
                }
                vkCmdBindIndexBuffer
            },
            vk_cmd_bind_vertex_buffers: {
                unsafe extern "system" fn vkCmdBindVertexBuffers(
                    command_buffer: NonDisposableHandle,
                    first_binding: u32,
                    binding_count: u32,
                    p_buffers: *const NonDisposableHandle,
                    p_offsets: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindVertexBuffers))
                }
                vkCmdBindVertexBuffers
            },
            vk_cmd_draw: {
                unsafe extern "system" fn vkCmdDraw(
                    command_buffer: NonDisposableHandle,
                    vertex_count: u32,
                    instance_count: u32,
                    first_vertex: u32,
                    first_instance: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDraw))
                }
                vkCmdDraw
            },
            vk_cmd_draw_indexed: {
                unsafe extern "system" fn vkCmdDrawIndexed(
                    command_buffer: NonDisposableHandle,
                    index_count: u32,
                    instance_count: u32,
                    first_index: u32,
                    vertex_offset: i32,
                    first_instance: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawIndexed))
                }
                vkCmdDrawIndexed
            },
            vk_cmd_draw_multi_ext: {
                unsafe extern "system" fn vkCmdDrawMultiEXT(
                    command_buffer: NonDisposableHandle,
                    draw_count: u32,
                    p_vertex_info: *const VkMultiDrawInfoEXT,
                    instance_count: u32,
                    first_instance: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMultiEXT))
                }
                vkCmdDrawMultiEXT
            },
            vk_cmd_draw_multi_indexed_ext: {
                unsafe extern "system" fn vkCmdDrawMultiIndexedEXT(
                    command_buffer: NonDisposableHandle,
                    draw_count: u32,
                    p_index_info: *const VkMultiDrawIndexedInfoEXT,
                    instance_count: u32,
                    first_instance: u32,
                    stride: u32,
                    p_vertex_offset: *const i32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMultiIndexedEXT))
                }
                vkCmdDrawMultiIndexedEXT
            },
            vk_cmd_draw_indirect: {
                unsafe extern "system" fn vkCmdDrawIndirect(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawIndirect))
                }
                vkCmdDrawIndirect
            },
            vk_cmd_draw_indexed_indirect: {
                unsafe extern "system" fn vkCmdDrawIndexedIndirect(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawIndexedIndirect))
                }
                vkCmdDrawIndexedIndirect
            },
            vk_cmd_dispatch: {
                unsafe extern "system" fn vkCmdDispatch(
                    command_buffer: NonDisposableHandle,
                    group_count_x: u32,
                    group_count_y: u32,
                    group_count_z: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDispatch))
                }
                vkCmdDispatch
            },
            vk_cmd_dispatch_indirect: {
                unsafe extern "system" fn vkCmdDispatchIndirect(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDispatchIndirect))
                }
                vkCmdDispatchIndirect
            },
            vk_cmd_subpass_shading_huawei: {
                unsafe extern "system" fn vkCmdSubpassShadingHUAWEI(
                    command_buffer: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSubpassShadingHUAWEI))
                }
                vkCmdSubpassShadingHUAWEI
            },
            vk_cmd_draw_cluster_huawei: {
                unsafe extern "system" fn vkCmdDrawClusterHUAWEI(
                    command_buffer: NonDisposableHandle,
                    group_count_x: u32,
                    group_count_y: u32,
                    group_count_z: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawClusterHUAWEI))
                }
                vkCmdDrawClusterHUAWEI
            },
            vk_cmd_draw_cluster_indirect_huawei: {
                unsafe extern "system" fn vkCmdDrawClusterIndirectHUAWEI(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawClusterIndirectHUAWEI))
                }
                vkCmdDrawClusterIndirectHUAWEI
            },
            vk_cmd_update_pipeline_indirect_buffer_nv: {
                unsafe extern "system" fn vkCmdUpdatePipelineIndirectBufferNV(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdUpdatePipelineIndirectBufferNV))
                }
                vkCmdUpdatePipelineIndirectBufferNV
            },
            vk_cmd_copy_buffer: {
                unsafe extern "system" fn vkCmdCopyBuffer(
                    command_buffer: NonDisposableHandle,
                    src_buffer: NonDisposableHandle,
                    dst_buffer: NonDisposableHandle,
                    region_count: u32,
                    p_regions: *const VkBufferCopy,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyBuffer))
                }
                vkCmdCopyBuffer
            },
            vk_cmd_copy_image: {
                unsafe extern "system" fn vkCmdCopyImage(
                    command_buffer: NonDisposableHandle,
                    src_image: NonDisposableHandle,
                    src_image_layout: NonDisposableHandle,
                    dst_image: NonDisposableHandle,
                    dst_image_layout: NonDisposableHandle,
                    region_count: u32,
                    p_regions: *const VkImageCopy,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyImage))
                }
                vkCmdCopyImage
            },
            vk_cmd_blit_image: {
                unsafe extern "system" fn vkCmdBlitImage(
                    command_buffer: NonDisposableHandle,
                    src_image: NonDisposableHandle,
                    src_image_layout: NonDisposableHandle,
                    dst_image: NonDisposableHandle,
                    dst_image_layout: NonDisposableHandle,
                    region_count: u32,
                    p_regions: *const VkImageBlit,
                    filter: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBlitImage))
                }
                vkCmdBlitImage
            },
            vk_cmd_copy_buffer_to_image: {
                unsafe extern "system" fn vkCmdCopyBufferToImage(
                    command_buffer: NonDisposableHandle,
                    src_buffer: NonDisposableHandle,
                    dst_image: NonDisposableHandle,
                    dst_image_layout: NonDisposableHandle,
                    region_count: u32,
                    p_regions: *const VkBufferImageCopy,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyBufferToImage))
                }
                vkCmdCopyBufferToImage
            },
            vk_cmd_copy_image_to_buffer: {
                unsafe extern "system" fn vkCmdCopyImageToBuffer(
                    command_buffer: NonDisposableHandle,
                    src_image: NonDisposableHandle,
                    src_image_layout: NonDisposableHandle,
                    dst_buffer: NonDisposableHandle,
                    region_count: u32,
                    p_regions: *const VkBufferImageCopy,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyImageToBuffer))
                }
                vkCmdCopyImageToBuffer
            },
            vk_cmd_copy_memory_indirect_nv: {
                unsafe extern "system" fn vkCmdCopyMemoryIndirectNV(
                    command_buffer: NonDisposableHandle,
                    copy_buffer_address: NonDisposableHandle,
                    copy_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyMemoryIndirectNV))
                }
                vkCmdCopyMemoryIndirectNV
            },
            vk_cmd_copy_memory_to_image_indirect_nv: {
                unsafe extern "system" fn vkCmdCopyMemoryToImageIndirectNV(
                    command_buffer: NonDisposableHandle,
                    copy_buffer_address: NonDisposableHandle,
                    copy_count: u32,
                    stride: u32,
                    dst_image: NonDisposableHandle,
                    dst_image_layout: NonDisposableHandle,
                    p_image_subresources: *const VkImageSubresourceLayers,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyMemoryToImageIndirectNV))
                }
                vkCmdCopyMemoryToImageIndirectNV
            },
            vk_cmd_update_buffer: {
                unsafe extern "system" fn vkCmdUpdateBuffer(
                    command_buffer: NonDisposableHandle,
                    dst_buffer: NonDisposableHandle,
                    dst_offset: NonDisposableHandle,
                    data_size: NonDisposableHandle,
                    p_data: *const c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdUpdateBuffer))
                }
                vkCmdUpdateBuffer
            },
            vk_cmd_fill_buffer: {
                unsafe extern "system" fn vkCmdFillBuffer(
                    command_buffer: NonDisposableHandle,
                    dst_buffer: NonDisposableHandle,
                    dst_offset: NonDisposableHandle,
                    size: NonDisposableHandle,
                    data: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdFillBuffer))
                }
                vkCmdFillBuffer
            },
            vk_cmd_clear_color_image: {
                unsafe extern "system" fn vkCmdClearColorImage(
                    command_buffer: NonDisposableHandle,
                    image: NonDisposableHandle,
                    image_layout: NonDisposableHandle,
                    p_color: *const VkClearColorValue,
                    range_count: u32,
                    p_ranges: *const VkImageSubresourceRange,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdClearColorImage))
                }
                vkCmdClearColorImage
            },
            vk_cmd_clear_depth_stencil_image: {
                unsafe extern "system" fn vkCmdClearDepthStencilImage(
                    command_buffer: NonDisposableHandle,
                    image: NonDisposableHandle,
                    image_layout: NonDisposableHandle,
                    p_depth_stencil: *const VkClearDepthStencilValue,
                    range_count: u32,
                    p_ranges: *const VkImageSubresourceRange,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdClearDepthStencilImage))
                }
                vkCmdClearDepthStencilImage
            },
            vk_cmd_clear_attachments: {
                unsafe extern "system" fn vkCmdClearAttachments(
                    command_buffer: NonDisposableHandle,
                    attachment_count: u32,
                    p_attachments: *const VkClearAttachment,
                    rect_count: u32,
                    p_rects: *const VkClearRect,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdClearAttachments))
                }
                vkCmdClearAttachments
            },
            vk_cmd_resolve_image: {
                unsafe extern "system" fn vkCmdResolveImage(
                    command_buffer: NonDisposableHandle,
                    src_image: NonDisposableHandle,
                    src_image_layout: NonDisposableHandle,
                    dst_image: NonDisposableHandle,
                    dst_image_layout: NonDisposableHandle,
                    region_count: u32,
                    p_regions: *const VkImageResolve,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdResolveImage))
                }
                vkCmdResolveImage
            },
            vk_cmd_set_event: {
                unsafe extern "system" fn vkCmdSetEvent(
                    command_buffer: NonDisposableHandle,
                    event: NonDisposableHandle,
                    stage_mask: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetEvent))
                }
                vkCmdSetEvent
            },
            vk_cmd_reset_event: {
                unsafe extern "system" fn vkCmdResetEvent(
                    command_buffer: NonDisposableHandle,
                    event: NonDisposableHandle,
                    stage_mask: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdResetEvent))
                }
                vkCmdResetEvent
            },
            vk_cmd_wait_events: {
                unsafe extern "system" fn vkCmdWaitEvents(
                    command_buffer: NonDisposableHandle,
                    event_count: u32,
                    p_events: *const NonDisposableHandle,
                    src_stage_mask: NonDisposableHandle,
                    dst_stage_mask: NonDisposableHandle,
                    memory_barrier_count: u32,
                    p_memory_barriers: *const VkMemoryBarrier,
                    buffer_memory_barrier_count: u32,
                    p_buffer_memory_barriers: *const VkBufferMemoryBarrier,
                    image_memory_barrier_count: u32,
                    p_image_memory_barriers: *const VkImageMemoryBarrier,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWaitEvents))
                }
                vkCmdWaitEvents
            },
            vk_cmd_pipeline_barrier: {
                unsafe extern "system" fn vkCmdPipelineBarrier(
                    command_buffer: NonDisposableHandle,
                    src_stage_mask: NonDisposableHandle,
                    dst_stage_mask: NonDisposableHandle,
                    dependency_flags: NonDisposableHandle,
                    memory_barrier_count: u32,
                    p_memory_barriers: *const VkMemoryBarrier,
                    buffer_memory_barrier_count: u32,
                    p_buffer_memory_barriers: *const VkBufferMemoryBarrier,
                    image_memory_barrier_count: u32,
                    p_image_memory_barriers: *const VkImageMemoryBarrier,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPipelineBarrier))
                }
                vkCmdPipelineBarrier
            },
            vk_cmd_begin_query: {
                unsafe extern "system" fn vkCmdBeginQuery(
                    command_buffer: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    query: u32,
                    flags: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginQuery))
                }
                vkCmdBeginQuery
            },
            vk_cmd_end_query: {
                unsafe extern "system" fn vkCmdEndQuery(
                    command_buffer: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    query: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndQuery))
                }
                vkCmdEndQuery
            },
            vk_cmd_begin_conditional_rendering_ext: {
                unsafe extern "system" fn vkCmdBeginConditionalRenderingEXT(
                    command_buffer: NonDisposableHandle,
                    p_conditional_rendering_begin: *const VkConditionalRenderingBeginInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginConditionalRenderingEXT))
                }
                vkCmdBeginConditionalRenderingEXT
            },
            vk_cmd_end_conditional_rendering_ext: {
                unsafe extern "system" fn vkCmdEndConditionalRenderingEXT(
                    command_buffer: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndConditionalRenderingEXT))
                }
                vkCmdEndConditionalRenderingEXT
            },
            vk_cmd_reset_query_pool: {
                unsafe extern "system" fn vkCmdResetQueryPool(
                    command_buffer: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                    query_count: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdResetQueryPool))
                }
                vkCmdResetQueryPool
            },
            vk_cmd_write_timestamp: {
                unsafe extern "system" fn vkCmdWriteTimestamp(
                    command_buffer: NonDisposableHandle,
                    pipeline_stage: vk::PipelineStageFlags,
                    query_pool: NonDisposableHandle,
                    query: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteTimestamp))
                }
                vkCmdWriteTimestamp
            },
            vk_cmd_copy_query_pool_results: {
                unsafe extern "system" fn vkCmdCopyQueryPoolResults(
                    command_buffer: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                    query_count: u32,
                    dst_buffer: NonDisposableHandle,
                    dst_offset: NonDisposableHandle,
                    stride: NonDisposableHandle,
                    flags: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyQueryPoolResults))
                }
                vkCmdCopyQueryPoolResults
            },
            vk_cmd_push_constants: {
                unsafe extern "system" fn vkCmdPushConstants(
                    command_buffer: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    stage_flags: NonDisposableHandle,
                    offset: u32,
                    size: u32,
                    p_values: *const c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPushConstants))
                }
                vkCmdPushConstants
            },
            vk_cmd_begin_render_pass: {
                unsafe extern "system" fn vkCmdBeginRenderPass(
                    command_buffer: NonDisposableHandle,
                    p_render_pass_begin: *const VkRenderPassBeginInfo,
                    contents: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginRenderPass))
                }
                vkCmdBeginRenderPass
            },
            vk_cmd_next_subpass: {
                unsafe extern "system" fn vkCmdNextSubpass(
                    command_buffer: NonDisposableHandle,
                    contents: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdNextSubpass))
                }
                vkCmdNextSubpass
            },
            vk_cmd_end_render_pass: {
                unsafe extern "system" fn vkCmdEndRenderPass(
                    command_buffer: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndRenderPass))
                }
                vkCmdEndRenderPass
            },
            vk_cmd_execute_commands: {
                unsafe extern "system" fn vkCmdExecuteCommands(
                    command_buffer: NonDisposableHandle,
                    command_buffer_count: u32,
                    p_command_buffers: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdExecuteCommands))
                }
                vkCmdExecuteCommands
            },
            vk_create_android_surface_khr: {
                unsafe extern "system" fn vkCreateAndroidSurfaceKHR(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkAndroidSurfaceCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateAndroidSurfaceKHR))
                }
                vkCreateAndroidSurfaceKHR
            },
            vk_get_physical_device_display_properties_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceDisplayPropertiesKHR(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkDisplayPropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceDisplayPropertiesKHR))
                }
                vkGetPhysicalDeviceDisplayPropertiesKHR
            },
            vk_get_physical_device_display_plane_properties_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkDisplayPlanePropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceDisplayPlanePropertiesKHR))
                }
                vkGetPhysicalDeviceDisplayPlanePropertiesKHR
            },
            vk_get_display_plane_supported_displays_khr: {
                unsafe extern "system" fn vkGetDisplayPlaneSupportedDisplaysKHR(
                    physical_device: NonDisposableHandle,
                    plane_index: u32,
                    p_display_count: *mut u32,
                    p_displays: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDisplayPlaneSupportedDisplaysKHR))
                }
                vkGetDisplayPlaneSupportedDisplaysKHR
            },
            vk_get_display_mode_properties_khr: {
                unsafe extern "system" fn vkGetDisplayModePropertiesKHR(
                    physical_device: NonDisposableHandle,
                    display: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkDisplayModePropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDisplayModePropertiesKHR))
                }
                vkGetDisplayModePropertiesKHR
            },
            vk_create_display_mode_khr: {
                unsafe extern "system" fn vkCreateDisplayModeKHR(
                    physical_device: NonDisposableHandle,
                    display: NonDisposableHandle,
                    p_create_info: *const VkDisplayModeCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_mode: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDisplayModeKHR))
                }
                vkCreateDisplayModeKHR
            },
            vk_get_display_plane_capabilities_khr: {
                unsafe extern "system" fn vkGetDisplayPlaneCapabilitiesKHR(
                    physical_device: NonDisposableHandle,
                    mode: NonDisposableHandle,
                    plane_index: u32,
                    p_capabilities: *mut VkDisplayPlaneCapabilitiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDisplayPlaneCapabilitiesKHR))
                }
                vkGetDisplayPlaneCapabilitiesKHR
            },
            vk_create_display_plane_surface_khr: {
                unsafe extern "system" fn vkCreateDisplayPlaneSurfaceKHR(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkDisplaySurfaceCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDisplayPlaneSurfaceKHR))
                }
                vkCreateDisplayPlaneSurfaceKHR
            },
            vk_create_shared_swapchains_khr: {
                unsafe extern "system" fn vkCreateSharedSwapchainsKHR(
                    device: NonDisposableHandle,
                    swapchain_count: u32,
                    p_create_infos: *const VkSwapchainCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_swapchains: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateSharedSwapchainsKHR))
                }
                vkCreateSharedSwapchainsKHR
            },
            vk_destroy_surface_khr: {
                unsafe extern "system" fn vkDestroySurfaceKHR(
                    instance: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroySurfaceKHR))
                }
                vkDestroySurfaceKHR
            },
            vk_get_physical_device_surface_support_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfaceSupportKHR(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    surface: NonDisposableHandle,
                    p_supported: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfaceSupportKHR))
                }
                vkGetPhysicalDeviceSurfaceSupportKHR
            },
            vk_get_physical_device_surface_capabilities_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
                    physical_device: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_surface_capabilities: *mut VkSurfaceCapabilitiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfaceCapabilitiesKHR))
                }
                vkGetPhysicalDeviceSurfaceCapabilitiesKHR
            },
            vk_get_physical_device_surface_formats_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfaceFormatsKHR(
                    physical_device: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_surface_format_count: *mut u32,
                    p_surface_formats: *mut VkSurfaceFormatKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfaceFormatsKHR))
                }
                vkGetPhysicalDeviceSurfaceFormatsKHR
            },
            vk_get_physical_device_surface_present_modes_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfacePresentModesKHR(
                    physical_device: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_present_mode_count: *mut u32,
                    p_present_modes: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfacePresentModesKHR))
                }
                vkGetPhysicalDeviceSurfacePresentModesKHR
            },
            vk_create_swapchain_khr: {
                unsafe extern "system" fn vkCreateSwapchainKHR(
                    device: NonDisposableHandle,
                    p_create_info: *const VkSwapchainCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_swapchain: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateSwapchainKHR))
                }
                vkCreateSwapchainKHR
            },
            vk_destroy_swapchain_khr: {
                unsafe extern "system" fn vkDestroySwapchainKHR(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroySwapchainKHR))
                }
                vkDestroySwapchainKHR
            },
            vk_get_swapchain_images_khr: {
                unsafe extern "system" fn vkGetSwapchainImagesKHR(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_swapchain_image_count: *mut u32,
                    p_swapchain_images: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSwapchainImagesKHR))
                }
                vkGetSwapchainImagesKHR
            },
            vk_acquire_next_image_khr: {
                unsafe extern "system" fn vkAcquireNextImageKHR(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    timeout: u64,
                    semaphore: NonDisposableHandle,
                    fence: NonDisposableHandle,
                    p_image_index: *mut u32,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireNextImageKHR))
                }
                vkAcquireNextImageKHR
            },
            vk_queue_present_khr: {
                unsafe extern "system" fn vkQueuePresentKHR(
                    queue: NonDisposableHandle,
                    p_present_info: *const VkPresentInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueuePresentKHR))
                }
                vkQueuePresentKHR
            },
            vk_create_vi_surface_nn: {
                unsafe extern "system" fn vkCreateViSurfaceNN(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkViSurfaceCreateInfoNN,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateViSurfaceNN))
                }
                vkCreateViSurfaceNN
            },
            vk_create_wayland_surface_khr: {
                unsafe extern "system" fn vkCreateWaylandSurfaceKHR(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkWaylandSurfaceCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateWaylandSurfaceKHR))
                }
                vkCreateWaylandSurfaceKHR
            },
            vk_get_physical_device_wayland_presentation_support_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceWaylandPresentationSupportKHR(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    display: *mut usize,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceWaylandPresentationSupportKHR))
                }
                vkGetPhysicalDeviceWaylandPresentationSupportKHR
            },
            vk_create_win32_surface_khr: {
                unsafe extern "system" fn vkCreateWin32SurfaceKHR(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkWin32SurfaceCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateWin32SurfaceKHR))
                }
                vkCreateWin32SurfaceKHR
            },
            vk_get_physical_device_win32_presentation_support_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceWin32PresentationSupportKHR(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceWin32PresentationSupportKHR))
                }
                vkGetPhysicalDeviceWin32PresentationSupportKHR
            },
            vk_create_xlib_surface_khr: {
                unsafe extern "system" fn vkCreateXlibSurfaceKHR(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkXlibSurfaceCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateXlibSurfaceKHR))
                }
                vkCreateXlibSurfaceKHR
            },
            vk_get_physical_device_xlib_presentation_support_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceXlibPresentationSupportKHR(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    dpy: *mut usize,
                    visual_id: vk::VisualID,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceXlibPresentationSupportKHR))
                }
                vkGetPhysicalDeviceXlibPresentationSupportKHR
            },
            vk_create_xcb_surface_khr: {
                unsafe extern "system" fn vkCreateXcbSurfaceKHR(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkXcbSurfaceCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateXcbSurfaceKHR))
                }
                vkCreateXcbSurfaceKHR
            },
            vk_get_physical_device_xcb_presentation_support_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceXcbPresentationSupportKHR(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    connection: *mut usize,
                    visual_id: vk::xcb_visualid_t,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceXcbPresentationSupportKHR))
                }
                vkGetPhysicalDeviceXcbPresentationSupportKHR
            },
            vk_create_direct_fbsurface_ext: {
                unsafe extern "system" fn vkCreateDirectFBSurfaceEXT(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkDirectFBSurfaceCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDirectFBSurfaceEXT))
                }
                vkCreateDirectFBSurfaceEXT
            },
            vk_get_physical_device_direct_fbpresentation_support_ext: {
                unsafe extern "system" fn vkGetPhysicalDeviceDirectFBPresentationSupportEXT(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    dfb: *mut usize,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceDirectFBPresentationSupportEXT))
                }
                vkGetPhysicalDeviceDirectFBPresentationSupportEXT
            },
            vk_create_image_pipe_surface_fuchsia: {
                unsafe extern "system" fn vkCreateImagePipeSurfaceFUCHSIA(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkImagePipeSurfaceCreateInfoFUCHSIA,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateImagePipeSurfaceFUCHSIA))
                }
                vkCreateImagePipeSurfaceFUCHSIA
            },
            vk_create_stream_descriptor_surface_ggp: {
                unsafe extern "system" fn vkCreateStreamDescriptorSurfaceGGP(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkStreamDescriptorSurfaceCreateInfoGGP,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateStreamDescriptorSurfaceGGP))
                }
                vkCreateStreamDescriptorSurfaceGGP
            },
            vk_create_screen_surface_qnx: {
                unsafe extern "system" fn vkCreateScreenSurfaceQNX(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkScreenSurfaceCreateInfoQNX,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateScreenSurfaceQNX))
                }
                vkCreateScreenSurfaceQNX
            },
            vk_get_physical_device_screen_presentation_support_qnx: {
                unsafe extern "system" fn vkGetPhysicalDeviceScreenPresentationSupportQNX(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    window: *mut usize,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceScreenPresentationSupportQNX))
                }
                vkGetPhysicalDeviceScreenPresentationSupportQNX
            },
            vk_create_debug_report_callback_ext: {
                unsafe extern "system" fn vkCreateDebugReportCallbackEXT(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkDebugReportCallbackCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_callback: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDebugReportCallbackEXT))
                }
                vkCreateDebugReportCallbackEXT
            },
            vk_destroy_debug_report_callback_ext: {
                unsafe extern "system" fn vkDestroyDebugReportCallbackEXT(
                    instance: NonDisposableHandle,
                    callback: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDebugReportCallbackEXT))
                }
                vkDestroyDebugReportCallbackEXT
            },
            vk_debug_report_message_ext: {
                unsafe extern "system" fn vkDebugReportMessageEXT(
                    instance: NonDisposableHandle,
                    flags: NonDisposableHandle,
                    object_type: NonDisposableHandle,
                    object: u64,
                    location: usize,
                    message_code: i32,
                    p_layer_prefix: *const c_char,
                    p_message: *const c_char,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDebugReportMessageEXT))
                }
                vkDebugReportMessageEXT
            },
            vk_debug_marker_set_object_name_ext: {
                unsafe extern "system" fn vkDebugMarkerSetObjectNameEXT(
                    device: NonDisposableHandle,
                    p_name_info: *const VkDebugMarkerObjectNameInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDebugMarkerSetObjectNameEXT))
                }
                vkDebugMarkerSetObjectNameEXT
            },
            vk_debug_marker_set_object_tag_ext: {
                unsafe extern "system" fn vkDebugMarkerSetObjectTagEXT(
                    device: NonDisposableHandle,
                    p_tag_info: *const VkDebugMarkerObjectTagInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDebugMarkerSetObjectTagEXT))
                }
                vkDebugMarkerSetObjectTagEXT
            },
            vk_cmd_debug_marker_begin_ext: {
                unsafe extern "system" fn vkCmdDebugMarkerBeginEXT(
                    command_buffer: NonDisposableHandle,
                    p_marker_info: *const VkDebugMarkerMarkerInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDebugMarkerBeginEXT))
                }
                vkCmdDebugMarkerBeginEXT
            },
            vk_cmd_debug_marker_end_ext: {
                unsafe extern "system" fn vkCmdDebugMarkerEndEXT(
                    command_buffer: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDebugMarkerEndEXT))
                }
                vkCmdDebugMarkerEndEXT
            },
            vk_cmd_debug_marker_insert_ext: {
                unsafe extern "system" fn vkCmdDebugMarkerInsertEXT(
                    command_buffer: NonDisposableHandle,
                    p_marker_info: *const VkDebugMarkerMarkerInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDebugMarkerInsertEXT))
                }
                vkCmdDebugMarkerInsertEXT
            },
            vk_get_physical_device_external_image_format_properties_nv: {
                unsafe extern "system" fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
                    physical_device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    type_: NonDisposableHandle,
                    tiling: NonDisposableHandle,
                    usage: NonDisposableHandle,
                    flags: NonDisposableHandle,
                    external_handle_type: NonDisposableHandle,
                    p_external_image_format_properties: *mut VkExternalImageFormatPropertiesNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceExternalImageFormatPropertiesNV))
                }
                vkGetPhysicalDeviceExternalImageFormatPropertiesNV
            },
            vk_get_memory_win32_handle_nv: {
                unsafe extern "system" fn vkGetMemoryWin32HandleNV(
                    device: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    handle_type: NonDisposableHandle,
                    p_handle: *mut vk::HANDLE,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryWin32HandleNV))
                }
                vkGetMemoryWin32HandleNV
            },
            vk_cmd_execute_generated_commands_nv: {
                unsafe extern "system" fn vkCmdExecuteGeneratedCommandsNV(
                    command_buffer: NonDisposableHandle,
                    is_preprocessed: NonDisposableHandle,
                    p_generated_commands_info: *const VkGeneratedCommandsInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdExecuteGeneratedCommandsNV))
                }
                vkCmdExecuteGeneratedCommandsNV
            },
            vk_cmd_preprocess_generated_commands_nv: {
                unsafe extern "system" fn vkCmdPreprocessGeneratedCommandsNV(
                    command_buffer: NonDisposableHandle,
                    p_generated_commands_info: *const VkGeneratedCommandsInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPreprocessGeneratedCommandsNV))
                }
                vkCmdPreprocessGeneratedCommandsNV
            },
            vk_cmd_bind_pipeline_shader_group_nv: {
                unsafe extern "system" fn vkCmdBindPipelineShaderGroupNV(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    group_index: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindPipelineShaderGroupNV))
                }
                vkCmdBindPipelineShaderGroupNV
            },
            vk_get_generated_commands_memory_requirements_nv: {
                unsafe extern "system" fn vkGetGeneratedCommandsMemoryRequirementsNV(
                    device: NonDisposableHandle,
                    p_info: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
                    p_memory_requirements: *mut VkMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetGeneratedCommandsMemoryRequirementsNV))
                }
                vkGetGeneratedCommandsMemoryRequirementsNV
            },
            vk_create_indirect_commands_layout_nv: {
                unsafe extern "system" fn vkCreateIndirectCommandsLayoutNV(
                    device: NonDisposableHandle,
                    p_create_info: *const VkIndirectCommandsLayoutCreateInfoNV,
                    p_allocator: *const VkAllocationCallbacks,
                    p_indirect_commands_layout: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateIndirectCommandsLayoutNV))
                }
                vkCreateIndirectCommandsLayoutNV
            },
            vk_destroy_indirect_commands_layout_nv: {
                unsafe extern "system" fn vkDestroyIndirectCommandsLayoutNV(
                    device: NonDisposableHandle,
                    indirect_commands_layout: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyIndirectCommandsLayoutNV))
                }
                vkDestroyIndirectCommandsLayoutNV
            },
            vk_get_physical_device_features2: {
                unsafe extern "system" fn vkGetPhysicalDeviceFeatures2(
                    physical_device: NonDisposableHandle,
                    p_features: *mut VkPhysicalDeviceFeatures2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceFeatures2))
                }
                vkGetPhysicalDeviceFeatures2
            },
            vk_get_physical_device_properties2: {
                unsafe extern "system" fn vkGetPhysicalDeviceProperties2(
                    physical_device: NonDisposableHandle,
                    p_properties: *mut VkPhysicalDeviceProperties2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceProperties2))
                }
                vkGetPhysicalDeviceProperties2
            },
            vk_get_physical_device_format_properties2: {
                unsafe extern "system" fn vkGetPhysicalDeviceFormatProperties2(
                    physical_device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    p_format_properties: *mut VkFormatProperties2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceFormatProperties2))
                }
                vkGetPhysicalDeviceFormatProperties2
            },
            vk_get_physical_device_image_format_properties2: {
                unsafe extern "system" fn vkGetPhysicalDeviceImageFormatProperties2(
                    physical_device: NonDisposableHandle,
                    p_image_format_info: *const VkPhysicalDeviceImageFormatInfo2,
                    p_image_format_properties: *mut VkImageFormatProperties2,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceImageFormatProperties2))
                }
                vkGetPhysicalDeviceImageFormatProperties2
            },
            vk_get_physical_device_queue_family_properties2: {
                unsafe extern "system" fn vkGetPhysicalDeviceQueueFamilyProperties2(
                    physical_device: NonDisposableHandle,
                    p_queue_family_property_count: *mut u32,
                    p_queue_family_properties: *mut VkQueueFamilyProperties2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceQueueFamilyProperties2))
                }
                vkGetPhysicalDeviceQueueFamilyProperties2
            },
            vk_get_physical_device_memory_properties2: {
                unsafe extern "system" fn vkGetPhysicalDeviceMemoryProperties2(
                    physical_device: NonDisposableHandle,
                    p_memory_properties: *mut VkPhysicalDeviceMemoryProperties2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceMemoryProperties2))
                }
                vkGetPhysicalDeviceMemoryProperties2
            },
            vk_get_physical_device_sparse_image_format_properties2: {
                unsafe extern "system" fn vkGetPhysicalDeviceSparseImageFormatProperties2(
                    physical_device: NonDisposableHandle,
                    p_format_info: *const VkPhysicalDeviceSparseImageFormatInfo2,
                    p_property_count: *mut u32,
                    p_properties: *mut VkSparseImageFormatProperties2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSparseImageFormatProperties2))
                }
                vkGetPhysicalDeviceSparseImageFormatProperties2
            },
            vk_cmd_push_descriptor_set_khr: {
                unsafe extern "system" fn vkCmdPushDescriptorSetKHR(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    set: u32,
                    descriptor_write_count: u32,
                    p_descriptor_writes: *const VkWriteDescriptorSet,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPushDescriptorSetKHR))
                }
                vkCmdPushDescriptorSetKHR
            },
            vk_trim_command_pool: {
                unsafe extern "system" fn vkTrimCommandPool(
                    device: NonDisposableHandle,
                    command_pool: NonDisposableHandle,
                    flags: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkTrimCommandPool))
                }
                vkTrimCommandPool
            },
            vk_get_physical_device_external_buffer_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceExternalBufferProperties(
                    physical_device: NonDisposableHandle,
                    p_external_buffer_info: *const VkPhysicalDeviceExternalBufferInfo,
                    p_external_buffer_properties: *mut VkExternalBufferProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceExternalBufferProperties))
                }
                vkGetPhysicalDeviceExternalBufferProperties
            },
            vk_get_memory_win32_handle_khr: {
                unsafe extern "system" fn vkGetMemoryWin32HandleKHR(
                    device: NonDisposableHandle,
                    p_get_win32_handle_info: *const VkMemoryGetWin32HandleInfoKHR,
                    p_handle: *mut vk::HANDLE,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryWin32HandleKHR))
                }
                vkGetMemoryWin32HandleKHR
            },
            vk_get_memory_win32_handle_properties_khr: {
                unsafe extern "system" fn vkGetMemoryWin32HandlePropertiesKHR(
                    device: NonDisposableHandle,
                    handle_type: vk::ExternalMemoryHandleTypeFlags,
                    handle: vk::HANDLE,
                    p_memory_win32_handle_properties: *mut VkMemoryWin32HandlePropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryWin32HandlePropertiesKHR))
                }
                vkGetMemoryWin32HandlePropertiesKHR
            },
            vk_get_memory_fd_khr: {
                unsafe extern "system" fn vkGetMemoryFdKHR(
                    device: NonDisposableHandle,
                    p_get_fd_info: *const VkMemoryGetFdInfoKHR,
                    p_fd: *mut std::os::raw::c_int,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryFdKHR))
                }
                vkGetMemoryFdKHR
            },
            vk_get_memory_fd_properties_khr: {
                unsafe extern "system" fn vkGetMemoryFdPropertiesKHR(
                    device: NonDisposableHandle,
                    handle_type: vk::ExternalMemoryHandleTypeFlags,
                    fd: std::os::raw::c_int,
                    p_memory_fd_properties: *mut VkMemoryFdPropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryFdPropertiesKHR))
                }
                vkGetMemoryFdPropertiesKHR
            },
            vk_get_memory_zircon_handle_fuchsia: {
                unsafe extern "system" fn vkGetMemoryZirconHandleFUCHSIA(
                    device: NonDisposableHandle,
                    p_get_zircon_handle_info: *const VkMemoryGetZirconHandleInfoFUCHSIA,
                    p_zircon_handle: *mut vk::zx_handle_t,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryZirconHandleFUCHSIA))
                }
                vkGetMemoryZirconHandleFUCHSIA
            },
            vk_get_memory_zircon_handle_properties_fuchsia: {
                unsafe extern "system" fn vkGetMemoryZirconHandlePropertiesFUCHSIA(
                    device: NonDisposableHandle,
                    handle_type: vk::ExternalMemoryHandleTypeFlags,
                    zircon_handle: vk::zx_handle_t,
                    p_memory_zircon_handle_properties: *mut VkMemoryZirconHandlePropertiesFUCHSIA,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryZirconHandlePropertiesFUCHSIA))
                }
                vkGetMemoryZirconHandlePropertiesFUCHSIA
            },
            vk_get_memory_remote_address_nv: {
                unsafe extern "system" fn vkGetMemoryRemoteAddressNV(
                    device: NonDisposableHandle,
                    p_memory_get_remote_address_info: *const VkMemoryGetRemoteAddressInfoNV,
                    p_address: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryRemoteAddressNV))
                }
                vkGetMemoryRemoteAddressNV
            },
            vk_get_physical_device_external_semaphore_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceExternalSemaphoreProperties(
                    physical_device: NonDisposableHandle,
                    p_external_semaphore_info: *const VkPhysicalDeviceExternalSemaphoreInfo,
                    p_external_semaphore_properties: *mut VkExternalSemaphoreProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceExternalSemaphoreProperties))
                }
                vkGetPhysicalDeviceExternalSemaphoreProperties
            },
            vk_get_semaphore_win32_handle_khr: {
                unsafe extern "system" fn vkGetSemaphoreWin32HandleKHR(
                    device: NonDisposableHandle,
                    p_get_win32_handle_info: *const VkSemaphoreGetWin32HandleInfoKHR,
                    p_handle: *mut vk::HANDLE,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSemaphoreWin32HandleKHR))
                }
                vkGetSemaphoreWin32HandleKHR
            },
            vk_import_semaphore_win32_handle_khr: {
                unsafe extern "system" fn vkImportSemaphoreWin32HandleKHR(
                    device: NonDisposableHandle,
                    p_import_semaphore_win32_handle_info: *const VkImportSemaphoreWin32HandleInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkImportSemaphoreWin32HandleKHR))
                }
                vkImportSemaphoreWin32HandleKHR
            },
            vk_get_semaphore_fd_khr: {
                unsafe extern "system" fn vkGetSemaphoreFdKHR(
                    device: NonDisposableHandle,
                    p_get_fd_info: *const VkSemaphoreGetFdInfoKHR,
                    p_fd: *mut std::os::raw::c_int,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSemaphoreFdKHR))
                }
                vkGetSemaphoreFdKHR
            },
            vk_import_semaphore_fd_khr: {
                unsafe extern "system" fn vkImportSemaphoreFdKHR(
                    device: NonDisposableHandle,
                    p_import_semaphore_fd_info: *const VkImportSemaphoreFdInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkImportSemaphoreFdKHR))
                }
                vkImportSemaphoreFdKHR
            },
            vk_get_semaphore_zircon_handle_fuchsia: {
                unsafe extern "system" fn vkGetSemaphoreZirconHandleFUCHSIA(
                    device: NonDisposableHandle,
                    p_get_zircon_handle_info: *const VkSemaphoreGetZirconHandleInfoFUCHSIA,
                    p_zircon_handle: *mut vk::zx_handle_t,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSemaphoreZirconHandleFUCHSIA))
                }
                vkGetSemaphoreZirconHandleFUCHSIA
            },
            vk_import_semaphore_zircon_handle_fuchsia: {
                unsafe extern "system" fn vkImportSemaphoreZirconHandleFUCHSIA(
                    device: NonDisposableHandle,
                    p_import_semaphore_zircon_handle_info: *const VkImportSemaphoreZirconHandleInfoFUCHSIA,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkImportSemaphoreZirconHandleFUCHSIA))
                }
                vkImportSemaphoreZirconHandleFUCHSIA
            },
            vk_get_physical_device_external_fence_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceExternalFenceProperties(
                    physical_device: NonDisposableHandle,
                    p_external_fence_info: *const VkPhysicalDeviceExternalFenceInfo,
                    p_external_fence_properties: *mut VkExternalFenceProperties,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceExternalFenceProperties))
                }
                vkGetPhysicalDeviceExternalFenceProperties
            },
            vk_get_fence_win32_handle_khr: {
                unsafe extern "system" fn vkGetFenceWin32HandleKHR(
                    device: NonDisposableHandle,
                    p_get_win32_handle_info: *const VkFenceGetWin32HandleInfoKHR,
                    p_handle: *mut vk::HANDLE,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetFenceWin32HandleKHR))
                }
                vkGetFenceWin32HandleKHR
            },
            vk_import_fence_win32_handle_khr: {
                unsafe extern "system" fn vkImportFenceWin32HandleKHR(
                    device: NonDisposableHandle,
                    p_import_fence_win32_handle_info: *const VkImportFenceWin32HandleInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkImportFenceWin32HandleKHR))
                }
                vkImportFenceWin32HandleKHR
            },
            vk_get_fence_fd_khr: {
                unsafe extern "system" fn vkGetFenceFdKHR(
                    device: NonDisposableHandle,
                    p_get_fd_info: *const VkFenceGetFdInfoKHR,
                    p_fd: *mut std::os::raw::c_int,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetFenceFdKHR))
                }
                vkGetFenceFdKHR
            },
            vk_import_fence_fd_khr: {
                unsafe extern "system" fn vkImportFenceFdKHR(
                    device: NonDisposableHandle,
                    p_import_fence_fd_info: *const VkImportFenceFdInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkImportFenceFdKHR))
                }
                vkImportFenceFdKHR
            },
            vk_release_display_ext: {
                unsafe extern "system" fn vkReleaseDisplayEXT(
                    physical_device: NonDisposableHandle,
                    display: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkReleaseDisplayEXT))
                }
                vkReleaseDisplayEXT
            },
            vk_acquire_xlib_display_ext: {
                unsafe extern "system" fn vkAcquireXlibDisplayEXT(
                    physical_device: NonDisposableHandle,
                    dpy: *mut usize,
                    display: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireXlibDisplayEXT))
                }
                vkAcquireXlibDisplayEXT
            },
            vk_get_rand_routput_display_ext: {
                unsafe extern "system" fn vkGetRandROutputDisplayEXT(
                    physical_device: NonDisposableHandle,
                    dpy: *mut usize,
                    rr_output: vk::RROutput,
                    p_display: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRandROutputDisplayEXT))
                }
                vkGetRandROutputDisplayEXT
            },
            vk_acquire_winrt_display_nv: {
                unsafe extern "system" fn vkAcquireWinrtDisplayNV(
                    physical_device: NonDisposableHandle,
                    display: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireWinrtDisplayNV))
                }
                vkAcquireWinrtDisplayNV
            },
            vk_get_winrt_display_nv: {
                unsafe extern "system" fn vkGetWinrtDisplayNV(
                    physical_device: NonDisposableHandle,
                    device_relative_id: u32,
                    p_display: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetWinrtDisplayNV))
                }
                vkGetWinrtDisplayNV
            },
            vk_display_power_control_ext: {
                unsafe extern "system" fn vkDisplayPowerControlEXT(
                    device: NonDisposableHandle,
                    display: NonDisposableHandle,
                    p_display_power_info: *const VkDisplayPowerInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDisplayPowerControlEXT))
                }
                vkDisplayPowerControlEXT
            },
            vk_register_device_event_ext: {
                unsafe extern "system" fn vkRegisterDeviceEventEXT(
                    device: NonDisposableHandle,
                    p_device_event_info: *const VkDeviceEventInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_fence: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkRegisterDeviceEventEXT))
                }
                vkRegisterDeviceEventEXT
            },
            vk_register_display_event_ext: {
                unsafe extern "system" fn vkRegisterDisplayEventEXT(
                    device: NonDisposableHandle,
                    display: NonDisposableHandle,
                    p_display_event_info: *const VkDisplayEventInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_fence: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkRegisterDisplayEventEXT))
                }
                vkRegisterDisplayEventEXT
            },
            vk_get_swapchain_counter_ext: {
                unsafe extern "system" fn vkGetSwapchainCounterEXT(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    counter: vk::SurfaceCounterFlagsEXT,
                    p_counter_value: *mut u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSwapchainCounterEXT))
                }
                vkGetSwapchainCounterEXT
            },
            vk_get_physical_device_surface_capabilities2_ext: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
                    physical_device: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_surface_capabilities: *mut VkSurfaceCapabilities2EXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfaceCapabilities2EXT))
                }
                vkGetPhysicalDeviceSurfaceCapabilities2EXT
            },
            vk_enumerate_physical_device_groups: {
                unsafe extern "system" fn vkEnumeratePhysicalDeviceGroups(
                    instance: NonDisposableHandle,
                    p_physical_device_group_count: *mut u32,
                    p_physical_device_group_properties: *mut VkPhysicalDeviceGroupProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumeratePhysicalDeviceGroups))
                }
                vkEnumeratePhysicalDeviceGroups
            },
            vk_get_device_group_peer_memory_features: {
                unsafe extern "system" fn vkGetDeviceGroupPeerMemoryFeatures(
                    device: NonDisposableHandle,
                    heap_index: u32,
                    local_device_index: u32,
                    remote_device_index: u32,
                    p_peer_memory_features: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceGroupPeerMemoryFeatures))
                }
                vkGetDeviceGroupPeerMemoryFeatures
            },
            vk_bind_buffer_memory2: {
                unsafe extern "system" fn vkBindBufferMemory2(
                    device: NonDisposableHandle,
                    bind_info_count: u32,
                    p_bind_infos: *const VkBindBufferMemoryInfo,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindBufferMemory2))
                }
                vkBindBufferMemory2
            },
            vk_bind_image_memory2: {
                unsafe extern "system" fn vkBindImageMemory2(
                    device: NonDisposableHandle,
                    bind_info_count: u32,
                    p_bind_infos: *const VkBindImageMemoryInfo,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindImageMemory2))
                }
                vkBindImageMemory2
            },
            vk_cmd_set_device_mask: {
                unsafe extern "system" fn vkCmdSetDeviceMask(
                    command_buffer: NonDisposableHandle,
                    device_mask: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDeviceMask))
                }
                vkCmdSetDeviceMask
            },
            vk_get_device_group_present_capabilities_khr: {
                unsafe extern "system" fn vkGetDeviceGroupPresentCapabilitiesKHR(
                    device: NonDisposableHandle,
                    p_device_group_present_capabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceGroupPresentCapabilitiesKHR))
                }
                vkGetDeviceGroupPresentCapabilitiesKHR
            },
            vk_get_device_group_surface_present_modes_khr: {
                unsafe extern "system" fn vkGetDeviceGroupSurfacePresentModesKHR(
                    device: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_modes: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceGroupSurfacePresentModesKHR))
                }
                vkGetDeviceGroupSurfacePresentModesKHR
            },
            vk_acquire_next_image2_khr: {
                unsafe extern "system" fn vkAcquireNextImage2KHR(
                    device: NonDisposableHandle,
                    p_acquire_info: *const VkAcquireNextImageInfoKHR,
                    p_image_index: *mut u32,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireNextImage2KHR))
                }
                vkAcquireNextImage2KHR
            },
            vk_cmd_dispatch_base: {
                unsafe extern "system" fn vkCmdDispatchBase(
                    command_buffer: NonDisposableHandle,
                    base_group_x: u32,
                    base_group_y: u32,
                    base_group_z: u32,
                    group_count_x: u32,
                    group_count_y: u32,
                    group_count_z: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDispatchBase))
                }
                vkCmdDispatchBase
            },
            vk_get_physical_device_present_rectangles_khr: {
                unsafe extern "system" fn vkGetPhysicalDevicePresentRectanglesKHR(
                    physical_device: NonDisposableHandle,
                    surface: NonDisposableHandle,
                    p_rect_count: *mut u32,
                    p_rects: *mut VkRect2D,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDevicePresentRectanglesKHR))
                }
                vkGetPhysicalDevicePresentRectanglesKHR
            },
            vk_create_descriptor_update_template: {
                unsafe extern "system" fn vkCreateDescriptorUpdateTemplate(
                    device: NonDisposableHandle,
                    p_create_info: *const VkDescriptorUpdateTemplateCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_descriptor_update_template: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDescriptorUpdateTemplate))
                }
                vkCreateDescriptorUpdateTemplate
            },
            vk_destroy_descriptor_update_template: {
                unsafe extern "system" fn vkDestroyDescriptorUpdateTemplate(
                    device: NonDisposableHandle,
                    descriptor_update_template: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDescriptorUpdateTemplate))
                }
                vkDestroyDescriptorUpdateTemplate
            },
            vk_update_descriptor_set_with_template: {
                unsafe extern "system" fn vkUpdateDescriptorSetWithTemplate(
                    device: NonDisposableHandle,
                    descriptor_set: NonDisposableHandle,
                    descriptor_update_template: NonDisposableHandle,
                    p_data: *const c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkUpdateDescriptorSetWithTemplate))
                }
                vkUpdateDescriptorSetWithTemplate
            },
            vk_cmd_push_descriptor_set_with_template_khr: {
                unsafe extern "system" fn vkCmdPushDescriptorSetWithTemplateKHR(
                    command_buffer: NonDisposableHandle,
                    descriptor_update_template: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    set: u32,
                    p_data: *const c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPushDescriptorSetWithTemplateKHR))
                }
                vkCmdPushDescriptorSetWithTemplateKHR
            },
            vk_set_hdr_metadata_ext: {
                unsafe extern "system" fn vkSetHdrMetadataEXT(
                    device: NonDisposableHandle,
                    swapchain_count: u32,
                    p_swapchains: *const NonDisposableHandle,
                    p_metadata: *const VkHdrMetadataEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetHdrMetadataEXT))
                }
                vkSetHdrMetadataEXT
            },
            vk_get_swapchain_status_khr: {
                unsafe extern "system" fn vkGetSwapchainStatusKHR(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSwapchainStatusKHR))
                }
                vkGetSwapchainStatusKHR
            },
            vk_get_refresh_cycle_duration_google: {
                unsafe extern "system" fn vkGetRefreshCycleDurationGOOGLE(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_display_timing_properties: *mut VkRefreshCycleDurationGOOGLE,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRefreshCycleDurationGOOGLE))
                }
                vkGetRefreshCycleDurationGOOGLE
            },
            vk_get_past_presentation_timing_google: {
                unsafe extern "system" fn vkGetPastPresentationTimingGOOGLE(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_presentation_timing_count: *mut u32,
                    p_presentation_timings: *mut VkPastPresentationTimingGOOGLE,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPastPresentationTimingGOOGLE))
                }
                vkGetPastPresentationTimingGOOGLE
            },
            vk_create_iossurface_mvk: {
                unsafe extern "system" fn vkCreateIOSSurfaceMVK(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkIOSSurfaceCreateInfoMVK,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateIOSSurfaceMVK))
                }
                vkCreateIOSSurfaceMVK
            },
            vk_create_mac_ossurface_mvk: {
                unsafe extern "system" fn vkCreateMacOSSurfaceMVK(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkMacOSSurfaceCreateInfoMVK,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateMacOSSurfaceMVK))
                }
                vkCreateMacOSSurfaceMVK
            },
            vk_create_metal_surface_ext: {
                unsafe extern "system" fn vkCreateMetalSurfaceEXT(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkMetalSurfaceCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateMetalSurfaceEXT))
                }
                vkCreateMetalSurfaceEXT
            },
            vk_cmd_set_viewport_wscaling_nv: {
                unsafe extern "system" fn vkCmdSetViewportWScalingNV(
                    command_buffer: NonDisposableHandle,
                    first_viewport: u32,
                    viewport_count: u32,
                    p_viewport_wscalings: *const VkViewportWScalingNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetViewportWScalingNV))
                }
                vkCmdSetViewportWScalingNV
            },
            vk_cmd_set_discard_rectangle_ext: {
                unsafe extern "system" fn vkCmdSetDiscardRectangleEXT(
                    command_buffer: NonDisposableHandle,
                    first_discard_rectangle: u32,
                    discard_rectangle_count: u32,
                    p_discard_rectangles: *const VkRect2D,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDiscardRectangleEXT))
                }
                vkCmdSetDiscardRectangleEXT
            },
            vk_cmd_set_discard_rectangle_enable_ext: {
                unsafe extern "system" fn vkCmdSetDiscardRectangleEnableEXT(
                    command_buffer: NonDisposableHandle,
                    discard_rectangle_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDiscardRectangleEnableEXT))
                }
                vkCmdSetDiscardRectangleEnableEXT
            },
            vk_cmd_set_discard_rectangle_mode_ext: {
                unsafe extern "system" fn vkCmdSetDiscardRectangleModeEXT(
                    command_buffer: NonDisposableHandle,
                    discard_rectangle_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDiscardRectangleModeEXT))
                }
                vkCmdSetDiscardRectangleModeEXT
            },
            vk_cmd_set_sample_locations_ext: {
                unsafe extern "system" fn vkCmdSetSampleLocationsEXT(
                    command_buffer: NonDisposableHandle,
                    p_sample_locations_info: *const VkSampleLocationsInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetSampleLocationsEXT))
                }
                vkCmdSetSampleLocationsEXT
            },
            vk_get_physical_device_multisample_properties_ext: {
                unsafe extern "system" fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
                    physical_device: NonDisposableHandle,
                    samples: vk::SampleCountFlags,
                    p_multisample_properties: *mut VkMultisamplePropertiesEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceMultisamplePropertiesEXT))
                }
                vkGetPhysicalDeviceMultisamplePropertiesEXT
            },
            vk_get_physical_device_surface_capabilities2_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
                    physical_device: NonDisposableHandle,
                    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
                    p_surface_capabilities: *mut VkSurfaceCapabilities2KHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfaceCapabilities2KHR))
                }
                vkGetPhysicalDeviceSurfaceCapabilities2KHR
            },
            vk_get_physical_device_surface_formats2_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfaceFormats2KHR(
                    physical_device: NonDisposableHandle,
                    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
                    p_surface_format_count: *mut u32,
                    p_surface_formats: *mut VkSurfaceFormat2KHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfaceFormats2KHR))
                }
                vkGetPhysicalDeviceSurfaceFormats2KHR
            },
            vk_get_physical_device_display_properties2_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceDisplayProperties2KHR(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkDisplayProperties2KHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceDisplayProperties2KHR))
                }
                vkGetPhysicalDeviceDisplayProperties2KHR
            },
            vk_get_physical_device_display_plane_properties2_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkDisplayPlaneProperties2KHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceDisplayPlaneProperties2KHR))
                }
                vkGetPhysicalDeviceDisplayPlaneProperties2KHR
            },
            vk_get_display_mode_properties2_khr: {
                unsafe extern "system" fn vkGetDisplayModeProperties2KHR(
                    physical_device: NonDisposableHandle,
                    display: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkDisplayModeProperties2KHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDisplayModeProperties2KHR))
                }
                vkGetDisplayModeProperties2KHR
            },
            vk_get_display_plane_capabilities2_khr: {
                unsafe extern "system" fn vkGetDisplayPlaneCapabilities2KHR(
                    physical_device: NonDisposableHandle,
                    p_display_plane_info: *const VkDisplayPlaneInfo2KHR,
                    p_capabilities: *mut VkDisplayPlaneCapabilities2KHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDisplayPlaneCapabilities2KHR))
                }
                vkGetDisplayPlaneCapabilities2KHR
            },
            vk_get_buffer_memory_requirements2: {
                unsafe extern "system" fn vkGetBufferMemoryRequirements2(
                    device: NonDisposableHandle,
                    p_info: *const VkBufferMemoryRequirementsInfo2,
                    p_memory_requirements: *mut VkMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetBufferMemoryRequirements2))
                }
                vkGetBufferMemoryRequirements2
            },
            vk_get_image_memory_requirements2: {
                unsafe extern "system" fn vkGetImageMemoryRequirements2(
                    device: NonDisposableHandle,
                    p_info: *const VkImageMemoryRequirementsInfo2,
                    p_memory_requirements: *mut VkMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageMemoryRequirements2))
                }
                vkGetImageMemoryRequirements2
            },
            vk_get_image_sparse_memory_requirements2: {
                unsafe extern "system" fn vkGetImageSparseMemoryRequirements2(
                    device: NonDisposableHandle,
                    p_info: *const VkImageSparseMemoryRequirementsInfo2,
                    p_sparse_memory_requirement_count: *mut u32,
                    p_sparse_memory_requirements: *mut VkSparseImageMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageSparseMemoryRequirements2))
                }
                vkGetImageSparseMemoryRequirements2
            },
            vk_get_device_buffer_memory_requirements: {
                unsafe extern "system" fn vkGetDeviceBufferMemoryRequirements(
                    device: NonDisposableHandle,
                    p_info: *const VkDeviceBufferMemoryRequirements,
                    p_memory_requirements: *mut VkMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceBufferMemoryRequirements))
                }
                vkGetDeviceBufferMemoryRequirements
            },
            vk_get_device_image_memory_requirements: {
                unsafe extern "system" fn vkGetDeviceImageMemoryRequirements(
                    device: NonDisposableHandle,
                    p_info: *const VkDeviceImageMemoryRequirements,
                    p_memory_requirements: *mut VkMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceImageMemoryRequirements))
                }
                vkGetDeviceImageMemoryRequirements
            },
            vk_get_device_image_sparse_memory_requirements: {
                unsafe extern "system" fn vkGetDeviceImageSparseMemoryRequirements(
                    device: NonDisposableHandle,
                    p_info: *const VkDeviceImageMemoryRequirements,
                    p_sparse_memory_requirement_count: *mut u32,
                    p_sparse_memory_requirements: *mut VkSparseImageMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceImageSparseMemoryRequirements))
                }
                vkGetDeviceImageSparseMemoryRequirements
            },
            vk_create_sampler_ycbcr_conversion: {
                unsafe extern "system" fn vkCreateSamplerYcbcrConversion(
                    device: NonDisposableHandle,
                    p_create_info: *const VkSamplerYcbcrConversionCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_ycbcr_conversion: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateSamplerYcbcrConversion))
                }
                vkCreateSamplerYcbcrConversion
            },
            vk_destroy_sampler_ycbcr_conversion: {
                unsafe extern "system" fn vkDestroySamplerYcbcrConversion(
                    device: NonDisposableHandle,
                    ycbcr_conversion: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroySamplerYcbcrConversion))
                }
                vkDestroySamplerYcbcrConversion
            },
            vk_get_device_queue2: {
                unsafe extern "system" fn vkGetDeviceQueue2(
                    device: NonDisposableHandle,
                    p_queue_info: *const VkDeviceQueueInfo2,
                    p_queue: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceQueue2))
                }
                vkGetDeviceQueue2
            },
            vk_create_validation_cache_ext: {
                unsafe extern "system" fn vkCreateValidationCacheEXT(
                    device: NonDisposableHandle,
                    p_create_info: *const VkValidationCacheCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_validation_cache: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateValidationCacheEXT))
                }
                vkCreateValidationCacheEXT
            },
            vk_destroy_validation_cache_ext: {
                unsafe extern "system" fn vkDestroyValidationCacheEXT(
                    device: NonDisposableHandle,
                    validation_cache: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyValidationCacheEXT))
                }
                vkDestroyValidationCacheEXT
            },
            vk_get_validation_cache_data_ext: {
                unsafe extern "system" fn vkGetValidationCacheDataEXT(
                    device: NonDisposableHandle,
                    validation_cache: NonDisposableHandle,
                    p_data_size: *mut usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetValidationCacheDataEXT))
                }
                vkGetValidationCacheDataEXT
            },
            vk_merge_validation_caches_ext: {
                unsafe extern "system" fn vkMergeValidationCachesEXT(
                    device: NonDisposableHandle,
                    dst_cache: NonDisposableHandle,
                    src_cache_count: u32,
                    p_src_caches: *const NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkMergeValidationCachesEXT))
                }
                vkMergeValidationCachesEXT
            },
            vk_get_descriptor_set_layout_support: {
                unsafe extern "system" fn vkGetDescriptorSetLayoutSupport(
                    device: NonDisposableHandle,
                    p_create_info: *const VkDescriptorSetLayoutCreateInfo,
                    p_support: *mut VkDescriptorSetLayoutSupport,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDescriptorSetLayoutSupport))
                }
                vkGetDescriptorSetLayoutSupport
            },
            vk_get_swapchain_gralloc_usage_android: {
                unsafe extern "system" fn vkGetSwapchainGrallocUsageANDROID(
                    device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    image_usage: NonDisposableHandle,
                    gralloc_usage: *mut std::os::raw::c_int,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSwapchainGrallocUsageANDROID))
                }
                vkGetSwapchainGrallocUsageANDROID
            },
            vk_get_swapchain_gralloc_usage2_android: {
                unsafe extern "system" fn vkGetSwapchainGrallocUsage2ANDROID(
                    device: NonDisposableHandle,
                    format: NonDisposableHandle,
                    image_usage: NonDisposableHandle,
                    swapchain_image_usage: NonDisposableHandle,
                    gralloc_consumer_usage: *mut u64,
                    gralloc_producer_usage: *mut u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSwapchainGrallocUsage2ANDROID))
                }
                vkGetSwapchainGrallocUsage2ANDROID
            },
            vk_acquire_image_android: {
                unsafe extern "system" fn vkAcquireImageANDROID(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    native_fence_fd: std::os::raw::c_int,
                    semaphore: NonDisposableHandle,
                    fence: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireImageANDROID))
                }
                vkAcquireImageANDROID
            },
            vk_queue_signal_release_image_android: {
                unsafe extern "system" fn vkQueueSignalReleaseImageANDROID(
                    queue: NonDisposableHandle,
                    wait_semaphore_count: u32,
                    p_wait_semaphores: *const NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_native_fence_fd: *mut std::os::raw::c_int,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueSignalReleaseImageANDROID))
                }
                vkQueueSignalReleaseImageANDROID
            },
            vk_get_shader_info_amd: {
                unsafe extern "system" fn vkGetShaderInfoAMD(
                    device: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    shader_stage: vk::ShaderStageFlags,
                    info_type: NonDisposableHandle,
                    p_info_size: *mut usize,
                    p_info: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetShaderInfoAMD))
                }
                vkGetShaderInfoAMD
            },
            vk_set_local_dimming_amd: {
                unsafe extern "system" fn vkSetLocalDimmingAMD(
                    device: NonDisposableHandle,
                    swap_chain: NonDisposableHandle,
                    local_dimming_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetLocalDimmingAMD))
                }
                vkSetLocalDimmingAMD
            },
            vk_get_physical_device_calibrateable_time_domains_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(
                    physical_device: NonDisposableHandle,
                    p_time_domain_count: *mut u32,
                    p_time_domains: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceCalibrateableTimeDomainsKHR))
                }
                vkGetPhysicalDeviceCalibrateableTimeDomainsKHR
            },
            vk_get_calibrated_timestamps_khr: {
                unsafe extern "system" fn vkGetCalibratedTimestampsKHR(
                    device: NonDisposableHandle,
                    timestamp_count: u32,
                    p_timestamp_infos: *const VkCalibratedTimestampInfoKHR,
                    p_timestamps: *mut u64,
                    p_max_deviation: *mut u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetCalibratedTimestampsKHR))
                }
                vkGetCalibratedTimestampsKHR
            },
            vk_set_debug_utils_object_name_ext: {
                unsafe extern "system" fn vkSetDebugUtilsObjectNameEXT(
                    device: NonDisposableHandle,
                    p_name_info: *const VkDebugUtilsObjectNameInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetDebugUtilsObjectNameEXT))
                }
                vkSetDebugUtilsObjectNameEXT
            },
            vk_set_debug_utils_object_tag_ext: {
                unsafe extern "system" fn vkSetDebugUtilsObjectTagEXT(
                    device: NonDisposableHandle,
                    p_tag_info: *const VkDebugUtilsObjectTagInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetDebugUtilsObjectTagEXT))
                }
                vkSetDebugUtilsObjectTagEXT
            },
            vk_queue_begin_debug_utils_label_ext: {
                unsafe extern "system" fn vkQueueBeginDebugUtilsLabelEXT(
                    queue: NonDisposableHandle,
                    p_label_info: *const VkDebugUtilsLabelEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueBeginDebugUtilsLabelEXT))
                }
                vkQueueBeginDebugUtilsLabelEXT
            },
            vk_queue_end_debug_utils_label_ext: {
                unsafe extern "system" fn vkQueueEndDebugUtilsLabelEXT(
                    queue: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueEndDebugUtilsLabelEXT))
                }
                vkQueueEndDebugUtilsLabelEXT
            },
            vk_queue_insert_debug_utils_label_ext: {
                unsafe extern "system" fn vkQueueInsertDebugUtilsLabelEXT(
                    queue: NonDisposableHandle,
                    p_label_info: *const VkDebugUtilsLabelEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueInsertDebugUtilsLabelEXT))
                }
                vkQueueInsertDebugUtilsLabelEXT
            },
            vk_cmd_begin_debug_utils_label_ext: {
                unsafe extern "system" fn vkCmdBeginDebugUtilsLabelEXT(
                    command_buffer: NonDisposableHandle,
                    p_label_info: *const VkDebugUtilsLabelEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginDebugUtilsLabelEXT))
                }
                vkCmdBeginDebugUtilsLabelEXT
            },
            vk_cmd_end_debug_utils_label_ext: {
                unsafe extern "system" fn vkCmdEndDebugUtilsLabelEXT(
                    command_buffer: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndDebugUtilsLabelEXT))
                }
                vkCmdEndDebugUtilsLabelEXT
            },
            vk_cmd_insert_debug_utils_label_ext: {
                unsafe extern "system" fn vkCmdInsertDebugUtilsLabelEXT(
                    command_buffer: NonDisposableHandle,
                    p_label_info: *const VkDebugUtilsLabelEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdInsertDebugUtilsLabelEXT))
                }
                vkCmdInsertDebugUtilsLabelEXT
            },
            vk_create_debug_utils_messenger_ext: {
                unsafe extern "system" fn vkCreateDebugUtilsMessengerEXT(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkDebugUtilsMessengerCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_messenger: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDebugUtilsMessengerEXT))
                }
                vkCreateDebugUtilsMessengerEXT
            },
            vk_destroy_debug_utils_messenger_ext: {
                unsafe extern "system" fn vkDestroyDebugUtilsMessengerEXT(
                    instance: NonDisposableHandle,
                    messenger: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDebugUtilsMessengerEXT))
                }
                vkDestroyDebugUtilsMessengerEXT
            },
            vk_submit_debug_utils_message_ext: {
                unsafe extern "system" fn vkSubmitDebugUtilsMessageEXT(
                    instance: NonDisposableHandle,
                    message_severity: vk::DebugUtilsMessageSeverityFlagsEXT,
                    message_types: NonDisposableHandle,
                    p_callback_data: *const VkDebugUtilsMessengerCallbackDataEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSubmitDebugUtilsMessageEXT))
                }
                vkSubmitDebugUtilsMessageEXT
            },
            vk_get_memory_host_pointer_properties_ext: {
                unsafe extern "system" fn vkGetMemoryHostPointerPropertiesEXT(
                    device: NonDisposableHandle,
                    handle_type: vk::ExternalMemoryHandleTypeFlags,
                    p_host_pointer: *const c_void,
                    p_memory_host_pointer_properties: *mut VkMemoryHostPointerPropertiesEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryHostPointerPropertiesEXT))
                }
                vkGetMemoryHostPointerPropertiesEXT
            },
            vk_cmd_write_buffer_marker_amd: {
                unsafe extern "system" fn vkCmdWriteBufferMarkerAMD(
                    command_buffer: NonDisposableHandle,
                    pipeline_stage: vk::PipelineStageFlags,
                    dst_buffer: NonDisposableHandle,
                    dst_offset: NonDisposableHandle,
                    marker: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteBufferMarkerAMD))
                }
                vkCmdWriteBufferMarkerAMD
            },
            vk_create_render_pass2: {
                unsafe extern "system" fn vkCreateRenderPass2(
                    device: NonDisposableHandle,
                    p_create_info: *const VkRenderPassCreateInfo2,
                    p_allocator: *const VkAllocationCallbacks,
                    p_render_pass: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateRenderPass2))
                }
                vkCreateRenderPass2
            },
            vk_cmd_begin_render_pass2: {
                unsafe extern "system" fn vkCmdBeginRenderPass2(
                    command_buffer: NonDisposableHandle,
                    p_render_pass_begin: *const VkRenderPassBeginInfo,
                    p_subpass_begin_info: *const VkSubpassBeginInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginRenderPass2))
                }
                vkCmdBeginRenderPass2
            },
            vk_cmd_next_subpass2: {
                unsafe extern "system" fn vkCmdNextSubpass2(
                    command_buffer: NonDisposableHandle,
                    p_subpass_begin_info: *const VkSubpassBeginInfo,
                    p_subpass_end_info: *const VkSubpassEndInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdNextSubpass2))
                }
                vkCmdNextSubpass2
            },
            vk_cmd_end_render_pass2: {
                unsafe extern "system" fn vkCmdEndRenderPass2(
                    command_buffer: NonDisposableHandle,
                    p_subpass_end_info: *const VkSubpassEndInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndRenderPass2))
                }
                vkCmdEndRenderPass2
            },
            vk_get_semaphore_counter_value: {
                unsafe extern "system" fn vkGetSemaphoreCounterValue(
                    device: NonDisposableHandle,
                    semaphore: NonDisposableHandle,
                    p_value: *mut u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSemaphoreCounterValue))
                }
                vkGetSemaphoreCounterValue
            },
            vk_wait_semaphores: {
                unsafe extern "system" fn vkWaitSemaphores(
                    device: NonDisposableHandle,
                    p_wait_info: *const VkSemaphoreWaitInfo,
                    timeout: u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkWaitSemaphores))
                }
                vkWaitSemaphores
            },
            vk_signal_semaphore: {
                unsafe extern "system" fn vkSignalSemaphore(
                    device: NonDisposableHandle,
                    p_signal_info: *const VkSemaphoreSignalInfo,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSignalSemaphore))
                }
                vkSignalSemaphore
            },
            vk_get_android_hardware_buffer_properties_android: {
                unsafe extern "system" fn vkGetAndroidHardwareBufferPropertiesANDROID(
                    device: NonDisposableHandle,
                    buffer: *const usize,
                    p_properties: *mut VkAndroidHardwareBufferPropertiesANDROID,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetAndroidHardwareBufferPropertiesANDROID))
                }
                vkGetAndroidHardwareBufferPropertiesANDROID
            },
            vk_get_memory_android_hardware_buffer_android: {
                unsafe extern "system" fn vkGetMemoryAndroidHardwareBufferANDROID(
                    device: NonDisposableHandle,
                    p_info: *const VkMemoryGetAndroidHardwareBufferInfoANDROID,
                    p_buffer: *mut *mut usize,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMemoryAndroidHardwareBufferANDROID))
                }
                vkGetMemoryAndroidHardwareBufferANDROID
            },
            vk_cmd_draw_indirect_count: {
                unsafe extern "system" fn vkCmdDrawIndirectCount(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    count_buffer: NonDisposableHandle,
                    count_buffer_offset: NonDisposableHandle,
                    max_draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawIndirectCount))
                }
                vkCmdDrawIndirectCount
            },
            vk_cmd_draw_indexed_indirect_count: {
                unsafe extern "system" fn vkCmdDrawIndexedIndirectCount(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    count_buffer: NonDisposableHandle,
                    count_buffer_offset: NonDisposableHandle,
                    max_draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawIndexedIndirectCount))
                }
                vkCmdDrawIndexedIndirectCount
            },
            vk_cmd_set_checkpoint_nv: {
                unsafe extern "system" fn vkCmdSetCheckpointNV(
                    command_buffer: NonDisposableHandle,
                    p_checkpoint_marker: *const c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCheckpointNV))
                }
                vkCmdSetCheckpointNV
            },
            vk_get_queue_checkpoint_data_nv: {
                unsafe extern "system" fn vkGetQueueCheckpointDataNV(
                    queue: NonDisposableHandle,
                    p_checkpoint_data_count: *mut u32,
                    p_checkpoint_data: *mut VkCheckpointDataNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetQueueCheckpointDataNV))
                }
                vkGetQueueCheckpointDataNV
            },
            vk_cmd_bind_transform_feedback_buffers_ext: {
                unsafe extern "system" fn vkCmdBindTransformFeedbackBuffersEXT(
                    command_buffer: NonDisposableHandle,
                    first_binding: u32,
                    binding_count: u32,
                    p_buffers: *const NonDisposableHandle,
                    p_offsets: *const NonDisposableHandle,
                    p_sizes: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindTransformFeedbackBuffersEXT))
                }
                vkCmdBindTransformFeedbackBuffersEXT
            },
            vk_cmd_begin_transform_feedback_ext: {
                unsafe extern "system" fn vkCmdBeginTransformFeedbackEXT(
                    command_buffer: NonDisposableHandle,
                    first_counter_buffer: u32,
                    counter_buffer_count: u32,
                    p_counter_buffers: *const NonDisposableHandle,
                    p_counter_buffer_offsets: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginTransformFeedbackEXT))
                }
                vkCmdBeginTransformFeedbackEXT
            },
            vk_cmd_end_transform_feedback_ext: {
                unsafe extern "system" fn vkCmdEndTransformFeedbackEXT(
                    command_buffer: NonDisposableHandle,
                    first_counter_buffer: u32,
                    counter_buffer_count: u32,
                    p_counter_buffers: *const NonDisposableHandle,
                    p_counter_buffer_offsets: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndTransformFeedbackEXT))
                }
                vkCmdEndTransformFeedbackEXT
            },
            vk_cmd_begin_query_indexed_ext: {
                unsafe extern "system" fn vkCmdBeginQueryIndexedEXT(
                    command_buffer: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    query: u32,
                    flags: NonDisposableHandle,
                    index: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginQueryIndexedEXT))
                }
                vkCmdBeginQueryIndexedEXT
            },
            vk_cmd_end_query_indexed_ext: {
                unsafe extern "system" fn vkCmdEndQueryIndexedEXT(
                    command_buffer: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    query: u32,
                    index: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndQueryIndexedEXT))
                }
                vkCmdEndQueryIndexedEXT
            },
            vk_cmd_draw_indirect_byte_count_ext: {
                unsafe extern "system" fn vkCmdDrawIndirectByteCountEXT(
                    command_buffer: NonDisposableHandle,
                    instance_count: u32,
                    first_instance: u32,
                    counter_buffer: NonDisposableHandle,
                    counter_buffer_offset: NonDisposableHandle,
                    counter_offset: u32,
                    vertex_stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawIndirectByteCountEXT))
                }
                vkCmdDrawIndirectByteCountEXT
            },
            vk_cmd_set_exclusive_scissor_nv: {
                unsafe extern "system" fn vkCmdSetExclusiveScissorNV(
                    command_buffer: NonDisposableHandle,
                    first_exclusive_scissor: u32,
                    exclusive_scissor_count: u32,
                    p_exclusive_scissors: *const VkRect2D,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetExclusiveScissorNV))
                }
                vkCmdSetExclusiveScissorNV
            },
            vk_cmd_set_exclusive_scissor_enable_nv: {
                unsafe extern "system" fn vkCmdSetExclusiveScissorEnableNV(
                    command_buffer: NonDisposableHandle,
                    first_exclusive_scissor: u32,
                    exclusive_scissor_count: u32,
                    p_exclusive_scissor_enables: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetExclusiveScissorEnableNV))
                }
                vkCmdSetExclusiveScissorEnableNV
            },
            vk_cmd_bind_shading_rate_image_nv: {
                unsafe extern "system" fn vkCmdBindShadingRateImageNV(
                    command_buffer: NonDisposableHandle,
                    image_view: NonDisposableHandle,
                    image_layout: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindShadingRateImageNV))
                }
                vkCmdBindShadingRateImageNV
            },
            vk_cmd_set_viewport_shading_rate_palette_nv: {
                unsafe extern "system" fn vkCmdSetViewportShadingRatePaletteNV(
                    command_buffer: NonDisposableHandle,
                    first_viewport: u32,
                    viewport_count: u32,
                    p_shading_rate_palettes: *const VkShadingRatePaletteNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetViewportShadingRatePaletteNV))
                }
                vkCmdSetViewportShadingRatePaletteNV
            },
            vk_cmd_set_coarse_sample_order_nv: {
                unsafe extern "system" fn vkCmdSetCoarseSampleOrderNV(
                    command_buffer: NonDisposableHandle,
                    sample_order_type: NonDisposableHandle,
                    custom_sample_order_count: u32,
                    p_custom_sample_orders: *const VkCoarseSampleOrderCustomNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoarseSampleOrderNV))
                }
                vkCmdSetCoarseSampleOrderNV
            },
            vk_cmd_draw_mesh_tasks_nv: {
                unsafe extern "system" fn vkCmdDrawMeshTasksNV(
                    command_buffer: NonDisposableHandle,
                    task_count: u32,
                    first_task: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMeshTasksNV))
                }
                vkCmdDrawMeshTasksNV
            },
            vk_cmd_draw_mesh_tasks_indirect_nv: {
                unsafe extern "system" fn vkCmdDrawMeshTasksIndirectNV(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMeshTasksIndirectNV))
                }
                vkCmdDrawMeshTasksIndirectNV
            },
            vk_cmd_draw_mesh_tasks_indirect_count_nv: {
                unsafe extern "system" fn vkCmdDrawMeshTasksIndirectCountNV(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    count_buffer: NonDisposableHandle,
                    count_buffer_offset: NonDisposableHandle,
                    max_draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMeshTasksIndirectCountNV))
                }
                vkCmdDrawMeshTasksIndirectCountNV
            },
            vk_cmd_draw_mesh_tasks_ext: {
                unsafe extern "system" fn vkCmdDrawMeshTasksEXT(
                    command_buffer: NonDisposableHandle,
                    group_count_x: u32,
                    group_count_y: u32,
                    group_count_z: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMeshTasksEXT))
                }
                vkCmdDrawMeshTasksEXT
            },
            vk_cmd_draw_mesh_tasks_indirect_ext: {
                unsafe extern "system" fn vkCmdDrawMeshTasksIndirectEXT(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMeshTasksIndirectEXT))
                }
                vkCmdDrawMeshTasksIndirectEXT
            },
            vk_cmd_draw_mesh_tasks_indirect_count_ext: {
                unsafe extern "system" fn vkCmdDrawMeshTasksIndirectCountEXT(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    count_buffer: NonDisposableHandle,
                    count_buffer_offset: NonDisposableHandle,
                    max_draw_count: u32,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDrawMeshTasksIndirectCountEXT))
                }
                vkCmdDrawMeshTasksIndirectCountEXT
            },
            vk_compile_deferred_nv: {
                unsafe extern "system" fn vkCompileDeferredNV(
                    device: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    shader: u32,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCompileDeferredNV))
                }
                vkCompileDeferredNV
            },
            vk_create_acceleration_structure_nv: {
                unsafe extern "system" fn vkCreateAccelerationStructureNV(
                    device: NonDisposableHandle,
                    p_create_info: *const VkAccelerationStructureCreateInfoNV,
                    p_allocator: *const VkAllocationCallbacks,
                    p_acceleration_structure: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateAccelerationStructureNV))
                }
                vkCreateAccelerationStructureNV
            },
            vk_cmd_bind_invocation_mask_huawei: {
                unsafe extern "system" fn vkCmdBindInvocationMaskHUAWEI(
                    command_buffer: NonDisposableHandle,
                    image_view: NonDisposableHandle,
                    image_layout: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindInvocationMaskHUAWEI))
                }
                vkCmdBindInvocationMaskHUAWEI
            },
            vk_destroy_acceleration_structure_khr: {
                unsafe extern "system" fn vkDestroyAccelerationStructureKHR(
                    device: NonDisposableHandle,
                    acceleration_structure: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyAccelerationStructureKHR))
                }
                vkDestroyAccelerationStructureKHR
            },
            vk_destroy_acceleration_structure_nv: {
                unsafe extern "system" fn vkDestroyAccelerationStructureNV(
                    device: NonDisposableHandle,
                    acceleration_structure: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyAccelerationStructureNV))
                }
                vkDestroyAccelerationStructureNV
            },
            vk_get_acceleration_structure_memory_requirements_nv: {
                unsafe extern "system" fn vkGetAccelerationStructureMemoryRequirementsNV(
                    device: NonDisposableHandle,
                    p_info: *const VkAccelerationStructureMemoryRequirementsInfoNV,
                    p_memory_requirements: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetAccelerationStructureMemoryRequirementsNV))
                }
                vkGetAccelerationStructureMemoryRequirementsNV
            },
            vk_bind_acceleration_structure_memory_nv: {
                unsafe extern "system" fn vkBindAccelerationStructureMemoryNV(
                    device: NonDisposableHandle,
                    bind_info_count: u32,
                    p_bind_infos: *const VkBindAccelerationStructureMemoryInfoNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindAccelerationStructureMemoryNV))
                }
                vkBindAccelerationStructureMemoryNV
            },
            vk_cmd_copy_acceleration_structure_nv: {
                unsafe extern "system" fn vkCmdCopyAccelerationStructureNV(
                    command_buffer: NonDisposableHandle,
                    dst: NonDisposableHandle,
                    src: NonDisposableHandle,
                    mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyAccelerationStructureNV))
                }
                vkCmdCopyAccelerationStructureNV
            },
            vk_cmd_copy_acceleration_structure_khr: {
                unsafe extern "system" fn vkCmdCopyAccelerationStructureKHR(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkCopyAccelerationStructureInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyAccelerationStructureKHR))
                }
                vkCmdCopyAccelerationStructureKHR
            },
            vk_copy_acceleration_structure_khr: {
                unsafe extern "system" fn vkCopyAccelerationStructureKHR(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    p_info: *const VkCopyAccelerationStructureInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyAccelerationStructureKHR))
                }
                vkCopyAccelerationStructureKHR
            },
            vk_cmd_copy_acceleration_structure_to_memory_khr: {
                unsafe extern "system" fn vkCmdCopyAccelerationStructureToMemoryKHR(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkCopyAccelerationStructureToMemoryInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyAccelerationStructureToMemoryKHR))
                }
                vkCmdCopyAccelerationStructureToMemoryKHR
            },
            vk_copy_acceleration_structure_to_memory_khr: {
                unsafe extern "system" fn vkCopyAccelerationStructureToMemoryKHR(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    p_info: *const VkCopyAccelerationStructureToMemoryInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyAccelerationStructureToMemoryKHR))
                }
                vkCopyAccelerationStructureToMemoryKHR
            },
            vk_cmd_copy_memory_to_acceleration_structure_khr: {
                unsafe extern "system" fn vkCmdCopyMemoryToAccelerationStructureKHR(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkCopyMemoryToAccelerationStructureInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyMemoryToAccelerationStructureKHR))
                }
                vkCmdCopyMemoryToAccelerationStructureKHR
            },
            vk_copy_memory_to_acceleration_structure_khr: {
                unsafe extern "system" fn vkCopyMemoryToAccelerationStructureKHR(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    p_info: *const VkCopyMemoryToAccelerationStructureInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyMemoryToAccelerationStructureKHR))
                }
                vkCopyMemoryToAccelerationStructureKHR
            },
            vk_cmd_write_acceleration_structures_properties_khr: {
                unsafe extern "system" fn vkCmdWriteAccelerationStructuresPropertiesKHR(
                    command_buffer: NonDisposableHandle,
                    acceleration_structure_count: u32,
                    p_acceleration_structures: *const NonDisposableHandle,
                    query_type: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteAccelerationStructuresPropertiesKHR))
                }
                vkCmdWriteAccelerationStructuresPropertiesKHR
            },
            vk_cmd_write_acceleration_structures_properties_nv: {
                unsafe extern "system" fn vkCmdWriteAccelerationStructuresPropertiesNV(
                    command_buffer: NonDisposableHandle,
                    acceleration_structure_count: u32,
                    p_acceleration_structures: *const NonDisposableHandle,
                    query_type: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteAccelerationStructuresPropertiesNV))
                }
                vkCmdWriteAccelerationStructuresPropertiesNV
            },
            vk_cmd_build_acceleration_structure_nv: {
                unsafe extern "system" fn vkCmdBuildAccelerationStructureNV(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkAccelerationStructureInfoNV,
                    instance_data: NonDisposableHandle,
                    instance_offset: NonDisposableHandle,
                    update: NonDisposableHandle,
                    dst: NonDisposableHandle,
                    src: NonDisposableHandle,
                    scratch: NonDisposableHandle,
                    scratch_offset: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBuildAccelerationStructureNV))
                }
                vkCmdBuildAccelerationStructureNV
            },
            vk_write_acceleration_structures_properties_khr: {
                unsafe extern "system" fn vkWriteAccelerationStructuresPropertiesKHR(
                    device: NonDisposableHandle,
                    acceleration_structure_count: u32,
                    p_acceleration_structures: *const NonDisposableHandle,
                    query_type: NonDisposableHandle,
                    data_size: usize,
                    p_data: *mut c_void,
                    stride: usize,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkWriteAccelerationStructuresPropertiesKHR))
                }
                vkWriteAccelerationStructuresPropertiesKHR
            },
            vk_cmd_trace_rays_khr: {
                unsafe extern "system" fn vkCmdTraceRaysKHR(
                    command_buffer: NonDisposableHandle,
                    p_raygen_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    p_miss_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    p_hit_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    p_callable_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    width: u32,
                    height: u32,
                    depth: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdTraceRaysKHR))
                }
                vkCmdTraceRaysKHR
            },
            vk_cmd_trace_rays_nv: {
                unsafe extern "system" fn vkCmdTraceRaysNV(
                    command_buffer: NonDisposableHandle,
                    raygen_shader_binding_table_buffer: NonDisposableHandle,
                    raygen_shader_binding_offset: NonDisposableHandle,
                    miss_shader_binding_table_buffer: NonDisposableHandle,
                    miss_shader_binding_offset: NonDisposableHandle,
                    miss_shader_binding_stride: NonDisposableHandle,
                    hit_shader_binding_table_buffer: NonDisposableHandle,
                    hit_shader_binding_offset: NonDisposableHandle,
                    hit_shader_binding_stride: NonDisposableHandle,
                    callable_shader_binding_table_buffer: NonDisposableHandle,
                    callable_shader_binding_offset: NonDisposableHandle,
                    callable_shader_binding_stride: NonDisposableHandle,
                    width: u32,
                    height: u32,
                    depth: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdTraceRaysNV))
                }
                vkCmdTraceRaysNV
            },
            vk_get_ray_tracing_shader_group_handles_khr: {
                unsafe extern "system" fn vkGetRayTracingShaderGroupHandlesKHR(
                    device: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    first_group: u32,
                    group_count: u32,
                    data_size: usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRayTracingShaderGroupHandlesKHR))
                }
                vkGetRayTracingShaderGroupHandlesKHR
            },
            vk_get_ray_tracing_capture_replay_shader_group_handles_khr: {
                unsafe extern "system" fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
                    device: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    first_group: u32,
                    group_count: u32,
                    data_size: usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR))
                }
                vkGetRayTracingCaptureReplayShaderGroupHandlesKHR
            },
            vk_get_acceleration_structure_handle_nv: {
                unsafe extern "system" fn vkGetAccelerationStructureHandleNV(
                    device: NonDisposableHandle,
                    acceleration_structure: NonDisposableHandle,
                    data_size: usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetAccelerationStructureHandleNV))
                }
                vkGetAccelerationStructureHandleNV
            },
            vk_create_ray_tracing_pipelines_nv: {
                unsafe extern "system" fn vkCreateRayTracingPipelinesNV(
                    device: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    create_info_count: u32,
                    p_create_infos: *const VkRayTracingPipelineCreateInfoNV,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipelines: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateRayTracingPipelinesNV))
                }
                vkCreateRayTracingPipelinesNV
            },
            vk_create_ray_tracing_pipelines_khr: {
                unsafe extern "system" fn vkCreateRayTracingPipelinesKHR(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    create_info_count: u32,
                    p_create_infos: *const VkRayTracingPipelineCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipelines: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateRayTracingPipelinesKHR))
                }
                vkCreateRayTracingPipelinesKHR
            },
            vk_get_physical_device_cooperative_matrix_properties_nv: {
                unsafe extern "system" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkCooperativeMatrixPropertiesNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV))
                }
                vkGetPhysicalDeviceCooperativeMatrixPropertiesNV
            },
            vk_cmd_trace_rays_indirect_khr: {
                unsafe extern "system" fn vkCmdTraceRaysIndirectKHR(
                    command_buffer: NonDisposableHandle,
                    p_raygen_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    p_miss_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    p_hit_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    p_callable_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
                    indirect_device_address: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdTraceRaysIndirectKHR))
                }
                vkCmdTraceRaysIndirectKHR
            },
            vk_cmd_trace_rays_indirect2_khr: {
                unsafe extern "system" fn vkCmdTraceRaysIndirect2KHR(
                    command_buffer: NonDisposableHandle,
                    indirect_device_address: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdTraceRaysIndirect2KHR))
                }
                vkCmdTraceRaysIndirect2KHR
            },
            vk_get_device_acceleration_structure_compatibility_khr: {
                unsafe extern "system" fn vkGetDeviceAccelerationStructureCompatibilityKHR(
                    device: NonDisposableHandle,
                    p_version_info: *const VkAccelerationStructureVersionInfoKHR,
                    p_compatibility: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceAccelerationStructureCompatibilityKHR))
                }
                vkGetDeviceAccelerationStructureCompatibilityKHR
            },
            vk_get_ray_tracing_shader_group_stack_size_khr: {
                unsafe extern "system" fn vkGetRayTracingShaderGroupStackSizeKHR(
                    device: NonDisposableHandle,
                    pipeline: NonDisposableHandle,
                    group: u32,
                    group_shader: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetRayTracingShaderGroupStackSizeKHR))
                }
                vkGetRayTracingShaderGroupStackSizeKHR
            },
            vk_cmd_set_ray_tracing_pipeline_stack_size_khr: {
                unsafe extern "system" fn vkCmdSetRayTracingPipelineStackSizeKHR(
                    command_buffer: NonDisposableHandle,
                    pipeline_stack_size: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRayTracingPipelineStackSizeKHR))
                }
                vkCmdSetRayTracingPipelineStackSizeKHR
            },
            vk_get_image_view_handle_nvx: {
                unsafe extern "system" fn vkGetImageViewHandleNVX(
                    device: NonDisposableHandle,
                    p_info: *const VkImageViewHandleInfoNVX,
                ) -> u32 {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageViewHandleNVX))
                }
                vkGetImageViewHandleNVX
            },
            vk_get_image_view_address_nvx: {
                unsafe extern "system" fn vkGetImageViewAddressNVX(
                    device: NonDisposableHandle,
                    image_view: NonDisposableHandle,
                    p_properties: *mut VkImageViewAddressPropertiesNVX,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageViewAddressNVX))
                }
                vkGetImageViewAddressNVX
            },
            vk_get_physical_device_surface_present_modes2_ext: {
                unsafe extern "system" fn vkGetPhysicalDeviceSurfacePresentModes2EXT(
                    physical_device: NonDisposableHandle,
                    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
                    p_present_mode_count: *mut u32,
                    p_present_modes: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSurfacePresentModes2EXT))
                }
                vkGetPhysicalDeviceSurfacePresentModes2EXT
            },
            vk_get_device_group_surface_present_modes2_ext: {
                unsafe extern "system" fn vkGetDeviceGroupSurfacePresentModes2EXT(
                    device: NonDisposableHandle,
                    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
                    p_modes: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceGroupSurfacePresentModes2EXT))
                }
                vkGetDeviceGroupSurfacePresentModes2EXT
            },
            vk_acquire_full_screen_exclusive_mode_ext: {
                unsafe extern "system" fn vkAcquireFullScreenExclusiveModeEXT(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireFullScreenExclusiveModeEXT))
                }
                vkAcquireFullScreenExclusiveModeEXT
            },
            vk_release_full_screen_exclusive_mode_ext: {
                unsafe extern "system" fn vkReleaseFullScreenExclusiveModeEXT(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkReleaseFullScreenExclusiveModeEXT))
                }
                vkReleaseFullScreenExclusiveModeEXT
            },
            vk_enumerate_physical_device_queue_family_performance_query_counters_khr: {
                unsafe extern "system" fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
                    physical_device: NonDisposableHandle,
                    queue_family_index: u32,
                    p_counter_count: *mut u32,
                    p_counters: *mut VkPerformanceCounterKHR,
                    p_counter_descriptions: *mut VkPerformanceCounterDescriptionKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR))
                }
                vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
            },
            vk_get_physical_device_queue_family_performance_query_passes_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
                    physical_device: NonDisposableHandle,
                    p_performance_query_create_info: *const VkQueryPoolPerformanceCreateInfoKHR,
                    p_num_passes: *mut u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR))
                }
                vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
            },
            vk_acquire_profiling_lock_khr: {
                unsafe extern "system" fn vkAcquireProfilingLockKHR(
                    device: NonDisposableHandle,
                    p_info: *const VkAcquireProfilingLockInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireProfilingLockKHR))
                }
                vkAcquireProfilingLockKHR
            },
            vk_release_profiling_lock_khr: {
                unsafe extern "system" fn vkReleaseProfilingLockKHR(
                    device: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkReleaseProfilingLockKHR))
                }
                vkReleaseProfilingLockKHR
            },
            vk_get_image_drm_format_modifier_properties_ext: {
                unsafe extern "system" fn vkGetImageDrmFormatModifierPropertiesEXT(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_properties: *mut VkImageDrmFormatModifierPropertiesEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageDrmFormatModifierPropertiesEXT))
                }
                vkGetImageDrmFormatModifierPropertiesEXT
            },
            vk_get_buffer_opaque_capture_address: {
                unsafe extern "system" fn vkGetBufferOpaqueCaptureAddress(
                    device: NonDisposableHandle,
                    p_info: *const VkBufferDeviceAddressInfo,
                ) -> u64 {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetBufferOpaqueCaptureAddress))
                }
                vkGetBufferOpaqueCaptureAddress
            },
            vk_get_buffer_device_address: {
                unsafe extern "system" fn vkGetBufferDeviceAddress(
                    device: NonDisposableHandle,
                    p_info: *const VkBufferDeviceAddressInfo,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetBufferDeviceAddress))
                }
                vkGetBufferDeviceAddress
            },
            vk_create_headless_surface_ext: {
                unsafe extern "system" fn vkCreateHeadlessSurfaceEXT(
                    instance: NonDisposableHandle,
                    p_create_info: *const VkHeadlessSurfaceCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_surface: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateHeadlessSurfaceEXT))
                }
                vkCreateHeadlessSurfaceEXT
            },
            vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv: {
                unsafe extern "system" fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
                    physical_device: NonDisposableHandle,
                    p_combination_count: *mut u32,
                    p_combinations: *mut VkFramebufferMixedSamplesCombinationNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV))
                }
                vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
            },
            vk_initialize_performance_api_intel: {
                unsafe extern "system" fn vkInitializePerformanceApiINTEL(
                    device: NonDisposableHandle,
                    p_initialize_info: *const VkInitializePerformanceApiInfoINTEL,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkInitializePerformanceApiINTEL))
                }
                vkInitializePerformanceApiINTEL
            },
            vk_uninitialize_performance_api_intel: {
                unsafe extern "system" fn vkUninitializePerformanceApiINTEL(
                    device: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkUninitializePerformanceApiINTEL))
                }
                vkUninitializePerformanceApiINTEL
            },
            vk_cmd_set_performance_marker_intel: {
                unsafe extern "system" fn vkCmdSetPerformanceMarkerINTEL(
                    command_buffer: NonDisposableHandle,
                    p_marker_info: *const VkPerformanceMarkerInfoINTEL,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPerformanceMarkerINTEL))
                }
                vkCmdSetPerformanceMarkerINTEL
            },
            vk_cmd_set_performance_stream_marker_intel: {
                unsafe extern "system" fn vkCmdSetPerformanceStreamMarkerINTEL(
                    command_buffer: NonDisposableHandle,
                    p_marker_info: *const VkPerformanceStreamMarkerInfoINTEL,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPerformanceStreamMarkerINTEL))
                }
                vkCmdSetPerformanceStreamMarkerINTEL
            },
            vk_cmd_set_performance_override_intel: {
                unsafe extern "system" fn vkCmdSetPerformanceOverrideINTEL(
                    command_buffer: NonDisposableHandle,
                    p_override_info: *const VkPerformanceOverrideInfoINTEL,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPerformanceOverrideINTEL))
                }
                vkCmdSetPerformanceOverrideINTEL
            },
            vk_acquire_performance_configuration_intel: {
                unsafe extern "system" fn vkAcquirePerformanceConfigurationINTEL(
                    device: NonDisposableHandle,
                    p_acquire_info: *const VkPerformanceConfigurationAcquireInfoINTEL,
                    p_configuration: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquirePerformanceConfigurationINTEL))
                }
                vkAcquirePerformanceConfigurationINTEL
            },
            vk_release_performance_configuration_intel: {
                unsafe extern "system" fn vkReleasePerformanceConfigurationINTEL(
                    device: NonDisposableHandle,
                    configuration: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkReleasePerformanceConfigurationINTEL))
                }
                vkReleasePerformanceConfigurationINTEL
            },
            vk_queue_set_performance_configuration_intel: {
                unsafe extern "system" fn vkQueueSetPerformanceConfigurationINTEL(
                    queue: NonDisposableHandle,
                    configuration: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueSetPerformanceConfigurationINTEL))
                }
                vkQueueSetPerformanceConfigurationINTEL
            },
            vk_get_performance_parameter_intel: {
                unsafe extern "system" fn vkGetPerformanceParameterINTEL(
                    device: NonDisposableHandle,
                    parameter: NonDisposableHandle,
                    p_value: *mut VkPerformanceValueINTEL,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPerformanceParameterINTEL))
                }
                vkGetPerformanceParameterINTEL
            },
            vk_get_device_memory_opaque_capture_address: {
                unsafe extern "system" fn vkGetDeviceMemoryOpaqueCaptureAddress(
                    device: NonDisposableHandle,
                    p_info: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
                ) -> u64 {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceMemoryOpaqueCaptureAddress))
                }
                vkGetDeviceMemoryOpaqueCaptureAddress
            },
            vk_get_pipeline_executable_properties_khr: {
                unsafe extern "system" fn vkGetPipelineExecutablePropertiesKHR(
                    device: NonDisposableHandle,
                    p_pipeline_info: *const VkPipelineInfoKHR,
                    p_executable_count: *mut u32,
                    p_properties: *mut VkPipelineExecutablePropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelineExecutablePropertiesKHR))
                }
                vkGetPipelineExecutablePropertiesKHR
            },
            vk_get_pipeline_executable_statistics_khr: {
                unsafe extern "system" fn vkGetPipelineExecutableStatisticsKHR(
                    device: NonDisposableHandle,
                    p_executable_info: *const VkPipelineExecutableInfoKHR,
                    p_statistic_count: *mut u32,
                    p_statistics: *mut VkPipelineExecutableStatisticKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelineExecutableStatisticsKHR))
                }
                vkGetPipelineExecutableStatisticsKHR
            },
            vk_get_pipeline_executable_internal_representations_khr: {
                unsafe extern "system" fn vkGetPipelineExecutableInternalRepresentationsKHR(
                    device: NonDisposableHandle,
                    p_executable_info: *const VkPipelineExecutableInfoKHR,
                    p_internal_representation_count: *mut u32,
                    p_internal_representations: *mut VkPipelineExecutableInternalRepresentationKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelineExecutableInternalRepresentationsKHR))
                }
                vkGetPipelineExecutableInternalRepresentationsKHR
            },
            vk_cmd_set_line_stipple_khr: {
                unsafe extern "system" fn vkCmdSetLineStippleKHR(
                    command_buffer: NonDisposableHandle,
                    line_stipple_factor: u32,
                    line_stipple_pattern: u16,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetLineStippleKHR))
                }
                vkCmdSetLineStippleKHR
            },
            vk_get_physical_device_tool_properties: {
                unsafe extern "system" fn vkGetPhysicalDeviceToolProperties(
                    physical_device: NonDisposableHandle,
                    p_tool_count: *mut u32,
                    p_tool_properties: *mut VkPhysicalDeviceToolProperties,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceToolProperties))
                }
                vkGetPhysicalDeviceToolProperties
            },
            vk_create_acceleration_structure_khr: {
                unsafe extern "system" fn vkCreateAccelerationStructureKHR(
                    device: NonDisposableHandle,
                    p_create_info: *const VkAccelerationStructureCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_acceleration_structure: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateAccelerationStructureKHR))
                }
                vkCreateAccelerationStructureKHR
            },
            vk_cmd_build_acceleration_structures_khr: {
                unsafe extern "system" fn vkCmdBuildAccelerationStructuresKHR(
                    command_buffer: NonDisposableHandle,
                    info_count: u32,
                    p_infos: *const VkAccelerationStructureBuildGeometryInfoKHR,
                    pp_build_range_infos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBuildAccelerationStructuresKHR))
                }
                vkCmdBuildAccelerationStructuresKHR
            },
            vk_cmd_build_acceleration_structures_indirect_khr: {
                unsafe extern "system" fn vkCmdBuildAccelerationStructuresIndirectKHR(
                    command_buffer: NonDisposableHandle,
                    info_count: u32,
                    p_infos: *const VkAccelerationStructureBuildGeometryInfoKHR,
                    p_indirect_device_addresses: *const NonDisposableHandle,
                    p_indirect_strides: *const u32,
                    pp_max_primitive_counts: *const *const u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBuildAccelerationStructuresIndirectKHR))
                }
                vkCmdBuildAccelerationStructuresIndirectKHR
            },
            vk_build_acceleration_structures_khr: {
                unsafe extern "system" fn vkBuildAccelerationStructuresKHR(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    info_count: u32,
                    p_infos: *const VkAccelerationStructureBuildGeometryInfoKHR,
                    pp_build_range_infos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBuildAccelerationStructuresKHR))
                }
                vkBuildAccelerationStructuresKHR
            },
            vk_get_acceleration_structure_device_address_khr: {
                unsafe extern "system" fn vkGetAccelerationStructureDeviceAddressKHR(
                    device: NonDisposableHandle,
                    p_info: *const VkAccelerationStructureDeviceAddressInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetAccelerationStructureDeviceAddressKHR))
                }
                vkGetAccelerationStructureDeviceAddressKHR
            },
            vk_create_deferred_operation_khr: {
                unsafe extern "system" fn vkCreateDeferredOperationKHR(
                    device: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                    p_deferred_operation: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateDeferredOperationKHR))
                }
                vkCreateDeferredOperationKHR
            },
            vk_destroy_deferred_operation_khr: {
                unsafe extern "system" fn vkDestroyDeferredOperationKHR(
                    device: NonDisposableHandle,
                    operation: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyDeferredOperationKHR))
                }
                vkDestroyDeferredOperationKHR
            },
            vk_get_deferred_operation_max_concurrency_khr: {
                unsafe extern "system" fn vkGetDeferredOperationMaxConcurrencyKHR(
                    device: NonDisposableHandle,
                    operation: NonDisposableHandle,
                ) -> u32 {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeferredOperationMaxConcurrencyKHR))
                }
                vkGetDeferredOperationMaxConcurrencyKHR
            },
            vk_get_deferred_operation_result_khr: {
                unsafe extern "system" fn vkGetDeferredOperationResultKHR(
                    device: NonDisposableHandle,
                    operation: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeferredOperationResultKHR))
                }
                vkGetDeferredOperationResultKHR
            },
            vk_deferred_operation_join_khr: {
                unsafe extern "system" fn vkDeferredOperationJoinKHR(
                    device: NonDisposableHandle,
                    operation: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDeferredOperationJoinKHR))
                }
                vkDeferredOperationJoinKHR
            },
            vk_get_pipeline_indirect_memory_requirements_nv: {
                unsafe extern "system" fn vkGetPipelineIndirectMemoryRequirementsNV(
                    device: NonDisposableHandle,
                    p_create_info: *const VkComputePipelineCreateInfo,
                    p_memory_requirements: *mut VkMemoryRequirements2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelineIndirectMemoryRequirementsNV))
                }
                vkGetPipelineIndirectMemoryRequirementsNV
            },
            vk_get_pipeline_indirect_device_address_nv: {
                unsafe extern "system" fn vkGetPipelineIndirectDeviceAddressNV(
                    device: NonDisposableHandle,
                    p_info: *const VkPipelineIndirectDeviceAddressInfoNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelineIndirectDeviceAddressNV))
                }
                vkGetPipelineIndirectDeviceAddressNV
            },
            vk_cmd_set_cull_mode: {
                unsafe extern "system" fn vkCmdSetCullMode(
                    command_buffer: NonDisposableHandle,
                    cull_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCullMode))
                }
                vkCmdSetCullMode
            },
            vk_cmd_set_front_face: {
                unsafe extern "system" fn vkCmdSetFrontFace(
                    command_buffer: NonDisposableHandle,
                    front_face: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetFrontFace))
                }
                vkCmdSetFrontFace
            },
            vk_cmd_set_primitive_topology: {
                unsafe extern "system" fn vkCmdSetPrimitiveTopology(
                    command_buffer: NonDisposableHandle,
                    primitive_topology: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPrimitiveTopology))
                }
                vkCmdSetPrimitiveTopology
            },
            vk_cmd_set_viewport_with_count: {
                unsafe extern "system" fn vkCmdSetViewportWithCount(
                    command_buffer: NonDisposableHandle,
                    viewport_count: u32,
                    p_viewports: *const VkViewport,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetViewportWithCount))
                }
                vkCmdSetViewportWithCount
            },
            vk_cmd_set_scissor_with_count: {
                unsafe extern "system" fn vkCmdSetScissorWithCount(
                    command_buffer: NonDisposableHandle,
                    scissor_count: u32,
                    p_scissors: *const VkRect2D,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetScissorWithCount))
                }
                vkCmdSetScissorWithCount
            },
            vk_cmd_bind_index_buffer2_khr: {
                unsafe extern "system" fn vkCmdBindIndexBuffer2KHR(
                    command_buffer: NonDisposableHandle,
                    buffer: NonDisposableHandle,
                    offset: NonDisposableHandle,
                    size: NonDisposableHandle,
                    index_type: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindIndexBuffer2KHR))
                }
                vkCmdBindIndexBuffer2KHR
            },
            vk_cmd_bind_vertex_buffers2: {
                unsafe extern "system" fn vkCmdBindVertexBuffers2(
                    command_buffer: NonDisposableHandle,
                    first_binding: u32,
                    binding_count: u32,
                    p_buffers: *const NonDisposableHandle,
                    p_offsets: *const NonDisposableHandle,
                    p_sizes: *const NonDisposableHandle,
                    p_strides: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindVertexBuffers2))
                }
                vkCmdBindVertexBuffers2
            },
            vk_cmd_set_depth_test_enable: {
                unsafe extern "system" fn vkCmdSetDepthTestEnable(
                    command_buffer: NonDisposableHandle,
                    depth_test_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthTestEnable))
                }
                vkCmdSetDepthTestEnable
            },
            vk_cmd_set_depth_write_enable: {
                unsafe extern "system" fn vkCmdSetDepthWriteEnable(
                    command_buffer: NonDisposableHandle,
                    depth_write_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthWriteEnable))
                }
                vkCmdSetDepthWriteEnable
            },
            vk_cmd_set_depth_compare_op: {
                unsafe extern "system" fn vkCmdSetDepthCompareOp(
                    command_buffer: NonDisposableHandle,
                    depth_compare_op: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthCompareOp))
                }
                vkCmdSetDepthCompareOp
            },
            vk_cmd_set_depth_bounds_test_enable: {
                unsafe extern "system" fn vkCmdSetDepthBoundsTestEnable(
                    command_buffer: NonDisposableHandle,
                    depth_bounds_test_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthBoundsTestEnable))
                }
                vkCmdSetDepthBoundsTestEnable
            },
            vk_cmd_set_stencil_test_enable: {
                unsafe extern "system" fn vkCmdSetStencilTestEnable(
                    command_buffer: NonDisposableHandle,
                    stencil_test_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetStencilTestEnable))
                }
                vkCmdSetStencilTestEnable
            },
            vk_cmd_set_stencil_op: {
                unsafe extern "system" fn vkCmdSetStencilOp(
                    command_buffer: NonDisposableHandle,
                    face_mask: NonDisposableHandle,
                    fail_op: NonDisposableHandle,
                    pass_op: NonDisposableHandle,
                    depth_fail_op: NonDisposableHandle,
                    compare_op: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetStencilOp))
                }
                vkCmdSetStencilOp
            },
            vk_cmd_set_patch_control_points_ext: {
                unsafe extern "system" fn vkCmdSetPatchControlPointsEXT(
                    command_buffer: NonDisposableHandle,
                    patch_control_points: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPatchControlPointsEXT))
                }
                vkCmdSetPatchControlPointsEXT
            },
            vk_cmd_set_rasterizer_discard_enable: {
                unsafe extern "system" fn vkCmdSetRasterizerDiscardEnable(
                    command_buffer: NonDisposableHandle,
                    rasterizer_discard_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRasterizerDiscardEnable))
                }
                vkCmdSetRasterizerDiscardEnable
            },
            vk_cmd_set_depth_bias_enable: {
                unsafe extern "system" fn vkCmdSetDepthBiasEnable(
                    command_buffer: NonDisposableHandle,
                    depth_bias_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthBiasEnable))
                }
                vkCmdSetDepthBiasEnable
            },
            vk_cmd_set_logic_op_ext: {
                unsafe extern "system" fn vkCmdSetLogicOpEXT(
                    command_buffer: NonDisposableHandle,
                    logic_op: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetLogicOpEXT))
                }
                vkCmdSetLogicOpEXT
            },
            vk_cmd_set_primitive_restart_enable: {
                unsafe extern "system" fn vkCmdSetPrimitiveRestartEnable(
                    command_buffer: NonDisposableHandle,
                    primitive_restart_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPrimitiveRestartEnable))
                }
                vkCmdSetPrimitiveRestartEnable
            },
            vk_cmd_set_tessellation_domain_origin_ext: {
                unsafe extern "system" fn vkCmdSetTessellationDomainOriginEXT(
                    command_buffer: NonDisposableHandle,
                    domain_origin: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetTessellationDomainOriginEXT))
                }
                vkCmdSetTessellationDomainOriginEXT
            },
            vk_cmd_set_depth_clamp_enable_ext: {
                unsafe extern "system" fn vkCmdSetDepthClampEnableEXT(
                    command_buffer: NonDisposableHandle,
                    depth_clamp_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthClampEnableEXT))
                }
                vkCmdSetDepthClampEnableEXT
            },
            vk_cmd_set_polygon_mode_ext: {
                unsafe extern "system" fn vkCmdSetPolygonModeEXT(
                    command_buffer: NonDisposableHandle,
                    polygon_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetPolygonModeEXT))
                }
                vkCmdSetPolygonModeEXT
            },
            vk_cmd_set_rasterization_samples_ext: {
                unsafe extern "system" fn vkCmdSetRasterizationSamplesEXT(
                    command_buffer: NonDisposableHandle,
                    rasterization_samples: vk::SampleCountFlags,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRasterizationSamplesEXT))
                }
                vkCmdSetRasterizationSamplesEXT
            },
            vk_cmd_set_sample_mask_ext: {
                unsafe extern "system" fn vkCmdSetSampleMaskEXT(
                    command_buffer: NonDisposableHandle,
                    samples: vk::SampleCountFlags,
                    p_sample_mask: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetSampleMaskEXT))
                }
                vkCmdSetSampleMaskEXT
            },
            vk_cmd_set_alpha_to_coverage_enable_ext: {
                unsafe extern "system" fn vkCmdSetAlphaToCoverageEnableEXT(
                    command_buffer: NonDisposableHandle,
                    alpha_to_coverage_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetAlphaToCoverageEnableEXT))
                }
                vkCmdSetAlphaToCoverageEnableEXT
            },
            vk_cmd_set_alpha_to_one_enable_ext: {
                unsafe extern "system" fn vkCmdSetAlphaToOneEnableEXT(
                    command_buffer: NonDisposableHandle,
                    alpha_to_one_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetAlphaToOneEnableEXT))
                }
                vkCmdSetAlphaToOneEnableEXT
            },
            vk_cmd_set_logic_op_enable_ext: {
                unsafe extern "system" fn vkCmdSetLogicOpEnableEXT(
                    command_buffer: NonDisposableHandle,
                    logic_op_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetLogicOpEnableEXT))
                }
                vkCmdSetLogicOpEnableEXT
            },
            vk_cmd_set_color_blend_enable_ext: {
                unsafe extern "system" fn vkCmdSetColorBlendEnableEXT(
                    command_buffer: NonDisposableHandle,
                    first_attachment: u32,
                    attachment_count: u32,
                    p_color_blend_enables: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetColorBlendEnableEXT))
                }
                vkCmdSetColorBlendEnableEXT
            },
            vk_cmd_set_color_blend_equation_ext: {
                unsafe extern "system" fn vkCmdSetColorBlendEquationEXT(
                    command_buffer: NonDisposableHandle,
                    first_attachment: u32,
                    attachment_count: u32,
                    p_color_blend_equations: *const VkColorBlendEquationEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetColorBlendEquationEXT))
                }
                vkCmdSetColorBlendEquationEXT
            },
            vk_cmd_set_color_write_mask_ext: {
                unsafe extern "system" fn vkCmdSetColorWriteMaskEXT(
                    command_buffer: NonDisposableHandle,
                    first_attachment: u32,
                    attachment_count: u32,
                    p_color_write_masks: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetColorWriteMaskEXT))
                }
                vkCmdSetColorWriteMaskEXT
            },
            vk_cmd_set_rasterization_stream_ext: {
                unsafe extern "system" fn vkCmdSetRasterizationStreamEXT(
                    command_buffer: NonDisposableHandle,
                    rasterization_stream: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRasterizationStreamEXT))
                }
                vkCmdSetRasterizationStreamEXT
            },
            vk_cmd_set_conservative_rasterization_mode_ext: {
                unsafe extern "system" fn vkCmdSetConservativeRasterizationModeEXT(
                    command_buffer: NonDisposableHandle,
                    conservative_rasterization_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetConservativeRasterizationModeEXT))
                }
                vkCmdSetConservativeRasterizationModeEXT
            },
            vk_cmd_set_extra_primitive_overestimation_size_ext: {
                unsafe extern "system" fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(
                    command_buffer: NonDisposableHandle,
                    extra_primitive_overestimation_size: f32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetExtraPrimitiveOverestimationSizeEXT))
                }
                vkCmdSetExtraPrimitiveOverestimationSizeEXT
            },
            vk_cmd_set_depth_clip_enable_ext: {
                unsafe extern "system" fn vkCmdSetDepthClipEnableEXT(
                    command_buffer: NonDisposableHandle,
                    depth_clip_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthClipEnableEXT))
                }
                vkCmdSetDepthClipEnableEXT
            },
            vk_cmd_set_sample_locations_enable_ext: {
                unsafe extern "system" fn vkCmdSetSampleLocationsEnableEXT(
                    command_buffer: NonDisposableHandle,
                    sample_locations_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetSampleLocationsEnableEXT))
                }
                vkCmdSetSampleLocationsEnableEXT
            },
            vk_cmd_set_color_blend_advanced_ext: {
                unsafe extern "system" fn vkCmdSetColorBlendAdvancedEXT(
                    command_buffer: NonDisposableHandle,
                    first_attachment: u32,
                    attachment_count: u32,
                    p_color_blend_advanced: *const VkColorBlendAdvancedEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetColorBlendAdvancedEXT))
                }
                vkCmdSetColorBlendAdvancedEXT
            },
            vk_cmd_set_provoking_vertex_mode_ext: {
                unsafe extern "system" fn vkCmdSetProvokingVertexModeEXT(
                    command_buffer: NonDisposableHandle,
                    provoking_vertex_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetProvokingVertexModeEXT))
                }
                vkCmdSetProvokingVertexModeEXT
            },
            vk_cmd_set_line_rasterization_mode_ext: {
                unsafe extern "system" fn vkCmdSetLineRasterizationModeEXT(
                    command_buffer: NonDisposableHandle,
                    line_rasterization_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetLineRasterizationModeEXT))
                }
                vkCmdSetLineRasterizationModeEXT
            },
            vk_cmd_set_line_stipple_enable_ext: {
                unsafe extern "system" fn vkCmdSetLineStippleEnableEXT(
                    command_buffer: NonDisposableHandle,
                    stippled_line_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetLineStippleEnableEXT))
                }
                vkCmdSetLineStippleEnableEXT
            },
            vk_cmd_set_depth_clip_negative_one_to_one_ext: {
                unsafe extern "system" fn vkCmdSetDepthClipNegativeOneToOneEXT(
                    command_buffer: NonDisposableHandle,
                    negative_one_to_one: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthClipNegativeOneToOneEXT))
                }
                vkCmdSetDepthClipNegativeOneToOneEXT
            },
            vk_cmd_set_viewport_wscaling_enable_nv: {
                unsafe extern "system" fn vkCmdSetViewportWScalingEnableNV(
                    command_buffer: NonDisposableHandle,
                    viewport_wscaling_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetViewportWScalingEnableNV))
                }
                vkCmdSetViewportWScalingEnableNV
            },
            vk_cmd_set_viewport_swizzle_nv: {
                unsafe extern "system" fn vkCmdSetViewportSwizzleNV(
                    command_buffer: NonDisposableHandle,
                    first_viewport: u32,
                    viewport_count: u32,
                    p_viewport_swizzles: *const VkViewportSwizzleNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetViewportSwizzleNV))
                }
                vkCmdSetViewportSwizzleNV
            },
            vk_cmd_set_coverage_to_color_enable_nv: {
                unsafe extern "system" fn vkCmdSetCoverageToColorEnableNV(
                    command_buffer: NonDisposableHandle,
                    coverage_to_color_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoverageToColorEnableNV))
                }
                vkCmdSetCoverageToColorEnableNV
            },
            vk_cmd_set_coverage_to_color_location_nv: {
                unsafe extern "system" fn vkCmdSetCoverageToColorLocationNV(
                    command_buffer: NonDisposableHandle,
                    coverage_to_color_location: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoverageToColorLocationNV))
                }
                vkCmdSetCoverageToColorLocationNV
            },
            vk_cmd_set_coverage_modulation_mode_nv: {
                unsafe extern "system" fn vkCmdSetCoverageModulationModeNV(
                    command_buffer: NonDisposableHandle,
                    coverage_modulation_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoverageModulationModeNV))
                }
                vkCmdSetCoverageModulationModeNV
            },
            vk_cmd_set_coverage_modulation_table_enable_nv: {
                unsafe extern "system" fn vkCmdSetCoverageModulationTableEnableNV(
                    command_buffer: NonDisposableHandle,
                    coverage_modulation_table_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoverageModulationTableEnableNV))
                }
                vkCmdSetCoverageModulationTableEnableNV
            },
            vk_cmd_set_coverage_modulation_table_nv: {
                unsafe extern "system" fn vkCmdSetCoverageModulationTableNV(
                    command_buffer: NonDisposableHandle,
                    coverage_modulation_table_count: u32,
                    p_coverage_modulation_table: *const f32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoverageModulationTableNV))
                }
                vkCmdSetCoverageModulationTableNV
            },
            vk_cmd_set_shading_rate_image_enable_nv: {
                unsafe extern "system" fn vkCmdSetShadingRateImageEnableNV(
                    command_buffer: NonDisposableHandle,
                    shading_rate_image_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetShadingRateImageEnableNV))
                }
                vkCmdSetShadingRateImageEnableNV
            },
            vk_cmd_set_coverage_reduction_mode_nv: {
                unsafe extern "system" fn vkCmdSetCoverageReductionModeNV(
                    command_buffer: NonDisposableHandle,
                    coverage_reduction_mode: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetCoverageReductionModeNV))
                }
                vkCmdSetCoverageReductionModeNV
            },
            vk_cmd_set_representative_fragment_test_enable_nv: {
                unsafe extern "system" fn vkCmdSetRepresentativeFragmentTestEnableNV(
                    command_buffer: NonDisposableHandle,
                    representative_fragment_test_enable: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRepresentativeFragmentTestEnableNV))
                }
                vkCmdSetRepresentativeFragmentTestEnableNV
            },
            vk_create_private_data_slot: {
                unsafe extern "system" fn vkCreatePrivateDataSlot(
                    device: NonDisposableHandle,
                    p_create_info: *const VkPrivateDataSlotCreateInfo,
                    p_allocator: *const VkAllocationCallbacks,
                    p_private_data_slot: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreatePrivateDataSlot))
                }
                vkCreatePrivateDataSlot
            },
            vk_destroy_private_data_slot: {
                unsafe extern "system" fn vkDestroyPrivateDataSlot(
                    device: NonDisposableHandle,
                    private_data_slot: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyPrivateDataSlot))
                }
                vkDestroyPrivateDataSlot
            },
            vk_set_private_data: {
                unsafe extern "system" fn vkSetPrivateData(
                    device: NonDisposableHandle,
                    object_type: NonDisposableHandle,
                    object_handle: u64,
                    private_data_slot: NonDisposableHandle,
                    data: u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetPrivateData))
                }
                vkSetPrivateData
            },
            vk_get_private_data: {
                unsafe extern "system" fn vkGetPrivateData(
                    device: NonDisposableHandle,
                    object_type: NonDisposableHandle,
                    object_handle: u64,
                    private_data_slot: NonDisposableHandle,
                    p_data: *mut u64,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPrivateData))
                }
                vkGetPrivateData
            },
            vk_cmd_copy_buffer2: {
                unsafe extern "system" fn vkCmdCopyBuffer2(
                    command_buffer: NonDisposableHandle,
                    p_copy_buffer_info: *const VkCopyBufferInfo2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyBuffer2))
                }
                vkCmdCopyBuffer2
            },
            vk_cmd_copy_image2: {
                unsafe extern "system" fn vkCmdCopyImage2(
                    command_buffer: NonDisposableHandle,
                    p_copy_image_info: *const VkCopyImageInfo2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyImage2))
                }
                vkCmdCopyImage2
            },
            vk_cmd_blit_image2: {
                unsafe extern "system" fn vkCmdBlitImage2(
                    command_buffer: NonDisposableHandle,
                    p_blit_image_info: *const VkBlitImageInfo2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBlitImage2))
                }
                vkCmdBlitImage2
            },
            vk_cmd_copy_buffer_to_image2: {
                unsafe extern "system" fn vkCmdCopyBufferToImage2(
                    command_buffer: NonDisposableHandle,
                    p_copy_buffer_to_image_info: *const VkCopyBufferToImageInfo2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyBufferToImage2))
                }
                vkCmdCopyBufferToImage2
            },
            vk_cmd_copy_image_to_buffer2: {
                unsafe extern "system" fn vkCmdCopyImageToBuffer2(
                    command_buffer: NonDisposableHandle,
                    p_copy_image_to_buffer_info: *const VkCopyImageToBufferInfo2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyImageToBuffer2))
                }
                vkCmdCopyImageToBuffer2
            },
            vk_cmd_resolve_image2: {
                unsafe extern "system" fn vkCmdResolveImage2(
                    command_buffer: NonDisposableHandle,
                    p_resolve_image_info: *const VkResolveImageInfo2,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdResolveImage2))
                }
                vkCmdResolveImage2
            },
            vk_cmd_set_fragment_shading_rate_khr: {
                unsafe extern "system" fn vkCmdSetFragmentShadingRateKHR(
                    command_buffer: NonDisposableHandle,
                    p_fragment_size: *const VkExtent2D,
                    combiner_ops: *const [NonDisposableHandle; 2],
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetFragmentShadingRateKHR))
                }
                vkCmdSetFragmentShadingRateKHR
            },
            vk_get_physical_device_fragment_shading_rates_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceFragmentShadingRatesKHR(
                    physical_device: NonDisposableHandle,
                    p_fragment_shading_rate_count: *mut u32,
                    p_fragment_shading_rates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceFragmentShadingRatesKHR))
                }
                vkGetPhysicalDeviceFragmentShadingRatesKHR
            },
            vk_cmd_set_fragment_shading_rate_enum_nv: {
                unsafe extern "system" fn vkCmdSetFragmentShadingRateEnumNV(
                    command_buffer: NonDisposableHandle,
                    shading_rate: NonDisposableHandle,
                    combiner_ops: *const [NonDisposableHandle; 2],
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetFragmentShadingRateEnumNV))
                }
                vkCmdSetFragmentShadingRateEnumNV
            },
            vk_get_acceleration_structure_build_sizes_khr: {
                unsafe extern "system" fn vkGetAccelerationStructureBuildSizesKHR(
                    device: NonDisposableHandle,
                    build_type: NonDisposableHandle,
                    p_build_info: *const VkAccelerationStructureBuildGeometryInfoKHR,
                    p_max_primitive_counts: *const u32,
                    p_size_info: *mut VkAccelerationStructureBuildSizesInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetAccelerationStructureBuildSizesKHR))
                }
                vkGetAccelerationStructureBuildSizesKHR
            },
            vk_cmd_set_vertex_input_ext: {
                unsafe extern "system" fn vkCmdSetVertexInputEXT(
                    command_buffer: NonDisposableHandle,
                    vertex_binding_description_count: u32,
                    p_vertex_binding_descriptions: *const VkVertexInputBindingDescription2EXT,
                    vertex_attribute_description_count: u32,
                    p_vertex_attribute_descriptions: *const VkVertexInputAttributeDescription2EXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetVertexInputEXT))
                }
                vkCmdSetVertexInputEXT
            },
            vk_cmd_set_color_write_enable_ext: {
                unsafe extern "system" fn vkCmdSetColorWriteEnableEXT(
                    command_buffer: NonDisposableHandle,
                    attachment_count: u32,
                    p_color_write_enables: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetColorWriteEnableEXT))
                }
                vkCmdSetColorWriteEnableEXT
            },
            vk_cmd_set_event2: {
                unsafe extern "system" fn vkCmdSetEvent2(
                    command_buffer: NonDisposableHandle,
                    event: NonDisposableHandle,
                    p_dependency_info: *const VkDependencyInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetEvent2))
                }
                vkCmdSetEvent2
            },
            vk_cmd_reset_event2: {
                unsafe extern "system" fn vkCmdResetEvent2(
                    command_buffer: NonDisposableHandle,
                    event: NonDisposableHandle,
                    stage_mask: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdResetEvent2))
                }
                vkCmdResetEvent2
            },
            vk_cmd_wait_events2: {
                unsafe extern "system" fn vkCmdWaitEvents2(
                    command_buffer: NonDisposableHandle,
                    event_count: u32,
                    p_events: *const NonDisposableHandle,
                    p_dependency_infos: *const VkDependencyInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWaitEvents2))
                }
                vkCmdWaitEvents2
            },
            vk_cmd_pipeline_barrier2: {
                unsafe extern "system" fn vkCmdPipelineBarrier2(
                    command_buffer: NonDisposableHandle,
                    p_dependency_info: *const VkDependencyInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPipelineBarrier2))
                }
                vkCmdPipelineBarrier2
            },
            vk_queue_submit2: {
                unsafe extern "system" fn vkQueueSubmit2(
                    queue: NonDisposableHandle,
                    submit_count: u32,
                    p_submits: *const VkSubmitInfo2,
                    fence: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueSubmit2))
                }
                vkQueueSubmit2
            },
            vk_cmd_write_timestamp2: {
                unsafe extern "system" fn vkCmdWriteTimestamp2(
                    command_buffer: NonDisposableHandle,
                    stage: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    query: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteTimestamp2))
                }
                vkCmdWriteTimestamp2
            },
            vk_cmd_write_buffer_marker2_amd: {
                unsafe extern "system" fn vkCmdWriteBufferMarker2AMD(
                    command_buffer: NonDisposableHandle,
                    stage: NonDisposableHandle,
                    dst_buffer: NonDisposableHandle,
                    dst_offset: NonDisposableHandle,
                    marker: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteBufferMarker2AMD))
                }
                vkCmdWriteBufferMarker2AMD
            },
            vk_get_queue_checkpoint_data2_nv: {
                unsafe extern "system" fn vkGetQueueCheckpointData2NV(
                    queue: NonDisposableHandle,
                    p_checkpoint_data_count: *mut u32,
                    p_checkpoint_data: *mut VkCheckpointData2NV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetQueueCheckpointData2NV))
                }
                vkGetQueueCheckpointData2NV
            },
            vk_copy_memory_to_image_ext: {
                unsafe extern "system" fn vkCopyMemoryToImageEXT(
                    device: NonDisposableHandle,
                    p_copy_memory_to_image_info: *const VkCopyMemoryToImageInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyMemoryToImageEXT))
                }
                vkCopyMemoryToImageEXT
            },
            vk_copy_image_to_memory_ext: {
                unsafe extern "system" fn vkCopyImageToMemoryEXT(
                    device: NonDisposableHandle,
                    p_copy_image_to_memory_info: *const VkCopyImageToMemoryInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyImageToMemoryEXT))
                }
                vkCopyImageToMemoryEXT
            },
            vk_copy_image_to_image_ext: {
                unsafe extern "system" fn vkCopyImageToImageEXT(
                    device: NonDisposableHandle,
                    p_copy_image_to_image_info: *const VkCopyImageToImageInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyImageToImageEXT))
                }
                vkCopyImageToImageEXT
            },
            vk_transition_image_layout_ext: {
                unsafe extern "system" fn vkTransitionImageLayoutEXT(
                    device: NonDisposableHandle,
                    transition_count: u32,
                    p_transitions: *const VkHostImageLayoutTransitionInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkTransitionImageLayoutEXT))
                }
                vkTransitionImageLayoutEXT
            },
            vk_get_physical_device_video_capabilities_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceVideoCapabilitiesKHR(
                    physical_device: NonDisposableHandle,
                    p_video_profile: *const VkVideoProfileInfoKHR,
                    p_capabilities: *mut VkVideoCapabilitiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceVideoCapabilitiesKHR))
                }
                vkGetPhysicalDeviceVideoCapabilitiesKHR
            },
            vk_get_physical_device_video_format_properties_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(
                    physical_device: NonDisposableHandle,
                    p_video_format_info: *const VkPhysicalDeviceVideoFormatInfoKHR,
                    p_video_format_property_count: *mut u32,
                    p_video_format_properties: *mut VkVideoFormatPropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceVideoFormatPropertiesKHR))
                }
                vkGetPhysicalDeviceVideoFormatPropertiesKHR
            },
            vk_get_physical_device_video_encode_quality_level_properties_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
                    physical_device: NonDisposableHandle,
                    p_quality_level_info: *const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
                    p_quality_level_properties: *mut VkVideoEncodeQualityLevelPropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR))
                }
                vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR
            },
            vk_create_video_session_khr: {
                unsafe extern "system" fn vkCreateVideoSessionKHR(
                    device: NonDisposableHandle,
                    p_create_info: *const VkVideoSessionCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_video_session: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateVideoSessionKHR))
                }
                vkCreateVideoSessionKHR
            },
            vk_destroy_video_session_khr: {
                unsafe extern "system" fn vkDestroyVideoSessionKHR(
                    device: NonDisposableHandle,
                    video_session: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyVideoSessionKHR))
                }
                vkDestroyVideoSessionKHR
            },
            vk_create_video_session_parameters_khr: {
                unsafe extern "system" fn vkCreateVideoSessionParametersKHR(
                    device: NonDisposableHandle,
                    p_create_info: *const VkVideoSessionParametersCreateInfoKHR,
                    p_allocator: *const VkAllocationCallbacks,
                    p_video_session_parameters: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateVideoSessionParametersKHR))
                }
                vkCreateVideoSessionParametersKHR
            },
            vk_update_video_session_parameters_khr: {
                unsafe extern "system" fn vkUpdateVideoSessionParametersKHR(
                    device: NonDisposableHandle,
                    video_session_parameters: NonDisposableHandle,
                    p_update_info: *const VkVideoSessionParametersUpdateInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkUpdateVideoSessionParametersKHR))
                }
                vkUpdateVideoSessionParametersKHR
            },
            vk_get_encoded_video_session_parameters_khr: {
                unsafe extern "system" fn vkGetEncodedVideoSessionParametersKHR(
                    device: NonDisposableHandle,
                    p_video_session_parameters_info: *const VkVideoEncodeSessionParametersGetInfoKHR,
                    p_feedback_info: *mut VkVideoEncodeSessionParametersFeedbackInfoKHR,
                    p_data_size: *mut usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetEncodedVideoSessionParametersKHR))
                }
                vkGetEncodedVideoSessionParametersKHR
            },
            vk_destroy_video_session_parameters_khr: {
                unsafe extern "system" fn vkDestroyVideoSessionParametersKHR(
                    device: NonDisposableHandle,
                    video_session_parameters: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyVideoSessionParametersKHR))
                }
                vkDestroyVideoSessionParametersKHR
            },
            vk_get_video_session_memory_requirements_khr: {
                unsafe extern "system" fn vkGetVideoSessionMemoryRequirementsKHR(
                    device: NonDisposableHandle,
                    video_session: NonDisposableHandle,
                    p_memory_requirements_count: *mut u32,
                    p_memory_requirements: *mut VkVideoSessionMemoryRequirementsKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetVideoSessionMemoryRequirementsKHR))
                }
                vkGetVideoSessionMemoryRequirementsKHR
            },
            vk_bind_video_session_memory_khr: {
                unsafe extern "system" fn vkBindVideoSessionMemoryKHR(
                    device: NonDisposableHandle,
                    video_session: NonDisposableHandle,
                    bind_session_memory_info_count: u32,
                    p_bind_session_memory_infos: *const VkBindVideoSessionMemoryInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindVideoSessionMemoryKHR))
                }
                vkBindVideoSessionMemoryKHR
            },
            vk_cmd_decode_video_khr: {
                unsafe extern "system" fn vkCmdDecodeVideoKHR(
                    command_buffer: NonDisposableHandle,
                    p_decode_info: *const VkVideoDecodeInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDecodeVideoKHR))
                }
                vkCmdDecodeVideoKHR
            },
            vk_cmd_begin_video_coding_khr: {
                unsafe extern "system" fn vkCmdBeginVideoCodingKHR(
                    command_buffer: NonDisposableHandle,
                    p_begin_info: *const VkVideoBeginCodingInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginVideoCodingKHR))
                }
                vkCmdBeginVideoCodingKHR
            },
            vk_cmd_control_video_coding_khr: {
                unsafe extern "system" fn vkCmdControlVideoCodingKHR(
                    command_buffer: NonDisposableHandle,
                    p_coding_control_info: *const VkVideoCodingControlInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdControlVideoCodingKHR))
                }
                vkCmdControlVideoCodingKHR
            },
            vk_cmd_end_video_coding_khr: {
                unsafe extern "system" fn vkCmdEndVideoCodingKHR(
                    command_buffer: NonDisposableHandle,
                    p_end_coding_info: *const VkVideoEndCodingInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndVideoCodingKHR))
                }
                vkCmdEndVideoCodingKHR
            },
            vk_cmd_encode_video_khr: {
                unsafe extern "system" fn vkCmdEncodeVideoKHR(
                    command_buffer: NonDisposableHandle,
                    p_encode_info: *const VkVideoEncodeInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEncodeVideoKHR))
                }
                vkCmdEncodeVideoKHR
            },
            vk_cmd_decompress_memory_nv: {
                unsafe extern "system" fn vkCmdDecompressMemoryNV(
                    command_buffer: NonDisposableHandle,
                    decompress_region_count: u32,
                    p_decompress_memory_regions: *const VkDecompressMemoryRegionNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDecompressMemoryNV))
                }
                vkCmdDecompressMemoryNV
            },
            vk_cmd_decompress_memory_indirect_count_nv: {
                unsafe extern "system" fn vkCmdDecompressMemoryIndirectCountNV(
                    command_buffer: NonDisposableHandle,
                    indirect_commands_address: NonDisposableHandle,
                    indirect_commands_count_address: NonDisposableHandle,
                    stride: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDecompressMemoryIndirectCountNV))
                }
                vkCmdDecompressMemoryIndirectCountNV
            },
            vk_create_cu_module_nvx: {
                unsafe extern "system" fn vkCreateCuModuleNVX(
                    device: NonDisposableHandle,
                    p_create_info: *const VkCuModuleCreateInfoNVX,
                    p_allocator: *const VkAllocationCallbacks,
                    p_module: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateCuModuleNVX))
                }
                vkCreateCuModuleNVX
            },
            vk_create_cu_function_nvx: {
                unsafe extern "system" fn vkCreateCuFunctionNVX(
                    device: NonDisposableHandle,
                    p_create_info: *const VkCuFunctionCreateInfoNVX,
                    p_allocator: *const VkAllocationCallbacks,
                    p_function: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateCuFunctionNVX))
                }
                vkCreateCuFunctionNVX
            },
            vk_destroy_cu_module_nvx: {
                unsafe extern "system" fn vkDestroyCuModuleNVX(
                    device: NonDisposableHandle,
                    module: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyCuModuleNVX))
                }
                vkDestroyCuModuleNVX
            },
            vk_destroy_cu_function_nvx: {
                unsafe extern "system" fn vkDestroyCuFunctionNVX(
                    device: NonDisposableHandle,
                    function: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyCuFunctionNVX))
                }
                vkDestroyCuFunctionNVX
            },
            vk_cmd_cu_launch_kernel_nvx: {
                unsafe extern "system" fn vkCmdCuLaunchKernelNVX(
                    command_buffer: NonDisposableHandle,
                    p_launch_info: *const VkCuLaunchInfoNVX,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCuLaunchKernelNVX))
                }
                vkCmdCuLaunchKernelNVX
            },
            vk_get_descriptor_set_layout_size_ext: {
                unsafe extern "system" fn vkGetDescriptorSetLayoutSizeEXT(
                    device: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    p_layout_size_in_bytes: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDescriptorSetLayoutSizeEXT))
                }
                vkGetDescriptorSetLayoutSizeEXT
            },
            vk_get_descriptor_set_layout_binding_offset_ext: {
                unsafe extern "system" fn vkGetDescriptorSetLayoutBindingOffsetEXT(
                    device: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    binding: u32,
                    p_offset: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDescriptorSetLayoutBindingOffsetEXT))
                }
                vkGetDescriptorSetLayoutBindingOffsetEXT
            },
            vk_get_descriptor_ext: {
                unsafe extern "system" fn vkGetDescriptorEXT(
                    device: NonDisposableHandle,
                    p_descriptor_info: *const VkDescriptorGetInfoEXT,
                    data_size: usize,
                    p_descriptor: *mut c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDescriptorEXT))
                }
                vkGetDescriptorEXT
            },
            vk_cmd_bind_descriptor_buffers_ext: {
                unsafe extern "system" fn vkCmdBindDescriptorBuffersEXT(
                    command_buffer: NonDisposableHandle,
                    buffer_count: u32,
                    p_binding_infos: *const VkDescriptorBufferBindingInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindDescriptorBuffersEXT))
                }
                vkCmdBindDescriptorBuffersEXT
            },
            vk_cmd_set_descriptor_buffer_offsets_ext: {
                unsafe extern "system" fn vkCmdSetDescriptorBufferOffsetsEXT(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    first_set: u32,
                    set_count: u32,
                    p_buffer_indices: *const u32,
                    p_offsets: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDescriptorBufferOffsetsEXT))
                }
                vkCmdSetDescriptorBufferOffsetsEXT
            },
            vk_cmd_bind_descriptor_buffer_embedded_samplers_ext: {
                unsafe extern "system" fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
                    command_buffer: NonDisposableHandle,
                    pipeline_bind_point: NonDisposableHandle,
                    layout: NonDisposableHandle,
                    set: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindDescriptorBufferEmbeddedSamplersEXT))
                }
                vkCmdBindDescriptorBufferEmbeddedSamplersEXT
            },
            vk_get_buffer_opaque_capture_descriptor_data_ext: {
                unsafe extern "system" fn vkGetBufferOpaqueCaptureDescriptorDataEXT(
                    device: NonDisposableHandle,
                    p_info: *const VkBufferCaptureDescriptorDataInfoEXT,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetBufferOpaqueCaptureDescriptorDataEXT))
                }
                vkGetBufferOpaqueCaptureDescriptorDataEXT
            },
            vk_get_image_opaque_capture_descriptor_data_ext: {
                unsafe extern "system" fn vkGetImageOpaqueCaptureDescriptorDataEXT(
                    device: NonDisposableHandle,
                    p_info: *const VkImageCaptureDescriptorDataInfoEXT,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageOpaqueCaptureDescriptorDataEXT))
                }
                vkGetImageOpaqueCaptureDescriptorDataEXT
            },
            vk_get_image_view_opaque_capture_descriptor_data_ext: {
                unsafe extern "system" fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(
                    device: NonDisposableHandle,
                    p_info: *const VkImageViewCaptureDescriptorDataInfoEXT,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageViewOpaqueCaptureDescriptorDataEXT))
                }
                vkGetImageViewOpaqueCaptureDescriptorDataEXT
            },
            vk_get_sampler_opaque_capture_descriptor_data_ext: {
                unsafe extern "system" fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(
                    device: NonDisposableHandle,
                    p_info: *const VkSamplerCaptureDescriptorDataInfoEXT,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetSamplerOpaqueCaptureDescriptorDataEXT))
                }
                vkGetSamplerOpaqueCaptureDescriptorDataEXT
            },
            vk_get_acceleration_structure_opaque_capture_descriptor_data_ext: {
                unsafe extern "system" fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
                    device: NonDisposableHandle,
                    p_info: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT))
                }
                vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT
            },
            vk_set_device_memory_priority_ext: {
                unsafe extern "system" fn vkSetDeviceMemoryPriorityEXT(
                    device: NonDisposableHandle,
                    memory: NonDisposableHandle,
                    priority: f32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetDeviceMemoryPriorityEXT))
                }
                vkSetDeviceMemoryPriorityEXT
            },
            vk_acquire_drm_display_ext: {
                unsafe extern "system" fn vkAcquireDrmDisplayEXT(
                    physical_device: NonDisposableHandle,
                    drm_fd: i32,
                    display: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkAcquireDrmDisplayEXT))
                }
                vkAcquireDrmDisplayEXT
            },
            vk_get_drm_display_ext: {
                unsafe extern "system" fn vkGetDrmDisplayEXT(
                    physical_device: NonDisposableHandle,
                    drm_fd: i32,
                    connector_id: u32,
                    display: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDrmDisplayEXT))
                }
                vkGetDrmDisplayEXT
            },
            vk_wait_for_present_khr: {
                unsafe extern "system" fn vkWaitForPresentKHR(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    present_id: u64,
                    timeout: u64,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkWaitForPresentKHR))
                }
                vkWaitForPresentKHR
            },
            vk_create_buffer_collection_fuchsia: {
                unsafe extern "system" fn vkCreateBufferCollectionFUCHSIA(
                    device: NonDisposableHandle,
                    p_create_info: *const VkBufferCollectionCreateInfoFUCHSIA,
                    p_allocator: *const VkAllocationCallbacks,
                    p_collection: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateBufferCollectionFUCHSIA))
                }
                vkCreateBufferCollectionFUCHSIA
            },
            vk_set_buffer_collection_buffer_constraints_fuchsia: {
                unsafe extern "system" fn vkSetBufferCollectionBufferConstraintsFUCHSIA(
                    device: NonDisposableHandle,
                    collection: NonDisposableHandle,
                    p_buffer_constraints_info: *const VkBufferConstraintsInfoFUCHSIA,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetBufferCollectionBufferConstraintsFUCHSIA))
                }
                vkSetBufferCollectionBufferConstraintsFUCHSIA
            },
            vk_set_buffer_collection_image_constraints_fuchsia: {
                unsafe extern "system" fn vkSetBufferCollectionImageConstraintsFUCHSIA(
                    device: NonDisposableHandle,
                    collection: NonDisposableHandle,
                    p_image_constraints_info: *const VkImageConstraintsInfoFUCHSIA,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetBufferCollectionImageConstraintsFUCHSIA))
                }
                vkSetBufferCollectionImageConstraintsFUCHSIA
            },
            vk_destroy_buffer_collection_fuchsia: {
                unsafe extern "system" fn vkDestroyBufferCollectionFUCHSIA(
                    device: NonDisposableHandle,
                    collection: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyBufferCollectionFUCHSIA))
                }
                vkDestroyBufferCollectionFUCHSIA
            },
            vk_get_buffer_collection_properties_fuchsia: {
                unsafe extern "system" fn vkGetBufferCollectionPropertiesFUCHSIA(
                    device: NonDisposableHandle,
                    collection: NonDisposableHandle,
                    p_properties: *mut VkBufferCollectionPropertiesFUCHSIA,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetBufferCollectionPropertiesFUCHSIA))
                }
                vkGetBufferCollectionPropertiesFUCHSIA
            },
            vk_create_cuda_module_nv: {
                unsafe extern "system" fn vkCreateCudaModuleNV(
                    device: NonDisposableHandle,
                    p_create_info: *const VkCudaModuleCreateInfoNV,
                    p_allocator: *const VkAllocationCallbacks,
                    p_module: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateCudaModuleNV))
                }
                vkCreateCudaModuleNV
            },
            vk_get_cuda_module_cache_nv: {
                unsafe extern "system" fn vkGetCudaModuleCacheNV(
                    device: NonDisposableHandle,
                    module: NonDisposableHandle,
                    p_cache_size: *mut usize,
                    p_cache_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetCudaModuleCacheNV))
                }
                vkGetCudaModuleCacheNV
            },
            vk_create_cuda_function_nv: {
                unsafe extern "system" fn vkCreateCudaFunctionNV(
                    device: NonDisposableHandle,
                    p_create_info: *const VkCudaFunctionCreateInfoNV,
                    p_allocator: *const VkAllocationCallbacks,
                    p_function: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateCudaFunctionNV))
                }
                vkCreateCudaFunctionNV
            },
            vk_destroy_cuda_module_nv: {
                unsafe extern "system" fn vkDestroyCudaModuleNV(
                    device: NonDisposableHandle,
                    module: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyCudaModuleNV))
                }
                vkDestroyCudaModuleNV
            },
            vk_destroy_cuda_function_nv: {
                unsafe extern "system" fn vkDestroyCudaFunctionNV(
                    device: NonDisposableHandle,
                    function: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyCudaFunctionNV))
                }
                vkDestroyCudaFunctionNV
            },
            vk_cmd_cuda_launch_kernel_nv: {
                unsafe extern "system" fn vkCmdCudaLaunchKernelNV(
                    command_buffer: NonDisposableHandle,
                    p_launch_info: *const VkCudaLaunchInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCudaLaunchKernelNV))
                }
                vkCmdCudaLaunchKernelNV
            },
            vk_cmd_begin_rendering: {
                unsafe extern "system" fn vkCmdBeginRendering(
                    command_buffer: NonDisposableHandle,
                    p_rendering_info: *const VkRenderingInfo,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBeginRendering))
                }
                vkCmdBeginRendering
            },
            vk_cmd_end_rendering: {
                unsafe extern "system" fn vkCmdEndRendering(
                    command_buffer: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdEndRendering))
                }
                vkCmdEndRendering
            },
            vk_get_descriptor_set_layout_host_mapping_info_valve: {
                unsafe extern "system" fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(
                    device: NonDisposableHandle,
                    p_binding_reference: *const VkDescriptorSetBindingReferenceVALVE,
                    p_host_mapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDescriptorSetLayoutHostMappingInfoVALVE))
                }
                vkGetDescriptorSetLayoutHostMappingInfoVALVE
            },
            vk_get_descriptor_set_host_mapping_valve: {
                unsafe extern "system" fn vkGetDescriptorSetHostMappingVALVE(
                    device: NonDisposableHandle,
                    descriptor_set: NonDisposableHandle,
                    pp_data: *mut *mut c_void,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDescriptorSetHostMappingVALVE))
                }
                vkGetDescriptorSetHostMappingVALVE
            },
            vk_create_micromap_ext: {
                unsafe extern "system" fn vkCreateMicromapEXT(
                    device: NonDisposableHandle,
                    p_create_info: *const VkMicromapCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_micromap: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateMicromapEXT))
                }
                vkCreateMicromapEXT
            },
            vk_cmd_build_micromaps_ext: {
                unsafe extern "system" fn vkCmdBuildMicromapsEXT(
                    command_buffer: NonDisposableHandle,
                    info_count: u32,
                    p_infos: *const VkMicromapBuildInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBuildMicromapsEXT))
                }
                vkCmdBuildMicromapsEXT
            },
            vk_build_micromaps_ext: {
                unsafe extern "system" fn vkBuildMicromapsEXT(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    info_count: u32,
                    p_infos: *const VkMicromapBuildInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBuildMicromapsEXT))
                }
                vkBuildMicromapsEXT
            },
            vk_destroy_micromap_ext: {
                unsafe extern "system" fn vkDestroyMicromapEXT(
                    device: NonDisposableHandle,
                    micromap: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyMicromapEXT))
                }
                vkDestroyMicromapEXT
            },
            vk_cmd_copy_micromap_ext: {
                unsafe extern "system" fn vkCmdCopyMicromapEXT(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkCopyMicromapInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyMicromapEXT))
                }
                vkCmdCopyMicromapEXT
            },
            vk_copy_micromap_ext: {
                unsafe extern "system" fn vkCopyMicromapEXT(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    p_info: *const VkCopyMicromapInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyMicromapEXT))
                }
                vkCopyMicromapEXT
            },
            vk_cmd_copy_micromap_to_memory_ext: {
                unsafe extern "system" fn vkCmdCopyMicromapToMemoryEXT(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkCopyMicromapToMemoryInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyMicromapToMemoryEXT))
                }
                vkCmdCopyMicromapToMemoryEXT
            },
            vk_copy_micromap_to_memory_ext: {
                unsafe extern "system" fn vkCopyMicromapToMemoryEXT(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    p_info: *const VkCopyMicromapToMemoryInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyMicromapToMemoryEXT))
                }
                vkCopyMicromapToMemoryEXT
            },
            vk_cmd_copy_memory_to_micromap_ext: {
                unsafe extern "system" fn vkCmdCopyMemoryToMicromapEXT(
                    command_buffer: NonDisposableHandle,
                    p_info: *const VkCopyMemoryToMicromapInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdCopyMemoryToMicromapEXT))
                }
                vkCmdCopyMemoryToMicromapEXT
            },
            vk_copy_memory_to_micromap_ext: {
                unsafe extern "system" fn vkCopyMemoryToMicromapEXT(
                    device: NonDisposableHandle,
                    deferred_operation: NonDisposableHandle,
                    p_info: *const VkCopyMemoryToMicromapInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCopyMemoryToMicromapEXT))
                }
                vkCopyMemoryToMicromapEXT
            },
            vk_cmd_write_micromaps_properties_ext: {
                unsafe extern "system" fn vkCmdWriteMicromapsPropertiesEXT(
                    command_buffer: NonDisposableHandle,
                    micromap_count: u32,
                    p_micromaps: *const NonDisposableHandle,
                    query_type: NonDisposableHandle,
                    query_pool: NonDisposableHandle,
                    first_query: u32,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdWriteMicromapsPropertiesEXT))
                }
                vkCmdWriteMicromapsPropertiesEXT
            },
            vk_write_micromaps_properties_ext: {
                unsafe extern "system" fn vkWriteMicromapsPropertiesEXT(
                    device: NonDisposableHandle,
                    micromap_count: u32,
                    p_micromaps: *const NonDisposableHandle,
                    query_type: NonDisposableHandle,
                    data_size: usize,
                    p_data: *mut c_void,
                    stride: usize,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkWriteMicromapsPropertiesEXT))
                }
                vkWriteMicromapsPropertiesEXT
            },
            vk_get_device_micromap_compatibility_ext: {
                unsafe extern "system" fn vkGetDeviceMicromapCompatibilityEXT(
                    device: NonDisposableHandle,
                    p_version_info: *const VkMicromapVersionInfoEXT,
                    p_compatibility: *mut NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceMicromapCompatibilityEXT))
                }
                vkGetDeviceMicromapCompatibilityEXT
            },
            vk_get_micromap_build_sizes_ext: {
                unsafe extern "system" fn vkGetMicromapBuildSizesEXT(
                    device: NonDisposableHandle,
                    build_type: NonDisposableHandle,
                    p_build_info: *const VkMicromapBuildInfoEXT,
                    p_size_info: *mut VkMicromapBuildSizesInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetMicromapBuildSizesEXT))
                }
                vkGetMicromapBuildSizesEXT
            },
            vk_get_shader_module_identifier_ext: {
                unsafe extern "system" fn vkGetShaderModuleIdentifierEXT(
                    device: NonDisposableHandle,
                    shader_module: NonDisposableHandle,
                    p_identifier: *mut VkShaderModuleIdentifierEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetShaderModuleIdentifierEXT))
                }
                vkGetShaderModuleIdentifierEXT
            },
            vk_get_shader_module_create_info_identifier_ext: {
                unsafe extern "system" fn vkGetShaderModuleCreateInfoIdentifierEXT(
                    device: NonDisposableHandle,
                    p_create_info: *const VkShaderModuleCreateInfo,
                    p_identifier: *mut VkShaderModuleIdentifierEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetShaderModuleCreateInfoIdentifierEXT))
                }
                vkGetShaderModuleCreateInfoIdentifierEXT
            },
            vk_get_image_subresource_layout2_khr: {
                unsafe extern "system" fn vkGetImageSubresourceLayout2KHR(
                    device: NonDisposableHandle,
                    image: NonDisposableHandle,
                    p_subresource: *const VkImageSubresource2KHR,
                    p_layout: *mut VkSubresourceLayout2KHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetImageSubresourceLayout2KHR))
                }
                vkGetImageSubresourceLayout2KHR
            },
            vk_get_pipeline_properties_ext: {
                unsafe extern "system" fn vkGetPipelinePropertiesEXT(
                    device: NonDisposableHandle,
                    p_pipeline_info: *const NonDisposableHandle,
                    p_pipeline_properties: *mut VkBaseOutStructure,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPipelinePropertiesEXT))
                }
                vkGetPipelinePropertiesEXT
            },
            vk_export_metal_objects_ext: {
                unsafe extern "system" fn vkExportMetalObjectsEXT(
                    device: NonDisposableHandle,
                    p_metal_objects_info: *mut VkExportMetalObjectsInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkExportMetalObjectsEXT))
                }
                vkExportMetalObjectsEXT
            },
            vk_get_framebuffer_tile_properties_qcom: {
                unsafe extern "system" fn vkGetFramebufferTilePropertiesQCOM(
                    device: NonDisposableHandle,
                    framebuffer: NonDisposableHandle,
                    p_properties_count: *mut u32,
                    p_properties: *mut VkTilePropertiesQCOM,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetFramebufferTilePropertiesQCOM))
                }
                vkGetFramebufferTilePropertiesQCOM
            },
            vk_get_dynamic_rendering_tile_properties_qcom: {
                unsafe extern "system" fn vkGetDynamicRenderingTilePropertiesQCOM(
                    device: NonDisposableHandle,
                    p_rendering_info: *const VkRenderingInfo,
                    p_properties: *mut VkTilePropertiesQCOM,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDynamicRenderingTilePropertiesQCOM))
                }
                vkGetDynamicRenderingTilePropertiesQCOM
            },
            vk_get_physical_device_optical_flow_image_formats_nv: {
                unsafe extern "system" fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
                    physical_device: NonDisposableHandle,
                    p_optical_flow_image_format_info: *const VkOpticalFlowImageFormatInfoNV,
                    p_format_count: *mut u32,
                    p_image_format_properties: *mut VkOpticalFlowImageFormatPropertiesNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceOpticalFlowImageFormatsNV))
                }
                vkGetPhysicalDeviceOpticalFlowImageFormatsNV
            },
            vk_create_optical_flow_session_nv: {
                unsafe extern "system" fn vkCreateOpticalFlowSessionNV(
                    device: NonDisposableHandle,
                    p_create_info: *const VkOpticalFlowSessionCreateInfoNV,
                    p_allocator: *const VkAllocationCallbacks,
                    p_session: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateOpticalFlowSessionNV))
                }
                vkCreateOpticalFlowSessionNV
            },
            vk_destroy_optical_flow_session_nv: {
                unsafe extern "system" fn vkDestroyOpticalFlowSessionNV(
                    device: NonDisposableHandle,
                    session: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyOpticalFlowSessionNV))
                }
                vkDestroyOpticalFlowSessionNV
            },
            vk_bind_optical_flow_session_image_nv: {
                unsafe extern "system" fn vkBindOpticalFlowSessionImageNV(
                    device: NonDisposableHandle,
                    session: NonDisposableHandle,
                    binding_point: NonDisposableHandle,
                    view: NonDisposableHandle,
                    layout: NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkBindOpticalFlowSessionImageNV))
                }
                vkBindOpticalFlowSessionImageNV
            },
            vk_cmd_optical_flow_execute_nv: {
                unsafe extern "system" fn vkCmdOpticalFlowExecuteNV(
                    command_buffer: NonDisposableHandle,
                    session: NonDisposableHandle,
                    p_execute_info: *const VkOpticalFlowExecuteInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdOpticalFlowExecuteNV))
                }
                vkCmdOpticalFlowExecuteNV
            },
            vk_get_device_fault_info_ext: {
                unsafe extern "system" fn vkGetDeviceFaultInfoEXT(
                    device: NonDisposableHandle,
                    p_fault_counts: *mut VkDeviceFaultCountsEXT,
                    p_fault_info: *mut VkDeviceFaultInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceFaultInfoEXT))
                }
                vkGetDeviceFaultInfoEXT
            },
            vk_cmd_set_depth_bias2_ext: {
                unsafe extern "system" fn vkCmdSetDepthBias2EXT(
                    command_buffer: NonDisposableHandle,
                    p_depth_bias_info: *const VkDepthBiasInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDepthBias2EXT))
                }
                vkCmdSetDepthBias2EXT
            },
            vk_release_swapchain_images_ext: {
                unsafe extern "system" fn vkReleaseSwapchainImagesEXT(
                    device: NonDisposableHandle,
                    p_release_info: *const VkReleaseSwapchainImagesInfoEXT,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkReleaseSwapchainImagesEXT))
                }
                vkReleaseSwapchainImagesEXT
            },
            vk_get_device_image_subresource_layout_khr: {
                unsafe extern "system" fn vkGetDeviceImageSubresourceLayoutKHR(
                    device: NonDisposableHandle,
                    p_info: *const VkDeviceImageSubresourceInfoKHR,
                    p_layout: *mut VkSubresourceLayout2KHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetDeviceImageSubresourceLayoutKHR))
                }
                vkGetDeviceImageSubresourceLayoutKHR
            },
            vk_map_memory2_khr: {
                unsafe extern "system" fn vkMapMemory2KHR(
                    device: NonDisposableHandle,
                    p_memory_map_info: *const VkMemoryMapInfoKHR,
                    pp_data: *mut *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkMapMemory2KHR))
                }
                vkMapMemory2KHR
            },
            vk_unmap_memory2_khr: {
                unsafe extern "system" fn vkUnmapMemory2KHR(
                    device: NonDisposableHandle,
                    p_memory_unmap_info: *const VkMemoryUnmapInfoKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkUnmapMemory2KHR))
                }
                vkUnmapMemory2KHR
            },
            vk_create_shaders_ext: {
                unsafe extern "system" fn vkCreateShadersEXT(
                    device: NonDisposableHandle,
                    create_info_count: u32,
                    p_create_infos: *const VkShaderCreateInfoEXT,
                    p_allocator: *const VkAllocationCallbacks,
                    p_shaders: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateShadersEXT))
                }
                vkCreateShadersEXT
            },
            vk_destroy_shader_ext: {
                unsafe extern "system" fn vkDestroyShaderEXT(
                    device: NonDisposableHandle,
                    shader: NonDisposableHandle,
                    p_allocator: *const VkAllocationCallbacks,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkDestroyShaderEXT))
                }
                vkDestroyShaderEXT
            },
            vk_get_shader_binary_data_ext: {
                unsafe extern "system" fn vkGetShaderBinaryDataEXT(
                    device: NonDisposableHandle,
                    shader: NonDisposableHandle,
                    p_data_size: *mut usize,
                    p_data: *mut c_void,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetShaderBinaryDataEXT))
                }
                vkGetShaderBinaryDataEXT
            },
            vk_cmd_bind_shaders_ext: {
                unsafe extern "system" fn vkCmdBindShadersEXT(
                    command_buffer: NonDisposableHandle,
                    stage_count: u32,
                    p_stages: *const vk::ShaderStageFlags,
                    p_shaders: *const NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindShadersEXT))
                }
                vkCmdBindShadersEXT
            },
            vk_get_screen_buffer_properties_qnx: {
                unsafe extern "system" fn vkGetScreenBufferPropertiesQNX(
                    device: NonDisposableHandle,
                    buffer: *const usize,
                    p_properties: *mut VkScreenBufferPropertiesQNX,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetScreenBufferPropertiesQNX))
                }
                vkGetScreenBufferPropertiesQNX
            },
            vk_get_physical_device_cooperative_matrix_properties_khr: {
                unsafe extern "system" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(
                    physical_device: NonDisposableHandle,
                    p_property_count: *mut u32,
                    p_properties: *mut VkCooperativeMatrixPropertiesKHR,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR))
                }
                vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR
            },
            vk_get_execution_graph_pipeline_scratch_size_amdx: {
                unsafe extern "system" fn vkGetExecutionGraphPipelineScratchSizeAMDX(
                    device: NonDisposableHandle,
                    execution_graph: NonDisposableHandle,
                    p_size_info: *mut VkExecutionGraphPipelineScratchSizeAMDX,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetExecutionGraphPipelineScratchSizeAMDX))
                }
                vkGetExecutionGraphPipelineScratchSizeAMDX
            },
            vk_get_execution_graph_pipeline_node_index_amdx: {
                unsafe extern "system" fn vkGetExecutionGraphPipelineNodeIndexAMDX(
                    device: NonDisposableHandle,
                    execution_graph: NonDisposableHandle,
                    p_node_info: *const VkPipelineShaderStageNodeCreateInfoAMDX,
                    p_node_index: *mut u32,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetExecutionGraphPipelineNodeIndexAMDX))
                }
                vkGetExecutionGraphPipelineNodeIndexAMDX
            },
            vk_create_execution_graph_pipelines_amdx: {
                unsafe extern "system" fn vkCreateExecutionGraphPipelinesAMDX(
                    device: NonDisposableHandle,
                    pipeline_cache: NonDisposableHandle,
                    create_info_count: u32,
                    p_create_infos: *const VkExecutionGraphPipelineCreateInfoAMDX,
                    p_allocator: *const VkAllocationCallbacks,
                    p_pipelines: *mut NonDisposableHandle,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCreateExecutionGraphPipelinesAMDX))
                }
                vkCreateExecutionGraphPipelinesAMDX
            },
            vk_cmd_initialize_graph_scratch_memory_amdx: {
                unsafe extern "system" fn vkCmdInitializeGraphScratchMemoryAMDX(
                    command_buffer: NonDisposableHandle,
                    scratch: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdInitializeGraphScratchMemoryAMDX))
                }
                vkCmdInitializeGraphScratchMemoryAMDX
            },
            vk_cmd_dispatch_graph_amdx: {
                unsafe extern "system" fn vkCmdDispatchGraphAMDX(
                    command_buffer: NonDisposableHandle,
                    scratch: NonDisposableHandle,
                    p_count_info: *const VkDispatchGraphCountInfoAMDX,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDispatchGraphAMDX))
                }
                vkCmdDispatchGraphAMDX
            },
            vk_cmd_dispatch_graph_indirect_amdx: {
                unsafe extern "system" fn vkCmdDispatchGraphIndirectAMDX(
                    command_buffer: NonDisposableHandle,
                    scratch: NonDisposableHandle,
                    p_count_info: *const VkDispatchGraphCountInfoAMDX,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDispatchGraphIndirectAMDX))
                }
                vkCmdDispatchGraphIndirectAMDX
            },
            vk_cmd_dispatch_graph_indirect_count_amdx: {
                unsafe extern "system" fn vkCmdDispatchGraphIndirectCountAMDX(
                    command_buffer: NonDisposableHandle,
                    scratch: NonDisposableHandle,
                    count_info: NonDisposableHandle,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdDispatchGraphIndirectCountAMDX))
                }
                vkCmdDispatchGraphIndirectCountAMDX
            },
            vk_cmd_bind_descriptor_sets2_khr: {
                unsafe extern "system" fn vkCmdBindDescriptorSets2KHR(
                    command_buffer: NonDisposableHandle,
                    p_bind_descriptor_sets_info: *const VkBindDescriptorSetsInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindDescriptorSets2KHR))
                }
                vkCmdBindDescriptorSets2KHR
            },
            vk_cmd_push_constants2_khr: {
                unsafe extern "system" fn vkCmdPushConstants2KHR(
                    command_buffer: NonDisposableHandle,
                    p_push_constants_info: *const VkPushConstantsInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPushConstants2KHR))
                }
                vkCmdPushConstants2KHR
            },
            vk_cmd_push_descriptor_set2_khr: {
                unsafe extern "system" fn vkCmdPushDescriptorSet2KHR(
                    command_buffer: NonDisposableHandle,
                    p_push_descriptor_set_info: *const VkPushDescriptorSetInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPushDescriptorSet2KHR))
                }
                vkCmdPushDescriptorSet2KHR
            },
            vk_cmd_push_descriptor_set_with_template2_khr: {
                unsafe extern "system" fn vkCmdPushDescriptorSetWithTemplate2KHR(
                    command_buffer: NonDisposableHandle,
                    p_push_descriptor_set_with_template_info: *const VkPushDescriptorSetWithTemplateInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdPushDescriptorSetWithTemplate2KHR))
                }
                vkCmdPushDescriptorSetWithTemplate2KHR
            },
            vk_cmd_set_descriptor_buffer_offsets2_ext: {
                unsafe extern "system" fn vkCmdSetDescriptorBufferOffsets2EXT(
                    command_buffer: NonDisposableHandle,
                    p_set_descriptor_buffer_offsets_info: *const VkSetDescriptorBufferOffsetsInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetDescriptorBufferOffsets2EXT))
                }
                vkCmdSetDescriptorBufferOffsets2EXT
            },
            vk_cmd_bind_descriptor_buffer_embedded_samplers2_ext: {
                unsafe extern "system" fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(
                    command_buffer: NonDisposableHandle,
                    p_bind_descriptor_buffer_embedded_samplers_info: *const VkBindDescriptorBufferEmbeddedSamplersInfoEXT,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdBindDescriptorBufferEmbeddedSamplers2EXT))
                }
                vkCmdBindDescriptorBufferEmbeddedSamplers2EXT
            },
            vk_set_latency_sleep_mode_nv: {
                unsafe extern "system" fn vkSetLatencySleepModeNV(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_sleep_mode_info: *const VkLatencySleepModeInfoNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetLatencySleepModeNV))
                }
                vkSetLatencySleepModeNV
            },
            vk_latency_sleep_nv: {
                unsafe extern "system" fn vkLatencySleepNV(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_sleep_info: *const VkLatencySleepInfoNV,
                ) -> NonDisposableHandle {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkLatencySleepNV))
                }
                vkLatencySleepNV
            },
            vk_set_latency_marker_nv: {
                unsafe extern "system" fn vkSetLatencyMarkerNV(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_latency_marker_info: *const VkSetLatencyMarkerInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkSetLatencyMarkerNV))
                }
                vkSetLatencyMarkerNV
            },
            vk_get_latency_timings_nv: {
                unsafe extern "system" fn vkGetLatencyTimingsNV(
                    device: NonDisposableHandle,
                    swapchain: NonDisposableHandle,
                    p_latency_marker_info: *mut VkGetLatencyMarkerInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkGetLatencyTimingsNV))
                }
                vkGetLatencyTimingsNV
            },
            vk_queue_notify_out_of_band_nv: {
                unsafe extern "system" fn vkQueueNotifyOutOfBandNV(
                    queue: NonDisposableHandle,
                    p_queue_type_info: *const VkOutOfBandQueueTypeInfoNV,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkQueueNotifyOutOfBandNV))
                }
                vkQueueNotifyOutOfBandNV
            },
            vk_cmd_set_rendering_attachment_locations_khr: {
                unsafe extern "system" fn vkCmdSetRenderingAttachmentLocationsKHR(
                    command_buffer: NonDisposableHandle,
                    p_location_info: *const VkRenderingAttachmentLocationInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRenderingAttachmentLocationsKHR))
                }
                vkCmdSetRenderingAttachmentLocationsKHR
            },
            vk_cmd_set_rendering_input_attachment_indices_khr: {
                unsafe extern "system" fn vkCmdSetRenderingInputAttachmentIndicesKHR(
                    command_buffer: NonDisposableHandle,
                    p_location_info: *const VkRenderingInputAttachmentIndexInfoKHR,
                ) -> c_void {
                    panic!("attempted to invoke not initialized function `{}`", stringify!(vkCmdSetRenderingInputAttachmentIndicesKHR))
                }
                vkCmdSetRenderingInputAttachmentIndicesKHR
            },
        }
    }

    pub fn set_address(&mut self, name: &str, address: vk::PFN_vkVoidFunction) {
        match name {
            "vkCreateInstance" => self.vk_create_instance = unsafe { std::mem::transmute(address) },
            "vkDestroyInstance" => self.vk_destroy_instance = unsafe { std::mem::transmute(address) },
            "vkEnumeratePhysicalDevices" => self.vk_enumerate_physical_devices = unsafe { std::mem::transmute(address) },
            "vkGetDeviceProcAddr" => self.vk_get_device_proc_addr = unsafe { std::mem::transmute(address) },
            "vkGetInstanceProcAddr" => self.vk_get_instance_proc_addr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceProperties" => self.vk_get_physical_device_properties = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceQueueFamilyProperties" => self.vk_get_physical_device_queue_family_properties = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceMemoryProperties" => self.vk_get_physical_device_memory_properties = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceFeatures" => self.vk_get_physical_device_features = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceFormatProperties" => self.vk_get_physical_device_format_properties = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceImageFormatProperties" => self.vk_get_physical_device_image_format_properties = unsafe { std::mem::transmute(address) },
            "vkCreateDevice" => self.vk_create_device = unsafe { std::mem::transmute(address) },
            "vkDestroyDevice" => self.vk_destroy_device = unsafe { std::mem::transmute(address) },
            "vkEnumerateInstanceVersion" => self.vk_enumerate_instance_version = unsafe { std::mem::transmute(address) },
            "vkEnumerateInstanceLayerProperties" => self.vk_enumerate_instance_layer_properties = unsafe { std::mem::transmute(address) },
            "vkEnumerateInstanceExtensionProperties" => self.vk_enumerate_instance_extension_properties = unsafe { std::mem::transmute(address) },
            "vkEnumerateDeviceLayerProperties" => self.vk_enumerate_device_layer_properties = unsafe { std::mem::transmute(address) },
            "vkEnumerateDeviceExtensionProperties" => self.vk_enumerate_device_extension_properties = unsafe { std::mem::transmute(address) },
            "vkGetDeviceQueue" => self.vk_get_device_queue = unsafe { std::mem::transmute(address) },
            "vkQueueSubmit" => self.vk_queue_submit = unsafe { std::mem::transmute(address) },
            "vkQueueWaitIdle" => self.vk_queue_wait_idle = unsafe { std::mem::transmute(address) },
            "vkDeviceWaitIdle" => self.vk_device_wait_idle = unsafe { std::mem::transmute(address) },
            "vkAllocateMemory" => self.vk_allocate_memory = unsafe { std::mem::transmute(address) },
            "vkFreeMemory" => self.vk_free_memory = unsafe { std::mem::transmute(address) },
            "vkMapMemory" => self.vk_map_memory = unsafe { std::mem::transmute(address) },
            "vkUnmapMemory" => self.vk_unmap_memory = unsafe { std::mem::transmute(address) },
            "vkFlushMappedMemoryRanges" => self.vk_flush_mapped_memory_ranges = unsafe { std::mem::transmute(address) },
            "vkInvalidateMappedMemoryRanges" => self.vk_invalidate_mapped_memory_ranges = unsafe { std::mem::transmute(address) },
            "vkGetDeviceMemoryCommitment" => self.vk_get_device_memory_commitment = unsafe { std::mem::transmute(address) },
            "vkGetBufferMemoryRequirements" => self.vk_get_buffer_memory_requirements = unsafe { std::mem::transmute(address) },
            "vkBindBufferMemory" => self.vk_bind_buffer_memory = unsafe { std::mem::transmute(address) },
            "vkGetImageMemoryRequirements" => self.vk_get_image_memory_requirements = unsafe { std::mem::transmute(address) },
            "vkBindImageMemory" => self.vk_bind_image_memory = unsafe { std::mem::transmute(address) },
            "vkGetImageSparseMemoryRequirements" => self.vk_get_image_sparse_memory_requirements = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSparseImageFormatProperties" => self.vk_get_physical_device_sparse_image_format_properties = unsafe { std::mem::transmute(address) },
            "vkQueueBindSparse" => self.vk_queue_bind_sparse = unsafe { std::mem::transmute(address) },
            "vkCreateFence" => self.vk_create_fence = unsafe { std::mem::transmute(address) },
            "vkDestroyFence" => self.vk_destroy_fence = unsafe { std::mem::transmute(address) },
            "vkResetFences" => self.vk_reset_fences = unsafe { std::mem::transmute(address) },
            "vkGetFenceStatus" => self.vk_get_fence_status = unsafe { std::mem::transmute(address) },
            "vkWaitForFences" => self.vk_wait_for_fences = unsafe { std::mem::transmute(address) },
            "vkCreateSemaphore" => self.vk_create_semaphore = unsafe { std::mem::transmute(address) },
            "vkDestroySemaphore" => self.vk_destroy_semaphore = unsafe { std::mem::transmute(address) },
            "vkCreateEvent" => self.vk_create_event = unsafe { std::mem::transmute(address) },
            "vkDestroyEvent" => self.vk_destroy_event = unsafe { std::mem::transmute(address) },
            "vkGetEventStatus" => self.vk_get_event_status = unsafe { std::mem::transmute(address) },
            "vkSetEvent" => self.vk_set_event = unsafe { std::mem::transmute(address) },
            "vkResetEvent" => self.vk_reset_event = unsafe { std::mem::transmute(address) },
            "vkCreateQueryPool" => self.vk_create_query_pool = unsafe { std::mem::transmute(address) },
            "vkDestroyQueryPool" => self.vk_destroy_query_pool = unsafe { std::mem::transmute(address) },
            "vkGetQueryPoolResults" => self.vk_get_query_pool_results = unsafe { std::mem::transmute(address) },
            "vkResetQueryPool" => self.vk_reset_query_pool = unsafe { std::mem::transmute(address) },
            "vkCreateBuffer" => self.vk_create_buffer = unsafe { std::mem::transmute(address) },
            "vkDestroyBuffer" => self.vk_destroy_buffer = unsafe { std::mem::transmute(address) },
            "vkCreateBufferView" => self.vk_create_buffer_view = unsafe { std::mem::transmute(address) },
            "vkDestroyBufferView" => self.vk_destroy_buffer_view = unsafe { std::mem::transmute(address) },
            "vkCreateImage" => self.vk_create_image = unsafe { std::mem::transmute(address) },
            "vkDestroyImage" => self.vk_destroy_image = unsafe { std::mem::transmute(address) },
            "vkGetImageSubresourceLayout" => self.vk_get_image_subresource_layout = unsafe { std::mem::transmute(address) },
            "vkCreateImageView" => self.vk_create_image_view = unsafe { std::mem::transmute(address) },
            "vkDestroyImageView" => self.vk_destroy_image_view = unsafe { std::mem::transmute(address) },
            "vkCreateShaderModule" => self.vk_create_shader_module = unsafe { std::mem::transmute(address) },
            "vkDestroyShaderModule" => self.vk_destroy_shader_module = unsafe { std::mem::transmute(address) },
            "vkCreatePipelineCache" => self.vk_create_pipeline_cache = unsafe { std::mem::transmute(address) },
            "vkDestroyPipelineCache" => self.vk_destroy_pipeline_cache = unsafe { std::mem::transmute(address) },
            "vkGetPipelineCacheData" => self.vk_get_pipeline_cache_data = unsafe { std::mem::transmute(address) },
            "vkMergePipelineCaches" => self.vk_merge_pipeline_caches = unsafe { std::mem::transmute(address) },
            "vkCreateGraphicsPipelines" => self.vk_create_graphics_pipelines = unsafe { std::mem::transmute(address) },
            "vkCreateComputePipelines" => self.vk_create_compute_pipelines = unsafe { std::mem::transmute(address) },
            "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" => self.vk_get_device_subpass_shading_max_workgroup_size_huawei = unsafe { std::mem::transmute(address) },
            "vkDestroyPipeline" => self.vk_destroy_pipeline = unsafe { std::mem::transmute(address) },
            "vkCreatePipelineLayout" => self.vk_create_pipeline_layout = unsafe { std::mem::transmute(address) },
            "vkDestroyPipelineLayout" => self.vk_destroy_pipeline_layout = unsafe { std::mem::transmute(address) },
            "vkCreateSampler" => self.vk_create_sampler = unsafe { std::mem::transmute(address) },
            "vkDestroySampler" => self.vk_destroy_sampler = unsafe { std::mem::transmute(address) },
            "vkCreateDescriptorSetLayout" => self.vk_create_descriptor_set_layout = unsafe { std::mem::transmute(address) },
            "vkDestroyDescriptorSetLayout" => self.vk_destroy_descriptor_set_layout = unsafe { std::mem::transmute(address) },
            "vkCreateDescriptorPool" => self.vk_create_descriptor_pool = unsafe { std::mem::transmute(address) },
            "vkDestroyDescriptorPool" => self.vk_destroy_descriptor_pool = unsafe { std::mem::transmute(address) },
            "vkResetDescriptorPool" => self.vk_reset_descriptor_pool = unsafe { std::mem::transmute(address) },
            "vkAllocateDescriptorSets" => self.vk_allocate_descriptor_sets = unsafe { std::mem::transmute(address) },
            "vkFreeDescriptorSets" => self.vk_free_descriptor_sets = unsafe { std::mem::transmute(address) },
            "vkUpdateDescriptorSets" => self.vk_update_descriptor_sets = unsafe { std::mem::transmute(address) },
            "vkCreateFramebuffer" => self.vk_create_framebuffer = unsafe { std::mem::transmute(address) },
            "vkDestroyFramebuffer" => self.vk_destroy_framebuffer = unsafe { std::mem::transmute(address) },
            "vkCreateRenderPass" => self.vk_create_render_pass = unsafe { std::mem::transmute(address) },
            "vkDestroyRenderPass" => self.vk_destroy_render_pass = unsafe { std::mem::transmute(address) },
            "vkGetRenderAreaGranularity" => self.vk_get_render_area_granularity = unsafe { std::mem::transmute(address) },
            "vkGetRenderingAreaGranularityKHR" => self.vk_get_rendering_area_granularity_khr = unsafe { std::mem::transmute(address) },
            "vkCreateCommandPool" => self.vk_create_command_pool = unsafe { std::mem::transmute(address) },
            "vkDestroyCommandPool" => self.vk_destroy_command_pool = unsafe { std::mem::transmute(address) },
            "vkResetCommandPool" => self.vk_reset_command_pool = unsafe { std::mem::transmute(address) },
            "vkAllocateCommandBuffers" => self.vk_allocate_command_buffers = unsafe { std::mem::transmute(address) },
            "vkFreeCommandBuffers" => self.vk_free_command_buffers = unsafe { std::mem::transmute(address) },
            "vkBeginCommandBuffer" => self.vk_begin_command_buffer = unsafe { std::mem::transmute(address) },
            "vkEndCommandBuffer" => self.vk_end_command_buffer = unsafe { std::mem::transmute(address) },
            "vkResetCommandBuffer" => self.vk_reset_command_buffer = unsafe { std::mem::transmute(address) },
            "vkCmdBindPipeline" => self.vk_cmd_bind_pipeline = unsafe { std::mem::transmute(address) },
            "vkCmdSetAttachmentFeedbackLoopEnableEXT" => self.vk_cmd_set_attachment_feedback_loop_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetViewport" => self.vk_cmd_set_viewport = unsafe { std::mem::transmute(address) },
            "vkCmdSetScissor" => self.vk_cmd_set_scissor = unsafe { std::mem::transmute(address) },
            "vkCmdSetLineWidth" => self.vk_cmd_set_line_width = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthBias" => self.vk_cmd_set_depth_bias = unsafe { std::mem::transmute(address) },
            "vkCmdSetBlendConstants" => self.vk_cmd_set_blend_constants = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthBounds" => self.vk_cmd_set_depth_bounds = unsafe { std::mem::transmute(address) },
            "vkCmdSetStencilCompareMask" => self.vk_cmd_set_stencil_compare_mask = unsafe { std::mem::transmute(address) },
            "vkCmdSetStencilWriteMask" => self.vk_cmd_set_stencil_write_mask = unsafe { std::mem::transmute(address) },
            "vkCmdSetStencilReference" => self.vk_cmd_set_stencil_reference = unsafe { std::mem::transmute(address) },
            "vkCmdBindDescriptorSets" => self.vk_cmd_bind_descriptor_sets = unsafe { std::mem::transmute(address) },
            "vkCmdBindIndexBuffer" => self.vk_cmd_bind_index_buffer = unsafe { std::mem::transmute(address) },
            "vkCmdBindVertexBuffers" => self.vk_cmd_bind_vertex_buffers = unsafe { std::mem::transmute(address) },
            "vkCmdDraw" => self.vk_cmd_draw = unsafe { std::mem::transmute(address) },
            "vkCmdDrawIndexed" => self.vk_cmd_draw_indexed = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMultiEXT" => self.vk_cmd_draw_multi_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMultiIndexedEXT" => self.vk_cmd_draw_multi_indexed_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDrawIndirect" => self.vk_cmd_draw_indirect = unsafe { std::mem::transmute(address) },
            "vkCmdDrawIndexedIndirect" => self.vk_cmd_draw_indexed_indirect = unsafe { std::mem::transmute(address) },
            "vkCmdDispatch" => self.vk_cmd_dispatch = unsafe { std::mem::transmute(address) },
            "vkCmdDispatchIndirect" => self.vk_cmd_dispatch_indirect = unsafe { std::mem::transmute(address) },
            "vkCmdSubpassShadingHUAWEI" => self.vk_cmd_subpass_shading_huawei = unsafe { std::mem::transmute(address) },
            "vkCmdDrawClusterHUAWEI" => self.vk_cmd_draw_cluster_huawei = unsafe { std::mem::transmute(address) },
            "vkCmdDrawClusterIndirectHUAWEI" => self.vk_cmd_draw_cluster_indirect_huawei = unsafe { std::mem::transmute(address) },
            "vkCmdUpdatePipelineIndirectBufferNV" => self.vk_cmd_update_pipeline_indirect_buffer_nv = unsafe { std::mem::transmute(address) },
            "vkCmdCopyBuffer" => self.vk_cmd_copy_buffer = unsafe { std::mem::transmute(address) },
            "vkCmdCopyImage" => self.vk_cmd_copy_image = unsafe { std::mem::transmute(address) },
            "vkCmdBlitImage" => self.vk_cmd_blit_image = unsafe { std::mem::transmute(address) },
            "vkCmdCopyBufferToImage" => self.vk_cmd_copy_buffer_to_image = unsafe { std::mem::transmute(address) },
            "vkCmdCopyImageToBuffer" => self.vk_cmd_copy_image_to_buffer = unsafe { std::mem::transmute(address) },
            "vkCmdCopyMemoryIndirectNV" => self.vk_cmd_copy_memory_indirect_nv = unsafe { std::mem::transmute(address) },
            "vkCmdCopyMemoryToImageIndirectNV" => self.vk_cmd_copy_memory_to_image_indirect_nv = unsafe { std::mem::transmute(address) },
            "vkCmdUpdateBuffer" => self.vk_cmd_update_buffer = unsafe { std::mem::transmute(address) },
            "vkCmdFillBuffer" => self.vk_cmd_fill_buffer = unsafe { std::mem::transmute(address) },
            "vkCmdClearColorImage" => self.vk_cmd_clear_color_image = unsafe { std::mem::transmute(address) },
            "vkCmdClearDepthStencilImage" => self.vk_cmd_clear_depth_stencil_image = unsafe { std::mem::transmute(address) },
            "vkCmdClearAttachments" => self.vk_cmd_clear_attachments = unsafe { std::mem::transmute(address) },
            "vkCmdResolveImage" => self.vk_cmd_resolve_image = unsafe { std::mem::transmute(address) },
            "vkCmdSetEvent" => self.vk_cmd_set_event = unsafe { std::mem::transmute(address) },
            "vkCmdResetEvent" => self.vk_cmd_reset_event = unsafe { std::mem::transmute(address) },
            "vkCmdWaitEvents" => self.vk_cmd_wait_events = unsafe { std::mem::transmute(address) },
            "vkCmdPipelineBarrier" => self.vk_cmd_pipeline_barrier = unsafe { std::mem::transmute(address) },
            "vkCmdBeginQuery" => self.vk_cmd_begin_query = unsafe { std::mem::transmute(address) },
            "vkCmdEndQuery" => self.vk_cmd_end_query = unsafe { std::mem::transmute(address) },
            "vkCmdBeginConditionalRenderingEXT" => self.vk_cmd_begin_conditional_rendering_ext = unsafe { std::mem::transmute(address) },
            "vkCmdEndConditionalRenderingEXT" => self.vk_cmd_end_conditional_rendering_ext = unsafe { std::mem::transmute(address) },
            "vkCmdResetQueryPool" => self.vk_cmd_reset_query_pool = unsafe { std::mem::transmute(address) },
            "vkCmdWriteTimestamp" => self.vk_cmd_write_timestamp = unsafe { std::mem::transmute(address) },
            "vkCmdCopyQueryPoolResults" => self.vk_cmd_copy_query_pool_results = unsafe { std::mem::transmute(address) },
            "vkCmdPushConstants" => self.vk_cmd_push_constants = unsafe { std::mem::transmute(address) },
            "vkCmdBeginRenderPass" => self.vk_cmd_begin_render_pass = unsafe { std::mem::transmute(address) },
            "vkCmdNextSubpass" => self.vk_cmd_next_subpass = unsafe { std::mem::transmute(address) },
            "vkCmdEndRenderPass" => self.vk_cmd_end_render_pass = unsafe { std::mem::transmute(address) },
            "vkCmdExecuteCommands" => self.vk_cmd_execute_commands = unsafe { std::mem::transmute(address) },
            "vkCreateAndroidSurfaceKHR" => self.vk_create_android_surface_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceDisplayPropertiesKHR" => self.vk_get_physical_device_display_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceDisplayPlanePropertiesKHR" => self.vk_get_physical_device_display_plane_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetDisplayPlaneSupportedDisplaysKHR" => self.vk_get_display_plane_supported_displays_khr = unsafe { std::mem::transmute(address) },
            "vkGetDisplayModePropertiesKHR" => self.vk_get_display_mode_properties_khr = unsafe { std::mem::transmute(address) },
            "vkCreateDisplayModeKHR" => self.vk_create_display_mode_khr = unsafe { std::mem::transmute(address) },
            "vkGetDisplayPlaneCapabilitiesKHR" => self.vk_get_display_plane_capabilities_khr = unsafe { std::mem::transmute(address) },
            "vkCreateDisplayPlaneSurfaceKHR" => self.vk_create_display_plane_surface_khr = unsafe { std::mem::transmute(address) },
            "vkCreateSharedSwapchainsKHR" => self.vk_create_shared_swapchains_khr = unsafe { std::mem::transmute(address) },
            "vkDestroySurfaceKHR" => self.vk_destroy_surface_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfaceSupportKHR" => self.vk_get_physical_device_surface_support_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" => self.vk_get_physical_device_surface_capabilities_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfaceFormatsKHR" => self.vk_get_physical_device_surface_formats_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfacePresentModesKHR" => self.vk_get_physical_device_surface_present_modes_khr = unsafe { std::mem::transmute(address) },
            "vkCreateSwapchainKHR" => self.vk_create_swapchain_khr = unsafe { std::mem::transmute(address) },
            "vkDestroySwapchainKHR" => self.vk_destroy_swapchain_khr = unsafe { std::mem::transmute(address) },
            "vkGetSwapchainImagesKHR" => self.vk_get_swapchain_images_khr = unsafe { std::mem::transmute(address) },
            "vkAcquireNextImageKHR" => self.vk_acquire_next_image_khr = unsafe { std::mem::transmute(address) },
            "vkQueuePresentKHR" => self.vk_queue_present_khr = unsafe { std::mem::transmute(address) },
            "vkCreateViSurfaceNN" => self.vk_create_vi_surface_nn = unsafe { std::mem::transmute(address) },
            "vkCreateWaylandSurfaceKHR" => self.vk_create_wayland_surface_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceWaylandPresentationSupportKHR" => self.vk_get_physical_device_wayland_presentation_support_khr = unsafe { std::mem::transmute(address) },
            "vkCreateWin32SurfaceKHR" => self.vk_create_win32_surface_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceWin32PresentationSupportKHR" => self.vk_get_physical_device_win32_presentation_support_khr = unsafe { std::mem::transmute(address) },
            "vkCreateXlibSurfaceKHR" => self.vk_create_xlib_surface_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceXlibPresentationSupportKHR" => self.vk_get_physical_device_xlib_presentation_support_khr = unsafe { std::mem::transmute(address) },
            "vkCreateXcbSurfaceKHR" => self.vk_create_xcb_surface_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceXcbPresentationSupportKHR" => self.vk_get_physical_device_xcb_presentation_support_khr = unsafe { std::mem::transmute(address) },
            "vkCreateDirectFBSurfaceEXT" => self.vk_create_direct_fbsurface_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceDirectFBPresentationSupportEXT" => self.vk_get_physical_device_direct_fbpresentation_support_ext = unsafe { std::mem::transmute(address) },
            "vkCreateImagePipeSurfaceFUCHSIA" => self.vk_create_image_pipe_surface_fuchsia = unsafe { std::mem::transmute(address) },
            "vkCreateStreamDescriptorSurfaceGGP" => self.vk_create_stream_descriptor_surface_ggp = unsafe { std::mem::transmute(address) },
            "vkCreateScreenSurfaceQNX" => self.vk_create_screen_surface_qnx = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceScreenPresentationSupportQNX" => self.vk_get_physical_device_screen_presentation_support_qnx = unsafe { std::mem::transmute(address) },
            "vkCreateDebugReportCallbackEXT" => self.vk_create_debug_report_callback_ext = unsafe { std::mem::transmute(address) },
            "vkDestroyDebugReportCallbackEXT" => self.vk_destroy_debug_report_callback_ext = unsafe { std::mem::transmute(address) },
            "vkDebugReportMessageEXT" => self.vk_debug_report_message_ext = unsafe { std::mem::transmute(address) },
            "vkDebugMarkerSetObjectNameEXT" => self.vk_debug_marker_set_object_name_ext = unsafe { std::mem::transmute(address) },
            "vkDebugMarkerSetObjectTagEXT" => self.vk_debug_marker_set_object_tag_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDebugMarkerBeginEXT" => self.vk_cmd_debug_marker_begin_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDebugMarkerEndEXT" => self.vk_cmd_debug_marker_end_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDebugMarkerInsertEXT" => self.vk_cmd_debug_marker_insert_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceExternalImageFormatPropertiesNV" => self.vk_get_physical_device_external_image_format_properties_nv = unsafe { std::mem::transmute(address) },
            "vkGetMemoryWin32HandleNV" => self.vk_get_memory_win32_handle_nv = unsafe { std::mem::transmute(address) },
            "vkCmdExecuteGeneratedCommandsNV" => self.vk_cmd_execute_generated_commands_nv = unsafe { std::mem::transmute(address) },
            "vkCmdPreprocessGeneratedCommandsNV" => self.vk_cmd_preprocess_generated_commands_nv = unsafe { std::mem::transmute(address) },
            "vkCmdBindPipelineShaderGroupNV" => self.vk_cmd_bind_pipeline_shader_group_nv = unsafe { std::mem::transmute(address) },
            "vkGetGeneratedCommandsMemoryRequirementsNV" => self.vk_get_generated_commands_memory_requirements_nv = unsafe { std::mem::transmute(address) },
            "vkCreateIndirectCommandsLayoutNV" => self.vk_create_indirect_commands_layout_nv = unsafe { std::mem::transmute(address) },
            "vkDestroyIndirectCommandsLayoutNV" => self.vk_destroy_indirect_commands_layout_nv = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceFeatures2" => self.vk_get_physical_device_features2 = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceProperties2" => self.vk_get_physical_device_properties2 = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceFormatProperties2" => self.vk_get_physical_device_format_properties2 = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceImageFormatProperties2" => self.vk_get_physical_device_image_format_properties2 = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceQueueFamilyProperties2" => self.vk_get_physical_device_queue_family_properties2 = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceMemoryProperties2" => self.vk_get_physical_device_memory_properties2 = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSparseImageFormatProperties2" => self.vk_get_physical_device_sparse_image_format_properties2 = unsafe { std::mem::transmute(address) },
            "vkCmdPushDescriptorSetKHR" => self.vk_cmd_push_descriptor_set_khr = unsafe { std::mem::transmute(address) },
            "vkTrimCommandPool" => self.vk_trim_command_pool = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceExternalBufferProperties" => self.vk_get_physical_device_external_buffer_properties = unsafe { std::mem::transmute(address) },
            "vkGetMemoryWin32HandleKHR" => self.vk_get_memory_win32_handle_khr = unsafe { std::mem::transmute(address) },
            "vkGetMemoryWin32HandlePropertiesKHR" => self.vk_get_memory_win32_handle_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetMemoryFdKHR" => self.vk_get_memory_fd_khr = unsafe { std::mem::transmute(address) },
            "vkGetMemoryFdPropertiesKHR" => self.vk_get_memory_fd_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetMemoryZirconHandleFUCHSIA" => self.vk_get_memory_zircon_handle_fuchsia = unsafe { std::mem::transmute(address) },
            "vkGetMemoryZirconHandlePropertiesFUCHSIA" => self.vk_get_memory_zircon_handle_properties_fuchsia = unsafe { std::mem::transmute(address) },
            "vkGetMemoryRemoteAddressNV" => self.vk_get_memory_remote_address_nv = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceExternalSemaphoreProperties" => self.vk_get_physical_device_external_semaphore_properties = unsafe { std::mem::transmute(address) },
            "vkGetSemaphoreWin32HandleKHR" => self.vk_get_semaphore_win32_handle_khr = unsafe { std::mem::transmute(address) },
            "vkImportSemaphoreWin32HandleKHR" => self.vk_import_semaphore_win32_handle_khr = unsafe { std::mem::transmute(address) },
            "vkGetSemaphoreFdKHR" => self.vk_get_semaphore_fd_khr = unsafe { std::mem::transmute(address) },
            "vkImportSemaphoreFdKHR" => self.vk_import_semaphore_fd_khr = unsafe { std::mem::transmute(address) },
            "vkGetSemaphoreZirconHandleFUCHSIA" => self.vk_get_semaphore_zircon_handle_fuchsia = unsafe { std::mem::transmute(address) },
            "vkImportSemaphoreZirconHandleFUCHSIA" => self.vk_import_semaphore_zircon_handle_fuchsia = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceExternalFenceProperties" => self.vk_get_physical_device_external_fence_properties = unsafe { std::mem::transmute(address) },
            "vkGetFenceWin32HandleKHR" => self.vk_get_fence_win32_handle_khr = unsafe { std::mem::transmute(address) },
            "vkImportFenceWin32HandleKHR" => self.vk_import_fence_win32_handle_khr = unsafe { std::mem::transmute(address) },
            "vkGetFenceFdKHR" => self.vk_get_fence_fd_khr = unsafe { std::mem::transmute(address) },
            "vkImportFenceFdKHR" => self.vk_import_fence_fd_khr = unsafe { std::mem::transmute(address) },
            "vkReleaseDisplayEXT" => self.vk_release_display_ext = unsafe { std::mem::transmute(address) },
            "vkAcquireXlibDisplayEXT" => self.vk_acquire_xlib_display_ext = unsafe { std::mem::transmute(address) },
            "vkGetRandROutputDisplayEXT" => self.vk_get_rand_routput_display_ext = unsafe { std::mem::transmute(address) },
            "vkAcquireWinrtDisplayNV" => self.vk_acquire_winrt_display_nv = unsafe { std::mem::transmute(address) },
            "vkGetWinrtDisplayNV" => self.vk_get_winrt_display_nv = unsafe { std::mem::transmute(address) },
            "vkDisplayPowerControlEXT" => self.vk_display_power_control_ext = unsafe { std::mem::transmute(address) },
            "vkRegisterDeviceEventEXT" => self.vk_register_device_event_ext = unsafe { std::mem::transmute(address) },
            "vkRegisterDisplayEventEXT" => self.vk_register_display_event_ext = unsafe { std::mem::transmute(address) },
            "vkGetSwapchainCounterEXT" => self.vk_get_swapchain_counter_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfaceCapabilities2EXT" => self.vk_get_physical_device_surface_capabilities2_ext = unsafe { std::mem::transmute(address) },
            "vkEnumeratePhysicalDeviceGroups" => self.vk_enumerate_physical_device_groups = unsafe { std::mem::transmute(address) },
            "vkGetDeviceGroupPeerMemoryFeatures" => self.vk_get_device_group_peer_memory_features = unsafe { std::mem::transmute(address) },
            "vkBindBufferMemory2" => self.vk_bind_buffer_memory2 = unsafe { std::mem::transmute(address) },
            "vkBindImageMemory2" => self.vk_bind_image_memory2 = unsafe { std::mem::transmute(address) },
            "vkCmdSetDeviceMask" => self.vk_cmd_set_device_mask = unsafe { std::mem::transmute(address) },
            "vkGetDeviceGroupPresentCapabilitiesKHR" => self.vk_get_device_group_present_capabilities_khr = unsafe { std::mem::transmute(address) },
            "vkGetDeviceGroupSurfacePresentModesKHR" => self.vk_get_device_group_surface_present_modes_khr = unsafe { std::mem::transmute(address) },
            "vkAcquireNextImage2KHR" => self.vk_acquire_next_image2_khr = unsafe { std::mem::transmute(address) },
            "vkCmdDispatchBase" => self.vk_cmd_dispatch_base = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDevicePresentRectanglesKHR" => self.vk_get_physical_device_present_rectangles_khr = unsafe { std::mem::transmute(address) },
            "vkCreateDescriptorUpdateTemplate" => self.vk_create_descriptor_update_template = unsafe { std::mem::transmute(address) },
            "vkDestroyDescriptorUpdateTemplate" => self.vk_destroy_descriptor_update_template = unsafe { std::mem::transmute(address) },
            "vkUpdateDescriptorSetWithTemplate" => self.vk_update_descriptor_set_with_template = unsafe { std::mem::transmute(address) },
            "vkCmdPushDescriptorSetWithTemplateKHR" => self.vk_cmd_push_descriptor_set_with_template_khr = unsafe { std::mem::transmute(address) },
            "vkSetHdrMetadataEXT" => self.vk_set_hdr_metadata_ext = unsafe { std::mem::transmute(address) },
            "vkGetSwapchainStatusKHR" => self.vk_get_swapchain_status_khr = unsafe { std::mem::transmute(address) },
            "vkGetRefreshCycleDurationGOOGLE" => self.vk_get_refresh_cycle_duration_google = unsafe { std::mem::transmute(address) },
            "vkGetPastPresentationTimingGOOGLE" => self.vk_get_past_presentation_timing_google = unsafe { std::mem::transmute(address) },
            "vkCreateIOSSurfaceMVK" => self.vk_create_iossurface_mvk = unsafe { std::mem::transmute(address) },
            "vkCreateMacOSSurfaceMVK" => self.vk_create_mac_ossurface_mvk = unsafe { std::mem::transmute(address) },
            "vkCreateMetalSurfaceEXT" => self.vk_create_metal_surface_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetViewportWScalingNV" => self.vk_cmd_set_viewport_wscaling_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetDiscardRectangleEXT" => self.vk_cmd_set_discard_rectangle_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDiscardRectangleEnableEXT" => self.vk_cmd_set_discard_rectangle_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDiscardRectangleModeEXT" => self.vk_cmd_set_discard_rectangle_mode_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetSampleLocationsEXT" => self.vk_cmd_set_sample_locations_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceMultisamplePropertiesEXT" => self.vk_get_physical_device_multisample_properties_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfaceCapabilities2KHR" => self.vk_get_physical_device_surface_capabilities2_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfaceFormats2KHR" => self.vk_get_physical_device_surface_formats2_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceDisplayProperties2KHR" => self.vk_get_physical_device_display_properties2_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceDisplayPlaneProperties2KHR" => self.vk_get_physical_device_display_plane_properties2_khr = unsafe { std::mem::transmute(address) },
            "vkGetDisplayModeProperties2KHR" => self.vk_get_display_mode_properties2_khr = unsafe { std::mem::transmute(address) },
            "vkGetDisplayPlaneCapabilities2KHR" => self.vk_get_display_plane_capabilities2_khr = unsafe { std::mem::transmute(address) },
            "vkGetBufferMemoryRequirements2" => self.vk_get_buffer_memory_requirements2 = unsafe { std::mem::transmute(address) },
            "vkGetImageMemoryRequirements2" => self.vk_get_image_memory_requirements2 = unsafe { std::mem::transmute(address) },
            "vkGetImageSparseMemoryRequirements2" => self.vk_get_image_sparse_memory_requirements2 = unsafe { std::mem::transmute(address) },
            "vkGetDeviceBufferMemoryRequirements" => self.vk_get_device_buffer_memory_requirements = unsafe { std::mem::transmute(address) },
            "vkGetDeviceImageMemoryRequirements" => self.vk_get_device_image_memory_requirements = unsafe { std::mem::transmute(address) },
            "vkGetDeviceImageSparseMemoryRequirements" => self.vk_get_device_image_sparse_memory_requirements = unsafe { std::mem::transmute(address) },
            "vkCreateSamplerYcbcrConversion" => self.vk_create_sampler_ycbcr_conversion = unsafe { std::mem::transmute(address) },
            "vkDestroySamplerYcbcrConversion" => self.vk_destroy_sampler_ycbcr_conversion = unsafe { std::mem::transmute(address) },
            "vkGetDeviceQueue2" => self.vk_get_device_queue2 = unsafe { std::mem::transmute(address) },
            "vkCreateValidationCacheEXT" => self.vk_create_validation_cache_ext = unsafe { std::mem::transmute(address) },
            "vkDestroyValidationCacheEXT" => self.vk_destroy_validation_cache_ext = unsafe { std::mem::transmute(address) },
            "vkGetValidationCacheDataEXT" => self.vk_get_validation_cache_data_ext = unsafe { std::mem::transmute(address) },
            "vkMergeValidationCachesEXT" => self.vk_merge_validation_caches_ext = unsafe { std::mem::transmute(address) },
            "vkGetDescriptorSetLayoutSupport" => self.vk_get_descriptor_set_layout_support = unsafe { std::mem::transmute(address) },
            "vkGetSwapchainGrallocUsageANDROID" => self.vk_get_swapchain_gralloc_usage_android = unsafe { std::mem::transmute(address) },
            "vkGetSwapchainGrallocUsage2ANDROID" => self.vk_get_swapchain_gralloc_usage2_android = unsafe { std::mem::transmute(address) },
            "vkAcquireImageANDROID" => self.vk_acquire_image_android = unsafe { std::mem::transmute(address) },
            "vkQueueSignalReleaseImageANDROID" => self.vk_queue_signal_release_image_android = unsafe { std::mem::transmute(address) },
            "vkGetShaderInfoAMD" => self.vk_get_shader_info_amd = unsafe { std::mem::transmute(address) },
            "vkSetLocalDimmingAMD" => self.vk_set_local_dimming_amd = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR" => self.vk_get_physical_device_calibrateable_time_domains_khr = unsafe { std::mem::transmute(address) },
            "vkGetCalibratedTimestampsKHR" => self.vk_get_calibrated_timestamps_khr = unsafe { std::mem::transmute(address) },
            "vkSetDebugUtilsObjectNameEXT" => self.vk_set_debug_utils_object_name_ext = unsafe { std::mem::transmute(address) },
            "vkSetDebugUtilsObjectTagEXT" => self.vk_set_debug_utils_object_tag_ext = unsafe { std::mem::transmute(address) },
            "vkQueueBeginDebugUtilsLabelEXT" => self.vk_queue_begin_debug_utils_label_ext = unsafe { std::mem::transmute(address) },
            "vkQueueEndDebugUtilsLabelEXT" => self.vk_queue_end_debug_utils_label_ext = unsafe { std::mem::transmute(address) },
            "vkQueueInsertDebugUtilsLabelEXT" => self.vk_queue_insert_debug_utils_label_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBeginDebugUtilsLabelEXT" => self.vk_cmd_begin_debug_utils_label_ext = unsafe { std::mem::transmute(address) },
            "vkCmdEndDebugUtilsLabelEXT" => self.vk_cmd_end_debug_utils_label_ext = unsafe { std::mem::transmute(address) },
            "vkCmdInsertDebugUtilsLabelEXT" => self.vk_cmd_insert_debug_utils_label_ext = unsafe { std::mem::transmute(address) },
            "vkCreateDebugUtilsMessengerEXT" => self.vk_create_debug_utils_messenger_ext = unsafe { std::mem::transmute(address) },
            "vkDestroyDebugUtilsMessengerEXT" => self.vk_destroy_debug_utils_messenger_ext = unsafe { std::mem::transmute(address) },
            "vkSubmitDebugUtilsMessageEXT" => self.vk_submit_debug_utils_message_ext = unsafe { std::mem::transmute(address) },
            "vkGetMemoryHostPointerPropertiesEXT" => self.vk_get_memory_host_pointer_properties_ext = unsafe { std::mem::transmute(address) },
            "vkCmdWriteBufferMarkerAMD" => self.vk_cmd_write_buffer_marker_amd = unsafe { std::mem::transmute(address) },
            "vkCreateRenderPass2" => self.vk_create_render_pass2 = unsafe { std::mem::transmute(address) },
            "vkCmdBeginRenderPass2" => self.vk_cmd_begin_render_pass2 = unsafe { std::mem::transmute(address) },
            "vkCmdNextSubpass2" => self.vk_cmd_next_subpass2 = unsafe { std::mem::transmute(address) },
            "vkCmdEndRenderPass2" => self.vk_cmd_end_render_pass2 = unsafe { std::mem::transmute(address) },
            "vkGetSemaphoreCounterValue" => self.vk_get_semaphore_counter_value = unsafe { std::mem::transmute(address) },
            "vkWaitSemaphores" => self.vk_wait_semaphores = unsafe { std::mem::transmute(address) },
            "vkSignalSemaphore" => self.vk_signal_semaphore = unsafe { std::mem::transmute(address) },
            "vkGetAndroidHardwareBufferPropertiesANDROID" => self.vk_get_android_hardware_buffer_properties_android = unsafe { std::mem::transmute(address) },
            "vkGetMemoryAndroidHardwareBufferANDROID" => self.vk_get_memory_android_hardware_buffer_android = unsafe { std::mem::transmute(address) },
            "vkCmdDrawIndirectCount" => self.vk_cmd_draw_indirect_count = unsafe { std::mem::transmute(address) },
            "vkCmdDrawIndexedIndirectCount" => self.vk_cmd_draw_indexed_indirect_count = unsafe { std::mem::transmute(address) },
            "vkCmdSetCheckpointNV" => self.vk_cmd_set_checkpoint_nv = unsafe { std::mem::transmute(address) },
            "vkGetQueueCheckpointDataNV" => self.vk_get_queue_checkpoint_data_nv = unsafe { std::mem::transmute(address) },
            "vkCmdBindTransformFeedbackBuffersEXT" => self.vk_cmd_bind_transform_feedback_buffers_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBeginTransformFeedbackEXT" => self.vk_cmd_begin_transform_feedback_ext = unsafe { std::mem::transmute(address) },
            "vkCmdEndTransformFeedbackEXT" => self.vk_cmd_end_transform_feedback_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBeginQueryIndexedEXT" => self.vk_cmd_begin_query_indexed_ext = unsafe { std::mem::transmute(address) },
            "vkCmdEndQueryIndexedEXT" => self.vk_cmd_end_query_indexed_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDrawIndirectByteCountEXT" => self.vk_cmd_draw_indirect_byte_count_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetExclusiveScissorNV" => self.vk_cmd_set_exclusive_scissor_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetExclusiveScissorEnableNV" => self.vk_cmd_set_exclusive_scissor_enable_nv = unsafe { std::mem::transmute(address) },
            "vkCmdBindShadingRateImageNV" => self.vk_cmd_bind_shading_rate_image_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetViewportShadingRatePaletteNV" => self.vk_cmd_set_viewport_shading_rate_palette_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoarseSampleOrderNV" => self.vk_cmd_set_coarse_sample_order_nv = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMeshTasksNV" => self.vk_cmd_draw_mesh_tasks_nv = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMeshTasksIndirectNV" => self.vk_cmd_draw_mesh_tasks_indirect_nv = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMeshTasksIndirectCountNV" => self.vk_cmd_draw_mesh_tasks_indirect_count_nv = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMeshTasksEXT" => self.vk_cmd_draw_mesh_tasks_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMeshTasksIndirectEXT" => self.vk_cmd_draw_mesh_tasks_indirect_ext = unsafe { std::mem::transmute(address) },
            "vkCmdDrawMeshTasksIndirectCountEXT" => self.vk_cmd_draw_mesh_tasks_indirect_count_ext = unsafe { std::mem::transmute(address) },
            "vkCompileDeferredNV" => self.vk_compile_deferred_nv = unsafe { std::mem::transmute(address) },
            "vkCreateAccelerationStructureNV" => self.vk_create_acceleration_structure_nv = unsafe { std::mem::transmute(address) },
            "vkCmdBindInvocationMaskHUAWEI" => self.vk_cmd_bind_invocation_mask_huawei = unsafe { std::mem::transmute(address) },
            "vkDestroyAccelerationStructureKHR" => self.vk_destroy_acceleration_structure_khr = unsafe { std::mem::transmute(address) },
            "vkDestroyAccelerationStructureNV" => self.vk_destroy_acceleration_structure_nv = unsafe { std::mem::transmute(address) },
            "vkGetAccelerationStructureMemoryRequirementsNV" => self.vk_get_acceleration_structure_memory_requirements_nv = unsafe { std::mem::transmute(address) },
            "vkBindAccelerationStructureMemoryNV" => self.vk_bind_acceleration_structure_memory_nv = unsafe { std::mem::transmute(address) },
            "vkCmdCopyAccelerationStructureNV" => self.vk_cmd_copy_acceleration_structure_nv = unsafe { std::mem::transmute(address) },
            "vkCmdCopyAccelerationStructureKHR" => self.vk_cmd_copy_acceleration_structure_khr = unsafe { std::mem::transmute(address) },
            "vkCopyAccelerationStructureKHR" => self.vk_copy_acceleration_structure_khr = unsafe { std::mem::transmute(address) },
            "vkCmdCopyAccelerationStructureToMemoryKHR" => self.vk_cmd_copy_acceleration_structure_to_memory_khr = unsafe { std::mem::transmute(address) },
            "vkCopyAccelerationStructureToMemoryKHR" => self.vk_copy_acceleration_structure_to_memory_khr = unsafe { std::mem::transmute(address) },
            "vkCmdCopyMemoryToAccelerationStructureKHR" => self.vk_cmd_copy_memory_to_acceleration_structure_khr = unsafe { std::mem::transmute(address) },
            "vkCopyMemoryToAccelerationStructureKHR" => self.vk_copy_memory_to_acceleration_structure_khr = unsafe { std::mem::transmute(address) },
            "vkCmdWriteAccelerationStructuresPropertiesKHR" => self.vk_cmd_write_acceleration_structures_properties_khr = unsafe { std::mem::transmute(address) },
            "vkCmdWriteAccelerationStructuresPropertiesNV" => self.vk_cmd_write_acceleration_structures_properties_nv = unsafe { std::mem::transmute(address) },
            "vkCmdBuildAccelerationStructureNV" => self.vk_cmd_build_acceleration_structure_nv = unsafe { std::mem::transmute(address) },
            "vkWriteAccelerationStructuresPropertiesKHR" => self.vk_write_acceleration_structures_properties_khr = unsafe { std::mem::transmute(address) },
            "vkCmdTraceRaysKHR" => self.vk_cmd_trace_rays_khr = unsafe { std::mem::transmute(address) },
            "vkCmdTraceRaysNV" => self.vk_cmd_trace_rays_nv = unsafe { std::mem::transmute(address) },
            "vkGetRayTracingShaderGroupHandlesKHR" => self.vk_get_ray_tracing_shader_group_handles_khr = unsafe { std::mem::transmute(address) },
            "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" => self.vk_get_ray_tracing_capture_replay_shader_group_handles_khr = unsafe { std::mem::transmute(address) },
            "vkGetAccelerationStructureHandleNV" => self.vk_get_acceleration_structure_handle_nv = unsafe { std::mem::transmute(address) },
            "vkCreateRayTracingPipelinesNV" => self.vk_create_ray_tracing_pipelines_nv = unsafe { std::mem::transmute(address) },
            "vkCreateRayTracingPipelinesKHR" => self.vk_create_ray_tracing_pipelines_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" => self.vk_get_physical_device_cooperative_matrix_properties_nv = unsafe { std::mem::transmute(address) },
            "vkCmdTraceRaysIndirectKHR" => self.vk_cmd_trace_rays_indirect_khr = unsafe { std::mem::transmute(address) },
            "vkCmdTraceRaysIndirect2KHR" => self.vk_cmd_trace_rays_indirect2_khr = unsafe { std::mem::transmute(address) },
            "vkGetDeviceAccelerationStructureCompatibilityKHR" => self.vk_get_device_acceleration_structure_compatibility_khr = unsafe { std::mem::transmute(address) },
            "vkGetRayTracingShaderGroupStackSizeKHR" => self.vk_get_ray_tracing_shader_group_stack_size_khr = unsafe { std::mem::transmute(address) },
            "vkCmdSetRayTracingPipelineStackSizeKHR" => self.vk_cmd_set_ray_tracing_pipeline_stack_size_khr = unsafe { std::mem::transmute(address) },
            "vkGetImageViewHandleNVX" => self.vk_get_image_view_handle_nvx = unsafe { std::mem::transmute(address) },
            "vkGetImageViewAddressNVX" => self.vk_get_image_view_address_nvx = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSurfacePresentModes2EXT" => self.vk_get_physical_device_surface_present_modes2_ext = unsafe { std::mem::transmute(address) },
            "vkGetDeviceGroupSurfacePresentModes2EXT" => self.vk_get_device_group_surface_present_modes2_ext = unsafe { std::mem::transmute(address) },
            "vkAcquireFullScreenExclusiveModeEXT" => self.vk_acquire_full_screen_exclusive_mode_ext = unsafe { std::mem::transmute(address) },
            "vkReleaseFullScreenExclusiveModeEXT" => self.vk_release_full_screen_exclusive_mode_ext = unsafe { std::mem::transmute(address) },
            "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" => self.vk_enumerate_physical_device_queue_family_performance_query_counters_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" => self.vk_get_physical_device_queue_family_performance_query_passes_khr = unsafe { std::mem::transmute(address) },
            "vkAcquireProfilingLockKHR" => self.vk_acquire_profiling_lock_khr = unsafe { std::mem::transmute(address) },
            "vkReleaseProfilingLockKHR" => self.vk_release_profiling_lock_khr = unsafe { std::mem::transmute(address) },
            "vkGetImageDrmFormatModifierPropertiesEXT" => self.vk_get_image_drm_format_modifier_properties_ext = unsafe { std::mem::transmute(address) },
            "vkGetBufferOpaqueCaptureAddress" => self.vk_get_buffer_opaque_capture_address = unsafe { std::mem::transmute(address) },
            "vkGetBufferDeviceAddress" => self.vk_get_buffer_device_address = unsafe { std::mem::transmute(address) },
            "vkCreateHeadlessSurfaceEXT" => self.vk_create_headless_surface_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" => self.vk_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv = unsafe { std::mem::transmute(address) },
            "vkInitializePerformanceApiINTEL" => self.vk_initialize_performance_api_intel = unsafe { std::mem::transmute(address) },
            "vkUninitializePerformanceApiINTEL" => self.vk_uninitialize_performance_api_intel = unsafe { std::mem::transmute(address) },
            "vkCmdSetPerformanceMarkerINTEL" => self.vk_cmd_set_performance_marker_intel = unsafe { std::mem::transmute(address) },
            "vkCmdSetPerformanceStreamMarkerINTEL" => self.vk_cmd_set_performance_stream_marker_intel = unsafe { std::mem::transmute(address) },
            "vkCmdSetPerformanceOverrideINTEL" => self.vk_cmd_set_performance_override_intel = unsafe { std::mem::transmute(address) },
            "vkAcquirePerformanceConfigurationINTEL" => self.vk_acquire_performance_configuration_intel = unsafe { std::mem::transmute(address) },
            "vkReleasePerformanceConfigurationINTEL" => self.vk_release_performance_configuration_intel = unsafe { std::mem::transmute(address) },
            "vkQueueSetPerformanceConfigurationINTEL" => self.vk_queue_set_performance_configuration_intel = unsafe { std::mem::transmute(address) },
            "vkGetPerformanceParameterINTEL" => self.vk_get_performance_parameter_intel = unsafe { std::mem::transmute(address) },
            "vkGetDeviceMemoryOpaqueCaptureAddress" => self.vk_get_device_memory_opaque_capture_address = unsafe { std::mem::transmute(address) },
            "vkGetPipelineExecutablePropertiesKHR" => self.vk_get_pipeline_executable_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetPipelineExecutableStatisticsKHR" => self.vk_get_pipeline_executable_statistics_khr = unsafe { std::mem::transmute(address) },
            "vkGetPipelineExecutableInternalRepresentationsKHR" => self.vk_get_pipeline_executable_internal_representations_khr = unsafe { std::mem::transmute(address) },
            "vkCmdSetLineStippleKHR" => self.vk_cmd_set_line_stipple_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceToolProperties" => self.vk_get_physical_device_tool_properties = unsafe { std::mem::transmute(address) },
            "vkCreateAccelerationStructureKHR" => self.vk_create_acceleration_structure_khr = unsafe { std::mem::transmute(address) },
            "vkCmdBuildAccelerationStructuresKHR" => self.vk_cmd_build_acceleration_structures_khr = unsafe { std::mem::transmute(address) },
            "vkCmdBuildAccelerationStructuresIndirectKHR" => self.vk_cmd_build_acceleration_structures_indirect_khr = unsafe { std::mem::transmute(address) },
            "vkBuildAccelerationStructuresKHR" => self.vk_build_acceleration_structures_khr = unsafe { std::mem::transmute(address) },
            "vkGetAccelerationStructureDeviceAddressKHR" => self.vk_get_acceleration_structure_device_address_khr = unsafe { std::mem::transmute(address) },
            "vkCreateDeferredOperationKHR" => self.vk_create_deferred_operation_khr = unsafe { std::mem::transmute(address) },
            "vkDestroyDeferredOperationKHR" => self.vk_destroy_deferred_operation_khr = unsafe { std::mem::transmute(address) },
            "vkGetDeferredOperationMaxConcurrencyKHR" => self.vk_get_deferred_operation_max_concurrency_khr = unsafe { std::mem::transmute(address) },
            "vkGetDeferredOperationResultKHR" => self.vk_get_deferred_operation_result_khr = unsafe { std::mem::transmute(address) },
            "vkDeferredOperationJoinKHR" => self.vk_deferred_operation_join_khr = unsafe { std::mem::transmute(address) },
            "vkGetPipelineIndirectMemoryRequirementsNV" => self.vk_get_pipeline_indirect_memory_requirements_nv = unsafe { std::mem::transmute(address) },
            "vkGetPipelineIndirectDeviceAddressNV" => self.vk_get_pipeline_indirect_device_address_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCullMode" => self.vk_cmd_set_cull_mode = unsafe { std::mem::transmute(address) },
            "vkCmdSetFrontFace" => self.vk_cmd_set_front_face = unsafe { std::mem::transmute(address) },
            "vkCmdSetPrimitiveTopology" => self.vk_cmd_set_primitive_topology = unsafe { std::mem::transmute(address) },
            "vkCmdSetViewportWithCount" => self.vk_cmd_set_viewport_with_count = unsafe { std::mem::transmute(address) },
            "vkCmdSetScissorWithCount" => self.vk_cmd_set_scissor_with_count = unsafe { std::mem::transmute(address) },
            "vkCmdBindIndexBuffer2KHR" => self.vk_cmd_bind_index_buffer2_khr = unsafe { std::mem::transmute(address) },
            "vkCmdBindVertexBuffers2" => self.vk_cmd_bind_vertex_buffers2 = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthTestEnable" => self.vk_cmd_set_depth_test_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthWriteEnable" => self.vk_cmd_set_depth_write_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthCompareOp" => self.vk_cmd_set_depth_compare_op = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthBoundsTestEnable" => self.vk_cmd_set_depth_bounds_test_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetStencilTestEnable" => self.vk_cmd_set_stencil_test_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetStencilOp" => self.vk_cmd_set_stencil_op = unsafe { std::mem::transmute(address) },
            "vkCmdSetPatchControlPointsEXT" => self.vk_cmd_set_patch_control_points_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetRasterizerDiscardEnable" => self.vk_cmd_set_rasterizer_discard_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthBiasEnable" => self.vk_cmd_set_depth_bias_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetLogicOpEXT" => self.vk_cmd_set_logic_op_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetPrimitiveRestartEnable" => self.vk_cmd_set_primitive_restart_enable = unsafe { std::mem::transmute(address) },
            "vkCmdSetTessellationDomainOriginEXT" => self.vk_cmd_set_tessellation_domain_origin_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthClampEnableEXT" => self.vk_cmd_set_depth_clamp_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetPolygonModeEXT" => self.vk_cmd_set_polygon_mode_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetRasterizationSamplesEXT" => self.vk_cmd_set_rasterization_samples_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetSampleMaskEXT" => self.vk_cmd_set_sample_mask_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetAlphaToCoverageEnableEXT" => self.vk_cmd_set_alpha_to_coverage_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetAlphaToOneEnableEXT" => self.vk_cmd_set_alpha_to_one_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetLogicOpEnableEXT" => self.vk_cmd_set_logic_op_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetColorBlendEnableEXT" => self.vk_cmd_set_color_blend_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetColorBlendEquationEXT" => self.vk_cmd_set_color_blend_equation_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetColorWriteMaskEXT" => self.vk_cmd_set_color_write_mask_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetRasterizationStreamEXT" => self.vk_cmd_set_rasterization_stream_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetConservativeRasterizationModeEXT" => self.vk_cmd_set_conservative_rasterization_mode_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetExtraPrimitiveOverestimationSizeEXT" => self.vk_cmd_set_extra_primitive_overestimation_size_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthClipEnableEXT" => self.vk_cmd_set_depth_clip_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetSampleLocationsEnableEXT" => self.vk_cmd_set_sample_locations_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetColorBlendAdvancedEXT" => self.vk_cmd_set_color_blend_advanced_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetProvokingVertexModeEXT" => self.vk_cmd_set_provoking_vertex_mode_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetLineRasterizationModeEXT" => self.vk_cmd_set_line_rasterization_mode_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetLineStippleEnableEXT" => self.vk_cmd_set_line_stipple_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthClipNegativeOneToOneEXT" => self.vk_cmd_set_depth_clip_negative_one_to_one_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetViewportWScalingEnableNV" => self.vk_cmd_set_viewport_wscaling_enable_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetViewportSwizzleNV" => self.vk_cmd_set_viewport_swizzle_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoverageToColorEnableNV" => self.vk_cmd_set_coverage_to_color_enable_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoverageToColorLocationNV" => self.vk_cmd_set_coverage_to_color_location_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoverageModulationModeNV" => self.vk_cmd_set_coverage_modulation_mode_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoverageModulationTableEnableNV" => self.vk_cmd_set_coverage_modulation_table_enable_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoverageModulationTableNV" => self.vk_cmd_set_coverage_modulation_table_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetShadingRateImageEnableNV" => self.vk_cmd_set_shading_rate_image_enable_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetCoverageReductionModeNV" => self.vk_cmd_set_coverage_reduction_mode_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetRepresentativeFragmentTestEnableNV" => self.vk_cmd_set_representative_fragment_test_enable_nv = unsafe { std::mem::transmute(address) },
            "vkCreatePrivateDataSlot" => self.vk_create_private_data_slot = unsafe { std::mem::transmute(address) },
            "vkDestroyPrivateDataSlot" => self.vk_destroy_private_data_slot = unsafe { std::mem::transmute(address) },
            "vkSetPrivateData" => self.vk_set_private_data = unsafe { std::mem::transmute(address) },
            "vkGetPrivateData" => self.vk_get_private_data = unsafe { std::mem::transmute(address) },
            "vkCmdCopyBuffer2" => self.vk_cmd_copy_buffer2 = unsafe { std::mem::transmute(address) },
            "vkCmdCopyImage2" => self.vk_cmd_copy_image2 = unsafe { std::mem::transmute(address) },
            "vkCmdBlitImage2" => self.vk_cmd_blit_image2 = unsafe { std::mem::transmute(address) },
            "vkCmdCopyBufferToImage2" => self.vk_cmd_copy_buffer_to_image2 = unsafe { std::mem::transmute(address) },
            "vkCmdCopyImageToBuffer2" => self.vk_cmd_copy_image_to_buffer2 = unsafe { std::mem::transmute(address) },
            "vkCmdResolveImage2" => self.vk_cmd_resolve_image2 = unsafe { std::mem::transmute(address) },
            "vkCmdSetFragmentShadingRateKHR" => self.vk_cmd_set_fragment_shading_rate_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceFragmentShadingRatesKHR" => self.vk_get_physical_device_fragment_shading_rates_khr = unsafe { std::mem::transmute(address) },
            "vkCmdSetFragmentShadingRateEnumNV" => self.vk_cmd_set_fragment_shading_rate_enum_nv = unsafe { std::mem::transmute(address) },
            "vkGetAccelerationStructureBuildSizesKHR" => self.vk_get_acceleration_structure_build_sizes_khr = unsafe { std::mem::transmute(address) },
            "vkCmdSetVertexInputEXT" => self.vk_cmd_set_vertex_input_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetColorWriteEnableEXT" => self.vk_cmd_set_color_write_enable_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetEvent2" => self.vk_cmd_set_event2 = unsafe { std::mem::transmute(address) },
            "vkCmdResetEvent2" => self.vk_cmd_reset_event2 = unsafe { std::mem::transmute(address) },
            "vkCmdWaitEvents2" => self.vk_cmd_wait_events2 = unsafe { std::mem::transmute(address) },
            "vkCmdPipelineBarrier2" => self.vk_cmd_pipeline_barrier2 = unsafe { std::mem::transmute(address) },
            "vkQueueSubmit2" => self.vk_queue_submit2 = unsafe { std::mem::transmute(address) },
            "vkCmdWriteTimestamp2" => self.vk_cmd_write_timestamp2 = unsafe { std::mem::transmute(address) },
            "vkCmdWriteBufferMarker2AMD" => self.vk_cmd_write_buffer_marker2_amd = unsafe { std::mem::transmute(address) },
            "vkGetQueueCheckpointData2NV" => self.vk_get_queue_checkpoint_data2_nv = unsafe { std::mem::transmute(address) },
            "vkCopyMemoryToImageEXT" => self.vk_copy_memory_to_image_ext = unsafe { std::mem::transmute(address) },
            "vkCopyImageToMemoryEXT" => self.vk_copy_image_to_memory_ext = unsafe { std::mem::transmute(address) },
            "vkCopyImageToImageEXT" => self.vk_copy_image_to_image_ext = unsafe { std::mem::transmute(address) },
            "vkTransitionImageLayoutEXT" => self.vk_transition_image_layout_ext = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceVideoCapabilitiesKHR" => self.vk_get_physical_device_video_capabilities_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceVideoFormatPropertiesKHR" => self.vk_get_physical_device_video_format_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR" => self.vk_get_physical_device_video_encode_quality_level_properties_khr = unsafe { std::mem::transmute(address) },
            "vkCreateVideoSessionKHR" => self.vk_create_video_session_khr = unsafe { std::mem::transmute(address) },
            "vkDestroyVideoSessionKHR" => self.vk_destroy_video_session_khr = unsafe { std::mem::transmute(address) },
            "vkCreateVideoSessionParametersKHR" => self.vk_create_video_session_parameters_khr = unsafe { std::mem::transmute(address) },
            "vkUpdateVideoSessionParametersKHR" => self.vk_update_video_session_parameters_khr = unsafe { std::mem::transmute(address) },
            "vkGetEncodedVideoSessionParametersKHR" => self.vk_get_encoded_video_session_parameters_khr = unsafe { std::mem::transmute(address) },
            "vkDestroyVideoSessionParametersKHR" => self.vk_destroy_video_session_parameters_khr = unsafe { std::mem::transmute(address) },
            "vkGetVideoSessionMemoryRequirementsKHR" => self.vk_get_video_session_memory_requirements_khr = unsafe { std::mem::transmute(address) },
            "vkBindVideoSessionMemoryKHR" => self.vk_bind_video_session_memory_khr = unsafe { std::mem::transmute(address) },
            "vkCmdDecodeVideoKHR" => self.vk_cmd_decode_video_khr = unsafe { std::mem::transmute(address) },
            "vkCmdBeginVideoCodingKHR" => self.vk_cmd_begin_video_coding_khr = unsafe { std::mem::transmute(address) },
            "vkCmdControlVideoCodingKHR" => self.vk_cmd_control_video_coding_khr = unsafe { std::mem::transmute(address) },
            "vkCmdEndVideoCodingKHR" => self.vk_cmd_end_video_coding_khr = unsafe { std::mem::transmute(address) },
            "vkCmdEncodeVideoKHR" => self.vk_cmd_encode_video_khr = unsafe { std::mem::transmute(address) },
            "vkCmdDecompressMemoryNV" => self.vk_cmd_decompress_memory_nv = unsafe { std::mem::transmute(address) },
            "vkCmdDecompressMemoryIndirectCountNV" => self.vk_cmd_decompress_memory_indirect_count_nv = unsafe { std::mem::transmute(address) },
            "vkCreateCuModuleNVX" => self.vk_create_cu_module_nvx = unsafe { std::mem::transmute(address) },
            "vkCreateCuFunctionNVX" => self.vk_create_cu_function_nvx = unsafe { std::mem::transmute(address) },
            "vkDestroyCuModuleNVX" => self.vk_destroy_cu_module_nvx = unsafe { std::mem::transmute(address) },
            "vkDestroyCuFunctionNVX" => self.vk_destroy_cu_function_nvx = unsafe { std::mem::transmute(address) },
            "vkCmdCuLaunchKernelNVX" => self.vk_cmd_cu_launch_kernel_nvx = unsafe { std::mem::transmute(address) },
            "vkGetDescriptorSetLayoutSizeEXT" => self.vk_get_descriptor_set_layout_size_ext = unsafe { std::mem::transmute(address) },
            "vkGetDescriptorSetLayoutBindingOffsetEXT" => self.vk_get_descriptor_set_layout_binding_offset_ext = unsafe { std::mem::transmute(address) },
            "vkGetDescriptorEXT" => self.vk_get_descriptor_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBindDescriptorBuffersEXT" => self.vk_cmd_bind_descriptor_buffers_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDescriptorBufferOffsetsEXT" => self.vk_cmd_set_descriptor_buffer_offsets_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBindDescriptorBufferEmbeddedSamplersEXT" => self.vk_cmd_bind_descriptor_buffer_embedded_samplers_ext = unsafe { std::mem::transmute(address) },
            "vkGetBufferOpaqueCaptureDescriptorDataEXT" => self.vk_get_buffer_opaque_capture_descriptor_data_ext = unsafe { std::mem::transmute(address) },
            "vkGetImageOpaqueCaptureDescriptorDataEXT" => self.vk_get_image_opaque_capture_descriptor_data_ext = unsafe { std::mem::transmute(address) },
            "vkGetImageViewOpaqueCaptureDescriptorDataEXT" => self.vk_get_image_view_opaque_capture_descriptor_data_ext = unsafe { std::mem::transmute(address) },
            "vkGetSamplerOpaqueCaptureDescriptorDataEXT" => self.vk_get_sampler_opaque_capture_descriptor_data_ext = unsafe { std::mem::transmute(address) },
            "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT" => self.vk_get_acceleration_structure_opaque_capture_descriptor_data_ext = unsafe { std::mem::transmute(address) },
            "vkSetDeviceMemoryPriorityEXT" => self.vk_set_device_memory_priority_ext = unsafe { std::mem::transmute(address) },
            "vkAcquireDrmDisplayEXT" => self.vk_acquire_drm_display_ext = unsafe { std::mem::transmute(address) },
            "vkGetDrmDisplayEXT" => self.vk_get_drm_display_ext = unsafe { std::mem::transmute(address) },
            "vkWaitForPresentKHR" => self.vk_wait_for_present_khr = unsafe { std::mem::transmute(address) },
            "vkCreateBufferCollectionFUCHSIA" => self.vk_create_buffer_collection_fuchsia = unsafe { std::mem::transmute(address) },
            "vkSetBufferCollectionBufferConstraintsFUCHSIA" => self.vk_set_buffer_collection_buffer_constraints_fuchsia = unsafe { std::mem::transmute(address) },
            "vkSetBufferCollectionImageConstraintsFUCHSIA" => self.vk_set_buffer_collection_image_constraints_fuchsia = unsafe { std::mem::transmute(address) },
            "vkDestroyBufferCollectionFUCHSIA" => self.vk_destroy_buffer_collection_fuchsia = unsafe { std::mem::transmute(address) },
            "vkGetBufferCollectionPropertiesFUCHSIA" => self.vk_get_buffer_collection_properties_fuchsia = unsafe { std::mem::transmute(address) },
            "vkCreateCudaModuleNV" => self.vk_create_cuda_module_nv = unsafe { std::mem::transmute(address) },
            "vkGetCudaModuleCacheNV" => self.vk_get_cuda_module_cache_nv = unsafe { std::mem::transmute(address) },
            "vkCreateCudaFunctionNV" => self.vk_create_cuda_function_nv = unsafe { std::mem::transmute(address) },
            "vkDestroyCudaModuleNV" => self.vk_destroy_cuda_module_nv = unsafe { std::mem::transmute(address) },
            "vkDestroyCudaFunctionNV" => self.vk_destroy_cuda_function_nv = unsafe { std::mem::transmute(address) },
            "vkCmdCudaLaunchKernelNV" => self.vk_cmd_cuda_launch_kernel_nv = unsafe { std::mem::transmute(address) },
            "vkCmdBeginRendering" => self.vk_cmd_begin_rendering = unsafe { std::mem::transmute(address) },
            "vkCmdEndRendering" => self.vk_cmd_end_rendering = unsafe { std::mem::transmute(address) },
            "vkGetDescriptorSetLayoutHostMappingInfoVALVE" => self.vk_get_descriptor_set_layout_host_mapping_info_valve = unsafe { std::mem::transmute(address) },
            "vkGetDescriptorSetHostMappingVALVE" => self.vk_get_descriptor_set_host_mapping_valve = unsafe { std::mem::transmute(address) },
            "vkCreateMicromapEXT" => self.vk_create_micromap_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBuildMicromapsEXT" => self.vk_cmd_build_micromaps_ext = unsafe { std::mem::transmute(address) },
            "vkBuildMicromapsEXT" => self.vk_build_micromaps_ext = unsafe { std::mem::transmute(address) },
            "vkDestroyMicromapEXT" => self.vk_destroy_micromap_ext = unsafe { std::mem::transmute(address) },
            "vkCmdCopyMicromapEXT" => self.vk_cmd_copy_micromap_ext = unsafe { std::mem::transmute(address) },
            "vkCopyMicromapEXT" => self.vk_copy_micromap_ext = unsafe { std::mem::transmute(address) },
            "vkCmdCopyMicromapToMemoryEXT" => self.vk_cmd_copy_micromap_to_memory_ext = unsafe { std::mem::transmute(address) },
            "vkCopyMicromapToMemoryEXT" => self.vk_copy_micromap_to_memory_ext = unsafe { std::mem::transmute(address) },
            "vkCmdCopyMemoryToMicromapEXT" => self.vk_cmd_copy_memory_to_micromap_ext = unsafe { std::mem::transmute(address) },
            "vkCopyMemoryToMicromapEXT" => self.vk_copy_memory_to_micromap_ext = unsafe { std::mem::transmute(address) },
            "vkCmdWriteMicromapsPropertiesEXT" => self.vk_cmd_write_micromaps_properties_ext = unsafe { std::mem::transmute(address) },
            "vkWriteMicromapsPropertiesEXT" => self.vk_write_micromaps_properties_ext = unsafe { std::mem::transmute(address) },
            "vkGetDeviceMicromapCompatibilityEXT" => self.vk_get_device_micromap_compatibility_ext = unsafe { std::mem::transmute(address) },
            "vkGetMicromapBuildSizesEXT" => self.vk_get_micromap_build_sizes_ext = unsafe { std::mem::transmute(address) },
            "vkGetShaderModuleIdentifierEXT" => self.vk_get_shader_module_identifier_ext = unsafe { std::mem::transmute(address) },
            "vkGetShaderModuleCreateInfoIdentifierEXT" => self.vk_get_shader_module_create_info_identifier_ext = unsafe { std::mem::transmute(address) },
            "vkGetImageSubresourceLayout2KHR" => self.vk_get_image_subresource_layout2_khr = unsafe { std::mem::transmute(address) },
            "vkGetPipelinePropertiesEXT" => self.vk_get_pipeline_properties_ext = unsafe { std::mem::transmute(address) },
            "vkExportMetalObjectsEXT" => self.vk_export_metal_objects_ext = unsafe { std::mem::transmute(address) },
            "vkGetFramebufferTilePropertiesQCOM" => self.vk_get_framebuffer_tile_properties_qcom = unsafe { std::mem::transmute(address) },
            "vkGetDynamicRenderingTilePropertiesQCOM" => self.vk_get_dynamic_rendering_tile_properties_qcom = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceOpticalFlowImageFormatsNV" => self.vk_get_physical_device_optical_flow_image_formats_nv = unsafe { std::mem::transmute(address) },
            "vkCreateOpticalFlowSessionNV" => self.vk_create_optical_flow_session_nv = unsafe { std::mem::transmute(address) },
            "vkDestroyOpticalFlowSessionNV" => self.vk_destroy_optical_flow_session_nv = unsafe { std::mem::transmute(address) },
            "vkBindOpticalFlowSessionImageNV" => self.vk_bind_optical_flow_session_image_nv = unsafe { std::mem::transmute(address) },
            "vkCmdOpticalFlowExecuteNV" => self.vk_cmd_optical_flow_execute_nv = unsafe { std::mem::transmute(address) },
            "vkGetDeviceFaultInfoEXT" => self.vk_get_device_fault_info_ext = unsafe { std::mem::transmute(address) },
            "vkCmdSetDepthBias2EXT" => self.vk_cmd_set_depth_bias2_ext = unsafe { std::mem::transmute(address) },
            "vkReleaseSwapchainImagesEXT" => self.vk_release_swapchain_images_ext = unsafe { std::mem::transmute(address) },
            "vkGetDeviceImageSubresourceLayoutKHR" => self.vk_get_device_image_subresource_layout_khr = unsafe { std::mem::transmute(address) },
            "vkMapMemory2KHR" => self.vk_map_memory2_khr = unsafe { std::mem::transmute(address) },
            "vkUnmapMemory2KHR" => self.vk_unmap_memory2_khr = unsafe { std::mem::transmute(address) },
            "vkCreateShadersEXT" => self.vk_create_shaders_ext = unsafe { std::mem::transmute(address) },
            "vkDestroyShaderEXT" => self.vk_destroy_shader_ext = unsafe { std::mem::transmute(address) },
            "vkGetShaderBinaryDataEXT" => self.vk_get_shader_binary_data_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBindShadersEXT" => self.vk_cmd_bind_shaders_ext = unsafe { std::mem::transmute(address) },
            "vkGetScreenBufferPropertiesQNX" => self.vk_get_screen_buffer_properties_qnx = unsafe { std::mem::transmute(address) },
            "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR" => self.vk_get_physical_device_cooperative_matrix_properties_khr = unsafe { std::mem::transmute(address) },
            "vkGetExecutionGraphPipelineScratchSizeAMDX" => self.vk_get_execution_graph_pipeline_scratch_size_amdx = unsafe { std::mem::transmute(address) },
            "vkGetExecutionGraphPipelineNodeIndexAMDX" => self.vk_get_execution_graph_pipeline_node_index_amdx = unsafe { std::mem::transmute(address) },
            "vkCreateExecutionGraphPipelinesAMDX" => self.vk_create_execution_graph_pipelines_amdx = unsafe { std::mem::transmute(address) },
            "vkCmdInitializeGraphScratchMemoryAMDX" => self.vk_cmd_initialize_graph_scratch_memory_amdx = unsafe { std::mem::transmute(address) },
            "vkCmdDispatchGraphAMDX" => self.vk_cmd_dispatch_graph_amdx = unsafe { std::mem::transmute(address) },
            "vkCmdDispatchGraphIndirectAMDX" => self.vk_cmd_dispatch_graph_indirect_amdx = unsafe { std::mem::transmute(address) },
            "vkCmdDispatchGraphIndirectCountAMDX" => self.vk_cmd_dispatch_graph_indirect_count_amdx = unsafe { std::mem::transmute(address) },
            "vkCmdBindDescriptorSets2KHR" => self.vk_cmd_bind_descriptor_sets2_khr = unsafe { std::mem::transmute(address) },
            "vkCmdPushConstants2KHR" => self.vk_cmd_push_constants2_khr = unsafe { std::mem::transmute(address) },
            "vkCmdPushDescriptorSet2KHR" => self.vk_cmd_push_descriptor_set2_khr = unsafe { std::mem::transmute(address) },
            "vkCmdPushDescriptorSetWithTemplate2KHR" => self.vk_cmd_push_descriptor_set_with_template2_khr = unsafe { std::mem::transmute(address) },
            "vkCmdSetDescriptorBufferOffsets2EXT" => self.vk_cmd_set_descriptor_buffer_offsets2_ext = unsafe { std::mem::transmute(address) },
            "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT" => self.vk_cmd_bind_descriptor_buffer_embedded_samplers2_ext = unsafe { std::mem::transmute(address) },
            "vkSetLatencySleepModeNV" => self.vk_set_latency_sleep_mode_nv = unsafe { std::mem::transmute(address) },
            "vkLatencySleepNV" => self.vk_latency_sleep_nv = unsafe { std::mem::transmute(address) },
            "vkSetLatencyMarkerNV" => self.vk_set_latency_marker_nv = unsafe { std::mem::transmute(address) },
            "vkGetLatencyTimingsNV" => self.vk_get_latency_timings_nv = unsafe { std::mem::transmute(address) },
            "vkQueueNotifyOutOfBandNV" => self.vk_queue_notify_out_of_band_nv = unsafe { std::mem::transmute(address) },
            "vkCmdSetRenderingAttachmentLocationsKHR" => self.vk_cmd_set_rendering_attachment_locations_khr = unsafe { std::mem::transmute(address) },
            "vkCmdSetRenderingInputAttachmentIndicesKHR" => self.vk_cmd_set_rendering_input_attachment_indices_khr = unsafe { std::mem::transmute(address) },
            _ => panic!("unable to set address for function with name `{}`, field do not exists", name)
        }
    }
}

unsafe impl Sync for FunctionAddressTable {}

unsafe impl Send for FunctionAddressTable {}
