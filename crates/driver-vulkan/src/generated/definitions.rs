//! THIS FILE IS GENERATED BY TOOL, DO NOT MODIFY.

use ash::vk;
use std::ffi::{c_char, c_void};

pub(crate) fn get_function_address(name: &str) -> *const c_void {
    match name {
        "vkCreateInstance" => vkCreateInstance as *const c_void,
        "vkDestroyInstance" => vkDestroyInstance as *const c_void,
        "vkEnumeratePhysicalDevices" => vkEnumeratePhysicalDevices as *const c_void,
        "vkGetDeviceProcAddr" => vkGetDeviceProcAddr as *const c_void,
        "vkGetInstanceProcAddr" => vkGetInstanceProcAddr as *const c_void,
        "vkGetPhysicalDeviceProperties" => vkGetPhysicalDeviceProperties as *const c_void,
        "vkGetPhysicalDeviceQueueFamilyProperties" => {
            vkGetPhysicalDeviceQueueFamilyProperties as *const c_void
        }
        "vkGetPhysicalDeviceMemoryProperties" => {
            vkGetPhysicalDeviceMemoryProperties as *const c_void
        }
        "vkGetPhysicalDeviceFeatures" => vkGetPhysicalDeviceFeatures as *const c_void,
        "vkGetPhysicalDeviceFormatProperties" => {
            vkGetPhysicalDeviceFormatProperties as *const c_void
        }
        "vkGetPhysicalDeviceImageFormatProperties" => {
            vkGetPhysicalDeviceImageFormatProperties as *const c_void
        }
        "vkCreateDevice" => vkCreateDevice as *const c_void,
        "vkDestroyDevice" => vkDestroyDevice as *const c_void,
        "vkEnumerateInstanceVersion" => vkEnumerateInstanceVersion as *const c_void,
        "vkEnumerateInstanceLayerProperties" => vkEnumerateInstanceLayerProperties as *const c_void,
        "vkEnumerateInstanceExtensionProperties" => {
            vkEnumerateInstanceExtensionProperties as *const c_void
        }
        "vkEnumerateDeviceLayerProperties" => vkEnumerateDeviceLayerProperties as *const c_void,
        "vkEnumerateDeviceExtensionProperties" => {
            vkEnumerateDeviceExtensionProperties as *const c_void
        }
        "vkGetDeviceQueue" => vkGetDeviceQueue as *const c_void,
        "vkQueueSubmit" => vkQueueSubmit as *const c_void,
        "vkQueueWaitIdle" => vkQueueWaitIdle as *const c_void,
        "vkDeviceWaitIdle" => vkDeviceWaitIdle as *const c_void,
        "vkAllocateMemory" => vkAllocateMemory as *const c_void,
        "vkFreeMemory" => vkFreeMemory as *const c_void,
        "vkMapMemory" => vkMapMemory as *const c_void,
        "vkUnmapMemory" => vkUnmapMemory as *const c_void,
        "vkFlushMappedMemoryRanges" => vkFlushMappedMemoryRanges as *const c_void,
        "vkInvalidateMappedMemoryRanges" => vkInvalidateMappedMemoryRanges as *const c_void,
        "vkGetDeviceMemoryCommitment" => vkGetDeviceMemoryCommitment as *const c_void,
        "vkGetBufferMemoryRequirements" => vkGetBufferMemoryRequirements as *const c_void,
        "vkBindBufferMemory" => vkBindBufferMemory as *const c_void,
        "vkGetImageMemoryRequirements" => vkGetImageMemoryRequirements as *const c_void,
        "vkBindImageMemory" => vkBindImageMemory as *const c_void,
        "vkGetImageSparseMemoryRequirements" => vkGetImageSparseMemoryRequirements as *const c_void,
        "vkGetPhysicalDeviceSparseImageFormatProperties" => {
            vkGetPhysicalDeviceSparseImageFormatProperties as *const c_void
        }
        "vkQueueBindSparse" => vkQueueBindSparse as *const c_void,
        "vkCreateFence" => vkCreateFence as *const c_void,
        "vkDestroyFence" => vkDestroyFence as *const c_void,
        "vkResetFences" => vkResetFences as *const c_void,
        "vkGetFenceStatus" => vkGetFenceStatus as *const c_void,
        "vkWaitForFences" => vkWaitForFences as *const c_void,
        "vkCreateSemaphore" => vkCreateSemaphore as *const c_void,
        "vkDestroySemaphore" => vkDestroySemaphore as *const c_void,
        "vkCreateEvent" => vkCreateEvent as *const c_void,
        "vkDestroyEvent" => vkDestroyEvent as *const c_void,
        "vkGetEventStatus" => vkGetEventStatus as *const c_void,
        "vkSetEvent" => vkSetEvent as *const c_void,
        "vkResetEvent" => vkResetEvent as *const c_void,
        "vkCreateQueryPool" => vkCreateQueryPool as *const c_void,
        "vkDestroyQueryPool" => vkDestroyQueryPool as *const c_void,
        "vkGetQueryPoolResults" => vkGetQueryPoolResults as *const c_void,
        "vkResetQueryPool" => vkResetQueryPool as *const c_void,
        "vkCreateBuffer" => vkCreateBuffer as *const c_void,
        "vkDestroyBuffer" => vkDestroyBuffer as *const c_void,
        "vkCreateBufferView" => vkCreateBufferView as *const c_void,
        "vkDestroyBufferView" => vkDestroyBufferView as *const c_void,
        "vkCreateImage" => vkCreateImage as *const c_void,
        "vkDestroyImage" => vkDestroyImage as *const c_void,
        "vkGetImageSubresourceLayout" => vkGetImageSubresourceLayout as *const c_void,
        "vkCreateImageView" => vkCreateImageView as *const c_void,
        "vkDestroyImageView" => vkDestroyImageView as *const c_void,
        "vkCreateShaderModule" => vkCreateShaderModule as *const c_void,
        "vkDestroyShaderModule" => vkDestroyShaderModule as *const c_void,
        "vkCreatePipelineCache" => vkCreatePipelineCache as *const c_void,
        "vkDestroyPipelineCache" => vkDestroyPipelineCache as *const c_void,
        "vkGetPipelineCacheData" => vkGetPipelineCacheData as *const c_void,
        "vkMergePipelineCaches" => vkMergePipelineCaches as *const c_void,
        "vkCreateGraphicsPipelines" => vkCreateGraphicsPipelines as *const c_void,
        "vkCreateComputePipelines" => vkCreateComputePipelines as *const c_void,
        "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" => {
            vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI as *const c_void
        }
        "vkDestroyPipeline" => vkDestroyPipeline as *const c_void,
        "vkCreatePipelineLayout" => vkCreatePipelineLayout as *const c_void,
        "vkDestroyPipelineLayout" => vkDestroyPipelineLayout as *const c_void,
        "vkCreateSampler" => vkCreateSampler as *const c_void,
        "vkDestroySampler" => vkDestroySampler as *const c_void,
        "vkCreateDescriptorSetLayout" => vkCreateDescriptorSetLayout as *const c_void,
        "vkDestroyDescriptorSetLayout" => vkDestroyDescriptorSetLayout as *const c_void,
        "vkCreateDescriptorPool" => vkCreateDescriptorPool as *const c_void,
        "vkDestroyDescriptorPool" => vkDestroyDescriptorPool as *const c_void,
        "vkResetDescriptorPool" => vkResetDescriptorPool as *const c_void,
        "vkAllocateDescriptorSets" => vkAllocateDescriptorSets as *const c_void,
        "vkFreeDescriptorSets" => vkFreeDescriptorSets as *const c_void,
        "vkUpdateDescriptorSets" => vkUpdateDescriptorSets as *const c_void,
        "vkCreateFramebuffer" => vkCreateFramebuffer as *const c_void,
        "vkDestroyFramebuffer" => vkDestroyFramebuffer as *const c_void,
        "vkCreateRenderPass" => vkCreateRenderPass as *const c_void,
        "vkDestroyRenderPass" => vkDestroyRenderPass as *const c_void,
        "vkGetRenderAreaGranularity" => vkGetRenderAreaGranularity as *const c_void,
        "vkGetRenderingAreaGranularityKHR" => vkGetRenderingAreaGranularityKHR as *const c_void,
        "vkCreateCommandPool" => vkCreateCommandPool as *const c_void,
        "vkDestroyCommandPool" => vkDestroyCommandPool as *const c_void,
        "vkResetCommandPool" => vkResetCommandPool as *const c_void,
        "vkAllocateCommandBuffers" => vkAllocateCommandBuffers as *const c_void,
        "vkFreeCommandBuffers" => vkFreeCommandBuffers as *const c_void,
        "vkBeginCommandBuffer" => vkBeginCommandBuffer as *const c_void,
        "vkEndCommandBuffer" => vkEndCommandBuffer as *const c_void,
        "vkResetCommandBuffer" => vkResetCommandBuffer as *const c_void,
        "vkCmdBindPipeline" => vkCmdBindPipeline as *const c_void,
        "vkCmdSetAttachmentFeedbackLoopEnableEXT" => {
            vkCmdSetAttachmentFeedbackLoopEnableEXT as *const c_void
        }
        "vkCmdSetViewport" => vkCmdSetViewport as *const c_void,
        "vkCmdSetScissor" => vkCmdSetScissor as *const c_void,
        "vkCmdSetLineWidth" => vkCmdSetLineWidth as *const c_void,
        "vkCmdSetDepthBias" => vkCmdSetDepthBias as *const c_void,
        "vkCmdSetBlendConstants" => vkCmdSetBlendConstants as *const c_void,
        "vkCmdSetDepthBounds" => vkCmdSetDepthBounds as *const c_void,
        "vkCmdSetStencilCompareMask" => vkCmdSetStencilCompareMask as *const c_void,
        "vkCmdSetStencilWriteMask" => vkCmdSetStencilWriteMask as *const c_void,
        "vkCmdSetStencilReference" => vkCmdSetStencilReference as *const c_void,
        "vkCmdBindDescriptorSets" => vkCmdBindDescriptorSets as *const c_void,
        "vkCmdBindIndexBuffer" => vkCmdBindIndexBuffer as *const c_void,
        "vkCmdBindVertexBuffers" => vkCmdBindVertexBuffers as *const c_void,
        "vkCmdDraw" => vkCmdDraw as *const c_void,
        "vkCmdDrawIndexed" => vkCmdDrawIndexed as *const c_void,
        "vkCmdDrawMultiEXT" => vkCmdDrawMultiEXT as *const c_void,
        "vkCmdDrawMultiIndexedEXT" => vkCmdDrawMultiIndexedEXT as *const c_void,
        "vkCmdDrawIndirect" => vkCmdDrawIndirect as *const c_void,
        "vkCmdDrawIndexedIndirect" => vkCmdDrawIndexedIndirect as *const c_void,
        "vkCmdDispatch" => vkCmdDispatch as *const c_void,
        "vkCmdDispatchIndirect" => vkCmdDispatchIndirect as *const c_void,
        "vkCmdSubpassShadingHUAWEI" => vkCmdSubpassShadingHUAWEI as *const c_void,
        "vkCmdDrawClusterHUAWEI" => vkCmdDrawClusterHUAWEI as *const c_void,
        "vkCmdDrawClusterIndirectHUAWEI" => vkCmdDrawClusterIndirectHUAWEI as *const c_void,
        "vkCmdUpdatePipelineIndirectBufferNV" => {
            vkCmdUpdatePipelineIndirectBufferNV as *const c_void
        }
        "vkCmdCopyBuffer" => vkCmdCopyBuffer as *const c_void,
        "vkCmdCopyImage" => vkCmdCopyImage as *const c_void,
        "vkCmdBlitImage" => vkCmdBlitImage as *const c_void,
        "vkCmdCopyBufferToImage" => vkCmdCopyBufferToImage as *const c_void,
        "vkCmdCopyImageToBuffer" => vkCmdCopyImageToBuffer as *const c_void,
        "vkCmdCopyMemoryIndirectNV" => vkCmdCopyMemoryIndirectNV as *const c_void,
        "vkCmdCopyMemoryToImageIndirectNV" => vkCmdCopyMemoryToImageIndirectNV as *const c_void,
        "vkCmdUpdateBuffer" => vkCmdUpdateBuffer as *const c_void,
        "vkCmdFillBuffer" => vkCmdFillBuffer as *const c_void,
        "vkCmdClearColorImage" => vkCmdClearColorImage as *const c_void,
        "vkCmdClearDepthStencilImage" => vkCmdClearDepthStencilImage as *const c_void,
        "vkCmdClearAttachments" => vkCmdClearAttachments as *const c_void,
        "vkCmdResolveImage" => vkCmdResolveImage as *const c_void,
        "vkCmdSetEvent" => vkCmdSetEvent as *const c_void,
        "vkCmdResetEvent" => vkCmdResetEvent as *const c_void,
        "vkCmdWaitEvents" => vkCmdWaitEvents as *const c_void,
        "vkCmdPipelineBarrier" => vkCmdPipelineBarrier as *const c_void,
        "vkCmdBeginQuery" => vkCmdBeginQuery as *const c_void,
        "vkCmdEndQuery" => vkCmdEndQuery as *const c_void,
        "vkCmdBeginConditionalRenderingEXT" => vkCmdBeginConditionalRenderingEXT as *const c_void,
        "vkCmdEndConditionalRenderingEXT" => vkCmdEndConditionalRenderingEXT as *const c_void,
        "vkCmdResetQueryPool" => vkCmdResetQueryPool as *const c_void,
        "vkCmdWriteTimestamp" => vkCmdWriteTimestamp as *const c_void,
        "vkCmdCopyQueryPoolResults" => vkCmdCopyQueryPoolResults as *const c_void,
        "vkCmdPushConstants" => vkCmdPushConstants as *const c_void,
        "vkCmdBeginRenderPass" => vkCmdBeginRenderPass as *const c_void,
        "vkCmdNextSubpass" => vkCmdNextSubpass as *const c_void,
        "vkCmdEndRenderPass" => vkCmdEndRenderPass as *const c_void,
        "vkCmdExecuteCommands" => vkCmdExecuteCommands as *const c_void,
        "vkCreateAndroidSurfaceKHR" => vkCreateAndroidSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceDisplayPropertiesKHR" => {
            vkGetPhysicalDeviceDisplayPropertiesKHR as *const c_void
        }
        "vkGetPhysicalDeviceDisplayPlanePropertiesKHR" => {
            vkGetPhysicalDeviceDisplayPlanePropertiesKHR as *const c_void
        }
        "vkGetDisplayPlaneSupportedDisplaysKHR" => {
            vkGetDisplayPlaneSupportedDisplaysKHR as *const c_void
        }
        "vkGetDisplayModePropertiesKHR" => vkGetDisplayModePropertiesKHR as *const c_void,
        "vkCreateDisplayModeKHR" => vkCreateDisplayModeKHR as *const c_void,
        "vkGetDisplayPlaneCapabilitiesKHR" => vkGetDisplayPlaneCapabilitiesKHR as *const c_void,
        "vkCreateDisplayPlaneSurfaceKHR" => vkCreateDisplayPlaneSurfaceKHR as *const c_void,
        "vkCreateSharedSwapchainsKHR" => vkCreateSharedSwapchainsKHR as *const c_void,
        "vkDestroySurfaceKHR" => vkDestroySurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceSurfaceSupportKHR" => {
            vkGetPhysicalDeviceSurfaceSupportKHR as *const c_void
        }
        "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" => {
            vkGetPhysicalDeviceSurfaceCapabilitiesKHR as *const c_void
        }
        "vkGetPhysicalDeviceSurfaceFormatsKHR" => {
            vkGetPhysicalDeviceSurfaceFormatsKHR as *const c_void
        }
        "vkGetPhysicalDeviceSurfacePresentModesKHR" => {
            vkGetPhysicalDeviceSurfacePresentModesKHR as *const c_void
        }
        "vkCreateSwapchainKHR" => vkCreateSwapchainKHR as *const c_void,
        "vkDestroySwapchainKHR" => vkDestroySwapchainKHR as *const c_void,
        "vkGetSwapchainImagesKHR" => vkGetSwapchainImagesKHR as *const c_void,
        "vkAcquireNextImageKHR" => vkAcquireNextImageKHR as *const c_void,
        "vkQueuePresentKHR" => vkQueuePresentKHR as *const c_void,
        "vkCreateViSurfaceNN" => vkCreateViSurfaceNN as *const c_void,
        "vkCreateWaylandSurfaceKHR" => vkCreateWaylandSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceWaylandPresentationSupportKHR" => {
            vkGetPhysicalDeviceWaylandPresentationSupportKHR as *const c_void
        }
        "vkCreateWin32SurfaceKHR" => vkCreateWin32SurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceWin32PresentationSupportKHR" => {
            vkGetPhysicalDeviceWin32PresentationSupportKHR as *const c_void
        }
        "vkCreateXlibSurfaceKHR" => vkCreateXlibSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceXlibPresentationSupportKHR" => {
            vkGetPhysicalDeviceXlibPresentationSupportKHR as *const c_void
        }
        "vkCreateXcbSurfaceKHR" => vkCreateXcbSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceXcbPresentationSupportKHR" => {
            vkGetPhysicalDeviceXcbPresentationSupportKHR as *const c_void
        }
        "vkCreateDirectFBSurfaceEXT" => vkCreateDirectFBSurfaceEXT as *const c_void,
        "vkGetPhysicalDeviceDirectFBPresentationSupportEXT" => {
            vkGetPhysicalDeviceDirectFBPresentationSupportEXT as *const c_void
        }
        "vkCreateImagePipeSurfaceFUCHSIA" => vkCreateImagePipeSurfaceFUCHSIA as *const c_void,
        "vkCreateStreamDescriptorSurfaceGGP" => vkCreateStreamDescriptorSurfaceGGP as *const c_void,
        "vkCreateScreenSurfaceQNX" => vkCreateScreenSurfaceQNX as *const c_void,
        "vkGetPhysicalDeviceScreenPresentationSupportQNX" => {
            vkGetPhysicalDeviceScreenPresentationSupportQNX as *const c_void
        }
        "vkCreateDebugReportCallbackEXT" => vkCreateDebugReportCallbackEXT as *const c_void,
        "vkDestroyDebugReportCallbackEXT" => vkDestroyDebugReportCallbackEXT as *const c_void,
        "vkDebugReportMessageEXT" => vkDebugReportMessageEXT as *const c_void,
        "vkDebugMarkerSetObjectNameEXT" => vkDebugMarkerSetObjectNameEXT as *const c_void,
        "vkDebugMarkerSetObjectTagEXT" => vkDebugMarkerSetObjectTagEXT as *const c_void,
        "vkCmdDebugMarkerBeginEXT" => vkCmdDebugMarkerBeginEXT as *const c_void,
        "vkCmdDebugMarkerEndEXT" => vkCmdDebugMarkerEndEXT as *const c_void,
        "vkCmdDebugMarkerInsertEXT" => vkCmdDebugMarkerInsertEXT as *const c_void,
        "vkGetPhysicalDeviceExternalImageFormatPropertiesNV" => {
            vkGetPhysicalDeviceExternalImageFormatPropertiesNV as *const c_void
        }
        "vkGetMemoryWin32HandleNV" => vkGetMemoryWin32HandleNV as *const c_void,
        "vkCmdExecuteGeneratedCommandsNV" => vkCmdExecuteGeneratedCommandsNV as *const c_void,
        "vkCmdPreprocessGeneratedCommandsNV" => vkCmdPreprocessGeneratedCommandsNV as *const c_void,
        "vkCmdBindPipelineShaderGroupNV" => vkCmdBindPipelineShaderGroupNV as *const c_void,
        "vkGetGeneratedCommandsMemoryRequirementsNV" => {
            vkGetGeneratedCommandsMemoryRequirementsNV as *const c_void
        }
        "vkCreateIndirectCommandsLayoutNV" => vkCreateIndirectCommandsLayoutNV as *const c_void,
        "vkDestroyIndirectCommandsLayoutNV" => vkDestroyIndirectCommandsLayoutNV as *const c_void,
        "vkGetPhysicalDeviceFeatures2" => vkGetPhysicalDeviceFeatures2 as *const c_void,
        "vkGetPhysicalDeviceProperties2" => vkGetPhysicalDeviceProperties2 as *const c_void,
        "vkGetPhysicalDeviceFormatProperties2" => {
            vkGetPhysicalDeviceFormatProperties2 as *const c_void
        }
        "vkGetPhysicalDeviceImageFormatProperties2" => {
            vkGetPhysicalDeviceImageFormatProperties2 as *const c_void
        }
        "vkGetPhysicalDeviceQueueFamilyProperties2" => {
            vkGetPhysicalDeviceQueueFamilyProperties2 as *const c_void
        }
        "vkGetPhysicalDeviceMemoryProperties2" => {
            vkGetPhysicalDeviceMemoryProperties2 as *const c_void
        }
        "vkGetPhysicalDeviceSparseImageFormatProperties2" => {
            vkGetPhysicalDeviceSparseImageFormatProperties2 as *const c_void
        }
        "vkCmdPushDescriptorSetKHR" => vkCmdPushDescriptorSetKHR as *const c_void,
        "vkTrimCommandPool" => vkTrimCommandPool as *const c_void,
        "vkGetPhysicalDeviceExternalBufferProperties" => {
            vkGetPhysicalDeviceExternalBufferProperties as *const c_void
        }
        "vkGetMemoryWin32HandleKHR" => vkGetMemoryWin32HandleKHR as *const c_void,
        "vkGetMemoryWin32HandlePropertiesKHR" => {
            vkGetMemoryWin32HandlePropertiesKHR as *const c_void
        }
        "vkGetMemoryFdKHR" => vkGetMemoryFdKHR as *const c_void,
        "vkGetMemoryFdPropertiesKHR" => vkGetMemoryFdPropertiesKHR as *const c_void,
        "vkGetMemoryZirconHandleFUCHSIA" => vkGetMemoryZirconHandleFUCHSIA as *const c_void,
        "vkGetMemoryZirconHandlePropertiesFUCHSIA" => {
            vkGetMemoryZirconHandlePropertiesFUCHSIA as *const c_void
        }
        "vkGetMemoryRemoteAddressNV" => vkGetMemoryRemoteAddressNV as *const c_void,
        "vkGetPhysicalDeviceExternalSemaphoreProperties" => {
            vkGetPhysicalDeviceExternalSemaphoreProperties as *const c_void
        }
        "vkGetSemaphoreWin32HandleKHR" => vkGetSemaphoreWin32HandleKHR as *const c_void,
        "vkImportSemaphoreWin32HandleKHR" => vkImportSemaphoreWin32HandleKHR as *const c_void,
        "vkGetSemaphoreFdKHR" => vkGetSemaphoreFdKHR as *const c_void,
        "vkImportSemaphoreFdKHR" => vkImportSemaphoreFdKHR as *const c_void,
        "vkGetSemaphoreZirconHandleFUCHSIA" => vkGetSemaphoreZirconHandleFUCHSIA as *const c_void,
        "vkImportSemaphoreZirconHandleFUCHSIA" => {
            vkImportSemaphoreZirconHandleFUCHSIA as *const c_void
        }
        "vkGetPhysicalDeviceExternalFenceProperties" => {
            vkGetPhysicalDeviceExternalFenceProperties as *const c_void
        }
        "vkGetFenceWin32HandleKHR" => vkGetFenceWin32HandleKHR as *const c_void,
        "vkImportFenceWin32HandleKHR" => vkImportFenceWin32HandleKHR as *const c_void,
        "vkGetFenceFdKHR" => vkGetFenceFdKHR as *const c_void,
        "vkImportFenceFdKHR" => vkImportFenceFdKHR as *const c_void,
        "vkReleaseDisplayEXT" => vkReleaseDisplayEXT as *const c_void,
        "vkAcquireXlibDisplayEXT" => vkAcquireXlibDisplayEXT as *const c_void,
        "vkGetRandROutputDisplayEXT" => vkGetRandROutputDisplayEXT as *const c_void,
        "vkAcquireWinrtDisplayNV" => vkAcquireWinrtDisplayNV as *const c_void,
        "vkGetWinrtDisplayNV" => vkGetWinrtDisplayNV as *const c_void,
        "vkDisplayPowerControlEXT" => vkDisplayPowerControlEXT as *const c_void,
        "vkRegisterDeviceEventEXT" => vkRegisterDeviceEventEXT as *const c_void,
        "vkRegisterDisplayEventEXT" => vkRegisterDisplayEventEXT as *const c_void,
        "vkGetSwapchainCounterEXT" => vkGetSwapchainCounterEXT as *const c_void,
        "vkGetPhysicalDeviceSurfaceCapabilities2EXT" => {
            vkGetPhysicalDeviceSurfaceCapabilities2EXT as *const c_void
        }
        "vkEnumeratePhysicalDeviceGroups" => vkEnumeratePhysicalDeviceGroups as *const c_void,
        "vkGetDeviceGroupPeerMemoryFeatures" => vkGetDeviceGroupPeerMemoryFeatures as *const c_void,
        "vkBindBufferMemory2" => vkBindBufferMemory2 as *const c_void,
        "vkBindImageMemory2" => vkBindImageMemory2 as *const c_void,
        "vkCmdSetDeviceMask" => vkCmdSetDeviceMask as *const c_void,
        "vkGetDeviceGroupPresentCapabilitiesKHR" => {
            vkGetDeviceGroupPresentCapabilitiesKHR as *const c_void
        }
        "vkGetDeviceGroupSurfacePresentModesKHR" => {
            vkGetDeviceGroupSurfacePresentModesKHR as *const c_void
        }
        "vkAcquireNextImage2KHR" => vkAcquireNextImage2KHR as *const c_void,
        "vkCmdDispatchBase" => vkCmdDispatchBase as *const c_void,
        "vkGetPhysicalDevicePresentRectanglesKHR" => {
            vkGetPhysicalDevicePresentRectanglesKHR as *const c_void
        }
        "vkCreateDescriptorUpdateTemplate" => vkCreateDescriptorUpdateTemplate as *const c_void,
        "vkDestroyDescriptorUpdateTemplate" => vkDestroyDescriptorUpdateTemplate as *const c_void,
        "vkUpdateDescriptorSetWithTemplate" => vkUpdateDescriptorSetWithTemplate as *const c_void,
        "vkCmdPushDescriptorSetWithTemplateKHR" => {
            vkCmdPushDescriptorSetWithTemplateKHR as *const c_void
        }
        "vkSetHdrMetadataEXT" => vkSetHdrMetadataEXT as *const c_void,
        "vkGetSwapchainStatusKHR" => vkGetSwapchainStatusKHR as *const c_void,
        "vkGetRefreshCycleDurationGOOGLE" => vkGetRefreshCycleDurationGOOGLE as *const c_void,
        "vkGetPastPresentationTimingGOOGLE" => vkGetPastPresentationTimingGOOGLE as *const c_void,
        "vkCreateIOSSurfaceMVK" => vkCreateIOSSurfaceMVK as *const c_void,
        "vkCreateMacOSSurfaceMVK" => vkCreateMacOSSurfaceMVK as *const c_void,
        "vkCreateMetalSurfaceEXT" => vkCreateMetalSurfaceEXT as *const c_void,
        "vkCmdSetViewportWScalingNV" => vkCmdSetViewportWScalingNV as *const c_void,
        "vkCmdSetDiscardRectangleEXT" => vkCmdSetDiscardRectangleEXT as *const c_void,
        "vkCmdSetDiscardRectangleEnableEXT" => vkCmdSetDiscardRectangleEnableEXT as *const c_void,
        "vkCmdSetDiscardRectangleModeEXT" => vkCmdSetDiscardRectangleModeEXT as *const c_void,
        "vkCmdSetSampleLocationsEXT" => vkCmdSetSampleLocationsEXT as *const c_void,
        "vkGetPhysicalDeviceMultisamplePropertiesEXT" => {
            vkGetPhysicalDeviceMultisamplePropertiesEXT as *const c_void
        }
        "vkGetPhysicalDeviceSurfaceCapabilities2KHR" => {
            vkGetPhysicalDeviceSurfaceCapabilities2KHR as *const c_void
        }
        "vkGetPhysicalDeviceSurfaceFormats2KHR" => {
            vkGetPhysicalDeviceSurfaceFormats2KHR as *const c_void
        }
        "vkGetPhysicalDeviceDisplayProperties2KHR" => {
            vkGetPhysicalDeviceDisplayProperties2KHR as *const c_void
        }
        "vkGetPhysicalDeviceDisplayPlaneProperties2KHR" => {
            vkGetPhysicalDeviceDisplayPlaneProperties2KHR as *const c_void
        }
        "vkGetDisplayModeProperties2KHR" => vkGetDisplayModeProperties2KHR as *const c_void,
        "vkGetDisplayPlaneCapabilities2KHR" => vkGetDisplayPlaneCapabilities2KHR as *const c_void,
        "vkGetBufferMemoryRequirements2" => vkGetBufferMemoryRequirements2 as *const c_void,
        "vkGetImageMemoryRequirements2" => vkGetImageMemoryRequirements2 as *const c_void,
        "vkGetImageSparseMemoryRequirements2" => {
            vkGetImageSparseMemoryRequirements2 as *const c_void
        }
        "vkGetDeviceBufferMemoryRequirements" => {
            vkGetDeviceBufferMemoryRequirements as *const c_void
        }
        "vkGetDeviceImageMemoryRequirements" => vkGetDeviceImageMemoryRequirements as *const c_void,
        "vkGetDeviceImageSparseMemoryRequirements" => {
            vkGetDeviceImageSparseMemoryRequirements as *const c_void
        }
        "vkCreateSamplerYcbcrConversion" => vkCreateSamplerYcbcrConversion as *const c_void,
        "vkDestroySamplerYcbcrConversion" => vkDestroySamplerYcbcrConversion as *const c_void,
        "vkGetDeviceQueue2" => vkGetDeviceQueue2 as *const c_void,
        "vkCreateValidationCacheEXT" => vkCreateValidationCacheEXT as *const c_void,
        "vkDestroyValidationCacheEXT" => vkDestroyValidationCacheEXT as *const c_void,
        "vkGetValidationCacheDataEXT" => vkGetValidationCacheDataEXT as *const c_void,
        "vkMergeValidationCachesEXT" => vkMergeValidationCachesEXT as *const c_void,
        "vkGetDescriptorSetLayoutSupport" => vkGetDescriptorSetLayoutSupport as *const c_void,
        "vkGetSwapchainGrallocUsageANDROID" => vkGetSwapchainGrallocUsageANDROID as *const c_void,
        "vkGetSwapchainGrallocUsage2ANDROID" => vkGetSwapchainGrallocUsage2ANDROID as *const c_void,
        "vkAcquireImageANDROID" => vkAcquireImageANDROID as *const c_void,
        "vkQueueSignalReleaseImageANDROID" => vkQueueSignalReleaseImageANDROID as *const c_void,
        "vkGetShaderInfoAMD" => vkGetShaderInfoAMD as *const c_void,
        "vkSetLocalDimmingAMD" => vkSetLocalDimmingAMD as *const c_void,
        "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR" => {
            vkGetPhysicalDeviceCalibrateableTimeDomainsKHR as *const c_void
        }
        "vkGetCalibratedTimestampsKHR" => vkGetCalibratedTimestampsKHR as *const c_void,
        "vkSetDebugUtilsObjectNameEXT" => vkSetDebugUtilsObjectNameEXT as *const c_void,
        "vkSetDebugUtilsObjectTagEXT" => vkSetDebugUtilsObjectTagEXT as *const c_void,
        "vkQueueBeginDebugUtilsLabelEXT" => vkQueueBeginDebugUtilsLabelEXT as *const c_void,
        "vkQueueEndDebugUtilsLabelEXT" => vkQueueEndDebugUtilsLabelEXT as *const c_void,
        "vkQueueInsertDebugUtilsLabelEXT" => vkQueueInsertDebugUtilsLabelEXT as *const c_void,
        "vkCmdBeginDebugUtilsLabelEXT" => vkCmdBeginDebugUtilsLabelEXT as *const c_void,
        "vkCmdEndDebugUtilsLabelEXT" => vkCmdEndDebugUtilsLabelEXT as *const c_void,
        "vkCmdInsertDebugUtilsLabelEXT" => vkCmdInsertDebugUtilsLabelEXT as *const c_void,
        "vkCreateDebugUtilsMessengerEXT" => vkCreateDebugUtilsMessengerEXT as *const c_void,
        "vkDestroyDebugUtilsMessengerEXT" => vkDestroyDebugUtilsMessengerEXT as *const c_void,
        "vkSubmitDebugUtilsMessageEXT" => vkSubmitDebugUtilsMessageEXT as *const c_void,
        "vkGetMemoryHostPointerPropertiesEXT" => {
            vkGetMemoryHostPointerPropertiesEXT as *const c_void
        }
        "vkCmdWriteBufferMarkerAMD" => vkCmdWriteBufferMarkerAMD as *const c_void,
        "vkCreateRenderPass2" => vkCreateRenderPass2 as *const c_void,
        "vkCmdBeginRenderPass2" => vkCmdBeginRenderPass2 as *const c_void,
        "vkCmdNextSubpass2" => vkCmdNextSubpass2 as *const c_void,
        "vkCmdEndRenderPass2" => vkCmdEndRenderPass2 as *const c_void,
        "vkGetSemaphoreCounterValue" => vkGetSemaphoreCounterValue as *const c_void,
        "vkWaitSemaphores" => vkWaitSemaphores as *const c_void,
        "vkSignalSemaphore" => vkSignalSemaphore as *const c_void,
        "vkGetAndroidHardwareBufferPropertiesANDROID" => {
            vkGetAndroidHardwareBufferPropertiesANDROID as *const c_void
        }
        "vkGetMemoryAndroidHardwareBufferANDROID" => {
            vkGetMemoryAndroidHardwareBufferANDROID as *const c_void
        }
        "vkCmdDrawIndirectCount" => vkCmdDrawIndirectCount as *const c_void,
        "vkCmdDrawIndexedIndirectCount" => vkCmdDrawIndexedIndirectCount as *const c_void,
        "vkCmdSetCheckpointNV" => vkCmdSetCheckpointNV as *const c_void,
        "vkGetQueueCheckpointDataNV" => vkGetQueueCheckpointDataNV as *const c_void,
        "vkCmdBindTransformFeedbackBuffersEXT" => {
            vkCmdBindTransformFeedbackBuffersEXT as *const c_void
        }
        "vkCmdBeginTransformFeedbackEXT" => vkCmdBeginTransformFeedbackEXT as *const c_void,
        "vkCmdEndTransformFeedbackEXT" => vkCmdEndTransformFeedbackEXT as *const c_void,
        "vkCmdBeginQueryIndexedEXT" => vkCmdBeginQueryIndexedEXT as *const c_void,
        "vkCmdEndQueryIndexedEXT" => vkCmdEndQueryIndexedEXT as *const c_void,
        "vkCmdDrawIndirectByteCountEXT" => vkCmdDrawIndirectByteCountEXT as *const c_void,
        "vkCmdSetExclusiveScissorNV" => vkCmdSetExclusiveScissorNV as *const c_void,
        "vkCmdSetExclusiveScissorEnableNV" => vkCmdSetExclusiveScissorEnableNV as *const c_void,
        "vkCmdBindShadingRateImageNV" => vkCmdBindShadingRateImageNV as *const c_void,
        "vkCmdSetViewportShadingRatePaletteNV" => {
            vkCmdSetViewportShadingRatePaletteNV as *const c_void
        }
        "vkCmdSetCoarseSampleOrderNV" => vkCmdSetCoarseSampleOrderNV as *const c_void,
        "vkCmdDrawMeshTasksNV" => vkCmdDrawMeshTasksNV as *const c_void,
        "vkCmdDrawMeshTasksIndirectNV" => vkCmdDrawMeshTasksIndirectNV as *const c_void,
        "vkCmdDrawMeshTasksIndirectCountNV" => vkCmdDrawMeshTasksIndirectCountNV as *const c_void,
        "vkCmdDrawMeshTasksEXT" => vkCmdDrawMeshTasksEXT as *const c_void,
        "vkCmdDrawMeshTasksIndirectEXT" => vkCmdDrawMeshTasksIndirectEXT as *const c_void,
        "vkCmdDrawMeshTasksIndirectCountEXT" => vkCmdDrawMeshTasksIndirectCountEXT as *const c_void,
        "vkCompileDeferredNV" => vkCompileDeferredNV as *const c_void,
        "vkCreateAccelerationStructureNV" => vkCreateAccelerationStructureNV as *const c_void,
        "vkCmdBindInvocationMaskHUAWEI" => vkCmdBindInvocationMaskHUAWEI as *const c_void,
        "vkDestroyAccelerationStructureKHR" => vkDestroyAccelerationStructureKHR as *const c_void,
        "vkDestroyAccelerationStructureNV" => vkDestroyAccelerationStructureNV as *const c_void,
        "vkGetAccelerationStructureMemoryRequirementsNV" => {
            vkGetAccelerationStructureMemoryRequirementsNV as *const c_void
        }
        "vkBindAccelerationStructureMemoryNV" => {
            vkBindAccelerationStructureMemoryNV as *const c_void
        }
        "vkCmdCopyAccelerationStructureNV" => vkCmdCopyAccelerationStructureNV as *const c_void,
        "vkCmdCopyAccelerationStructureKHR" => vkCmdCopyAccelerationStructureKHR as *const c_void,
        "vkCopyAccelerationStructureKHR" => vkCopyAccelerationStructureKHR as *const c_void,
        "vkCmdCopyAccelerationStructureToMemoryKHR" => {
            vkCmdCopyAccelerationStructureToMemoryKHR as *const c_void
        }
        "vkCopyAccelerationStructureToMemoryKHR" => {
            vkCopyAccelerationStructureToMemoryKHR as *const c_void
        }
        "vkCmdCopyMemoryToAccelerationStructureKHR" => {
            vkCmdCopyMemoryToAccelerationStructureKHR as *const c_void
        }
        "vkCopyMemoryToAccelerationStructureKHR" => {
            vkCopyMemoryToAccelerationStructureKHR as *const c_void
        }
        "vkCmdWriteAccelerationStructuresPropertiesKHR" => {
            vkCmdWriteAccelerationStructuresPropertiesKHR as *const c_void
        }
        "vkCmdWriteAccelerationStructuresPropertiesNV" => {
            vkCmdWriteAccelerationStructuresPropertiesNV as *const c_void
        }
        "vkCmdBuildAccelerationStructureNV" => vkCmdBuildAccelerationStructureNV as *const c_void,
        "vkWriteAccelerationStructuresPropertiesKHR" => {
            vkWriteAccelerationStructuresPropertiesKHR as *const c_void
        }
        "vkCmdTraceRaysKHR" => vkCmdTraceRaysKHR as *const c_void,
        "vkCmdTraceRaysNV" => vkCmdTraceRaysNV as *const c_void,
        "vkGetRayTracingShaderGroupHandlesKHR" => {
            vkGetRayTracingShaderGroupHandlesKHR as *const c_void
        }
        "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" => {
            vkGetRayTracingCaptureReplayShaderGroupHandlesKHR as *const c_void
        }
        "vkGetAccelerationStructureHandleNV" => vkGetAccelerationStructureHandleNV as *const c_void,
        "vkCreateRayTracingPipelinesNV" => vkCreateRayTracingPipelinesNV as *const c_void,
        "vkCreateRayTracingPipelinesKHR" => vkCreateRayTracingPipelinesKHR as *const c_void,
        "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" => {
            vkGetPhysicalDeviceCooperativeMatrixPropertiesNV as *const c_void
        }
        "vkCmdTraceRaysIndirectKHR" => vkCmdTraceRaysIndirectKHR as *const c_void,
        "vkCmdTraceRaysIndirect2KHR" => vkCmdTraceRaysIndirect2KHR as *const c_void,
        "vkGetDeviceAccelerationStructureCompatibilityKHR" => {
            vkGetDeviceAccelerationStructureCompatibilityKHR as *const c_void
        }
        "vkGetRayTracingShaderGroupStackSizeKHR" => {
            vkGetRayTracingShaderGroupStackSizeKHR as *const c_void
        }
        "vkCmdSetRayTracingPipelineStackSizeKHR" => {
            vkCmdSetRayTracingPipelineStackSizeKHR as *const c_void
        }
        "vkGetImageViewHandleNVX" => vkGetImageViewHandleNVX as *const c_void,
        "vkGetImageViewAddressNVX" => vkGetImageViewAddressNVX as *const c_void,
        "vkGetPhysicalDeviceSurfacePresentModes2EXT" => {
            vkGetPhysicalDeviceSurfacePresentModes2EXT as *const c_void
        }
        "vkGetDeviceGroupSurfacePresentModes2EXT" => {
            vkGetDeviceGroupSurfacePresentModes2EXT as *const c_void
        }
        "vkAcquireFullScreenExclusiveModeEXT" => {
            vkAcquireFullScreenExclusiveModeEXT as *const c_void
        }
        "vkReleaseFullScreenExclusiveModeEXT" => {
            vkReleaseFullScreenExclusiveModeEXT as *const c_void
        }
        "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" => {
            vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR as *const c_void
        }
        "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" => {
            vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR as *const c_void
        }
        "vkAcquireProfilingLockKHR" => vkAcquireProfilingLockKHR as *const c_void,
        "vkReleaseProfilingLockKHR" => vkReleaseProfilingLockKHR as *const c_void,
        "vkGetImageDrmFormatModifierPropertiesEXT" => {
            vkGetImageDrmFormatModifierPropertiesEXT as *const c_void
        }
        "vkGetBufferOpaqueCaptureAddress" => vkGetBufferOpaqueCaptureAddress as *const c_void,
        "vkGetBufferDeviceAddress" => vkGetBufferDeviceAddress as *const c_void,
        "vkCreateHeadlessSurfaceEXT" => vkCreateHeadlessSurfaceEXT as *const c_void,
        "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" => {
            vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV as *const c_void
        }
        "vkInitializePerformanceApiINTEL" => vkInitializePerformanceApiINTEL as *const c_void,
        "vkUninitializePerformanceApiINTEL" => vkUninitializePerformanceApiINTEL as *const c_void,
        "vkCmdSetPerformanceMarkerINTEL" => vkCmdSetPerformanceMarkerINTEL as *const c_void,
        "vkCmdSetPerformanceStreamMarkerINTEL" => {
            vkCmdSetPerformanceStreamMarkerINTEL as *const c_void
        }
        "vkCmdSetPerformanceOverrideINTEL" => vkCmdSetPerformanceOverrideINTEL as *const c_void,
        "vkAcquirePerformanceConfigurationINTEL" => {
            vkAcquirePerformanceConfigurationINTEL as *const c_void
        }
        "vkReleasePerformanceConfigurationINTEL" => {
            vkReleasePerformanceConfigurationINTEL as *const c_void
        }
        "vkQueueSetPerformanceConfigurationINTEL" => {
            vkQueueSetPerformanceConfigurationINTEL as *const c_void
        }
        "vkGetPerformanceParameterINTEL" => vkGetPerformanceParameterINTEL as *const c_void,
        "vkGetDeviceMemoryOpaqueCaptureAddress" => {
            vkGetDeviceMemoryOpaqueCaptureAddress as *const c_void
        }
        "vkGetPipelineExecutablePropertiesKHR" => {
            vkGetPipelineExecutablePropertiesKHR as *const c_void
        }
        "vkGetPipelineExecutableStatisticsKHR" => {
            vkGetPipelineExecutableStatisticsKHR as *const c_void
        }
        "vkGetPipelineExecutableInternalRepresentationsKHR" => {
            vkGetPipelineExecutableInternalRepresentationsKHR as *const c_void
        }
        "vkCmdSetLineStippleKHR" => vkCmdSetLineStippleKHR as *const c_void,
        "vkGetPhysicalDeviceToolProperties" => vkGetPhysicalDeviceToolProperties as *const c_void,
        "vkCreateAccelerationStructureKHR" => vkCreateAccelerationStructureKHR as *const c_void,
        "vkCmdBuildAccelerationStructuresKHR" => {
            vkCmdBuildAccelerationStructuresKHR as *const c_void
        }
        "vkCmdBuildAccelerationStructuresIndirectKHR" => {
            vkCmdBuildAccelerationStructuresIndirectKHR as *const c_void
        }
        "vkBuildAccelerationStructuresKHR" => vkBuildAccelerationStructuresKHR as *const c_void,
        "vkGetAccelerationStructureDeviceAddressKHR" => {
            vkGetAccelerationStructureDeviceAddressKHR as *const c_void
        }
        "vkCreateDeferredOperationKHR" => vkCreateDeferredOperationKHR as *const c_void,
        "vkDestroyDeferredOperationKHR" => vkDestroyDeferredOperationKHR as *const c_void,
        "vkGetDeferredOperationMaxConcurrencyKHR" => {
            vkGetDeferredOperationMaxConcurrencyKHR as *const c_void
        }
        "vkGetDeferredOperationResultKHR" => vkGetDeferredOperationResultKHR as *const c_void,
        "vkDeferredOperationJoinKHR" => vkDeferredOperationJoinKHR as *const c_void,
        "vkGetPipelineIndirectMemoryRequirementsNV" => {
            vkGetPipelineIndirectMemoryRequirementsNV as *const c_void
        }
        "vkGetPipelineIndirectDeviceAddressNV" => {
            vkGetPipelineIndirectDeviceAddressNV as *const c_void
        }
        "vkCmdSetCullMode" => vkCmdSetCullMode as *const c_void,
        "vkCmdSetFrontFace" => vkCmdSetFrontFace as *const c_void,
        "vkCmdSetPrimitiveTopology" => vkCmdSetPrimitiveTopology as *const c_void,
        "vkCmdSetViewportWithCount" => vkCmdSetViewportWithCount as *const c_void,
        "vkCmdSetScissorWithCount" => vkCmdSetScissorWithCount as *const c_void,
        "vkCmdBindIndexBuffer2KHR" => vkCmdBindIndexBuffer2KHR as *const c_void,
        "vkCmdBindVertexBuffers2" => vkCmdBindVertexBuffers2 as *const c_void,
        "vkCmdSetDepthTestEnable" => vkCmdSetDepthTestEnable as *const c_void,
        "vkCmdSetDepthWriteEnable" => vkCmdSetDepthWriteEnable as *const c_void,
        "vkCmdSetDepthCompareOp" => vkCmdSetDepthCompareOp as *const c_void,
        "vkCmdSetDepthBoundsTestEnable" => vkCmdSetDepthBoundsTestEnable as *const c_void,
        "vkCmdSetStencilTestEnable" => vkCmdSetStencilTestEnable as *const c_void,
        "vkCmdSetStencilOp" => vkCmdSetStencilOp as *const c_void,
        "vkCmdSetPatchControlPointsEXT" => vkCmdSetPatchControlPointsEXT as *const c_void,
        "vkCmdSetRasterizerDiscardEnable" => vkCmdSetRasterizerDiscardEnable as *const c_void,
        "vkCmdSetDepthBiasEnable" => vkCmdSetDepthBiasEnable as *const c_void,
        "vkCmdSetLogicOpEXT" => vkCmdSetLogicOpEXT as *const c_void,
        "vkCmdSetPrimitiveRestartEnable" => vkCmdSetPrimitiveRestartEnable as *const c_void,
        "vkCmdSetTessellationDomainOriginEXT" => {
            vkCmdSetTessellationDomainOriginEXT as *const c_void
        }
        "vkCmdSetDepthClampEnableEXT" => vkCmdSetDepthClampEnableEXT as *const c_void,
        "vkCmdSetPolygonModeEXT" => vkCmdSetPolygonModeEXT as *const c_void,
        "vkCmdSetRasterizationSamplesEXT" => vkCmdSetRasterizationSamplesEXT as *const c_void,
        "vkCmdSetSampleMaskEXT" => vkCmdSetSampleMaskEXT as *const c_void,
        "vkCmdSetAlphaToCoverageEnableEXT" => vkCmdSetAlphaToCoverageEnableEXT as *const c_void,
        "vkCmdSetAlphaToOneEnableEXT" => vkCmdSetAlphaToOneEnableEXT as *const c_void,
        "vkCmdSetLogicOpEnableEXT" => vkCmdSetLogicOpEnableEXT as *const c_void,
        "vkCmdSetColorBlendEnableEXT" => vkCmdSetColorBlendEnableEXT as *const c_void,
        "vkCmdSetColorBlendEquationEXT" => vkCmdSetColorBlendEquationEXT as *const c_void,
        "vkCmdSetColorWriteMaskEXT" => vkCmdSetColorWriteMaskEXT as *const c_void,
        "vkCmdSetRasterizationStreamEXT" => vkCmdSetRasterizationStreamEXT as *const c_void,
        "vkCmdSetConservativeRasterizationModeEXT" => {
            vkCmdSetConservativeRasterizationModeEXT as *const c_void
        }
        "vkCmdSetExtraPrimitiveOverestimationSizeEXT" => {
            vkCmdSetExtraPrimitiveOverestimationSizeEXT as *const c_void
        }
        "vkCmdSetDepthClipEnableEXT" => vkCmdSetDepthClipEnableEXT as *const c_void,
        "vkCmdSetSampleLocationsEnableEXT" => vkCmdSetSampleLocationsEnableEXT as *const c_void,
        "vkCmdSetColorBlendAdvancedEXT" => vkCmdSetColorBlendAdvancedEXT as *const c_void,
        "vkCmdSetProvokingVertexModeEXT" => vkCmdSetProvokingVertexModeEXT as *const c_void,
        "vkCmdSetLineRasterizationModeEXT" => vkCmdSetLineRasterizationModeEXT as *const c_void,
        "vkCmdSetLineStippleEnableEXT" => vkCmdSetLineStippleEnableEXT as *const c_void,
        "vkCmdSetDepthClipNegativeOneToOneEXT" => {
            vkCmdSetDepthClipNegativeOneToOneEXT as *const c_void
        }
        "vkCmdSetViewportWScalingEnableNV" => vkCmdSetViewportWScalingEnableNV as *const c_void,
        "vkCmdSetViewportSwizzleNV" => vkCmdSetViewportSwizzleNV as *const c_void,
        "vkCmdSetCoverageToColorEnableNV" => vkCmdSetCoverageToColorEnableNV as *const c_void,
        "vkCmdSetCoverageToColorLocationNV" => vkCmdSetCoverageToColorLocationNV as *const c_void,
        "vkCmdSetCoverageModulationModeNV" => vkCmdSetCoverageModulationModeNV as *const c_void,
        "vkCmdSetCoverageModulationTableEnableNV" => {
            vkCmdSetCoverageModulationTableEnableNV as *const c_void
        }
        "vkCmdSetCoverageModulationTableNV" => vkCmdSetCoverageModulationTableNV as *const c_void,
        "vkCmdSetShadingRateImageEnableNV" => vkCmdSetShadingRateImageEnableNV as *const c_void,
        "vkCmdSetCoverageReductionModeNV" => vkCmdSetCoverageReductionModeNV as *const c_void,
        "vkCmdSetRepresentativeFragmentTestEnableNV" => {
            vkCmdSetRepresentativeFragmentTestEnableNV as *const c_void
        }
        "vkCreatePrivateDataSlot" => vkCreatePrivateDataSlot as *const c_void,
        "vkDestroyPrivateDataSlot" => vkDestroyPrivateDataSlot as *const c_void,
        "vkSetPrivateData" => vkSetPrivateData as *const c_void,
        "vkGetPrivateData" => vkGetPrivateData as *const c_void,
        "vkCmdCopyBuffer2" => vkCmdCopyBuffer2 as *const c_void,
        "vkCmdCopyImage2" => vkCmdCopyImage2 as *const c_void,
        "vkCmdBlitImage2" => vkCmdBlitImage2 as *const c_void,
        "vkCmdCopyBufferToImage2" => vkCmdCopyBufferToImage2 as *const c_void,
        "vkCmdCopyImageToBuffer2" => vkCmdCopyImageToBuffer2 as *const c_void,
        "vkCmdResolveImage2" => vkCmdResolveImage2 as *const c_void,
        "vkCmdSetFragmentShadingRateKHR" => vkCmdSetFragmentShadingRateKHR as *const c_void,
        "vkGetPhysicalDeviceFragmentShadingRatesKHR" => {
            vkGetPhysicalDeviceFragmentShadingRatesKHR as *const c_void
        }
        "vkCmdSetFragmentShadingRateEnumNV" => vkCmdSetFragmentShadingRateEnumNV as *const c_void,
        "vkGetAccelerationStructureBuildSizesKHR" => {
            vkGetAccelerationStructureBuildSizesKHR as *const c_void
        }
        "vkCmdSetVertexInputEXT" => vkCmdSetVertexInputEXT as *const c_void,
        "vkCmdSetColorWriteEnableEXT" => vkCmdSetColorWriteEnableEXT as *const c_void,
        "vkCmdSetEvent2" => vkCmdSetEvent2 as *const c_void,
        "vkCmdResetEvent2" => vkCmdResetEvent2 as *const c_void,
        "vkCmdWaitEvents2" => vkCmdWaitEvents2 as *const c_void,
        "vkCmdPipelineBarrier2" => vkCmdPipelineBarrier2 as *const c_void,
        "vkQueueSubmit2" => vkQueueSubmit2 as *const c_void,
        "vkCmdWriteTimestamp2" => vkCmdWriteTimestamp2 as *const c_void,
        "vkCmdWriteBufferMarker2AMD" => vkCmdWriteBufferMarker2AMD as *const c_void,
        "vkGetQueueCheckpointData2NV" => vkGetQueueCheckpointData2NV as *const c_void,
        "vkCopyMemoryToImageEXT" => vkCopyMemoryToImageEXT as *const c_void,
        "vkCopyImageToMemoryEXT" => vkCopyImageToMemoryEXT as *const c_void,
        "vkCopyImageToImageEXT" => vkCopyImageToImageEXT as *const c_void,
        "vkTransitionImageLayoutEXT" => vkTransitionImageLayoutEXT as *const c_void,
        "vkGetPhysicalDeviceVideoCapabilitiesKHR" => {
            vkGetPhysicalDeviceVideoCapabilitiesKHR as *const c_void
        }
        "vkGetPhysicalDeviceVideoFormatPropertiesKHR" => {
            vkGetPhysicalDeviceVideoFormatPropertiesKHR as *const c_void
        }
        "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR" => {
            vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR as *const c_void
        }
        "vkCreateVideoSessionKHR" => vkCreateVideoSessionKHR as *const c_void,
        "vkDestroyVideoSessionKHR" => vkDestroyVideoSessionKHR as *const c_void,
        "vkCreateVideoSessionParametersKHR" => vkCreateVideoSessionParametersKHR as *const c_void,
        "vkUpdateVideoSessionParametersKHR" => vkUpdateVideoSessionParametersKHR as *const c_void,
        "vkGetEncodedVideoSessionParametersKHR" => {
            vkGetEncodedVideoSessionParametersKHR as *const c_void
        }
        "vkDestroyVideoSessionParametersKHR" => vkDestroyVideoSessionParametersKHR as *const c_void,
        "vkGetVideoSessionMemoryRequirementsKHR" => {
            vkGetVideoSessionMemoryRequirementsKHR as *const c_void
        }
        "vkBindVideoSessionMemoryKHR" => vkBindVideoSessionMemoryKHR as *const c_void,
        "vkCmdDecodeVideoKHR" => vkCmdDecodeVideoKHR as *const c_void,
        "vkCmdBeginVideoCodingKHR" => vkCmdBeginVideoCodingKHR as *const c_void,
        "vkCmdControlVideoCodingKHR" => vkCmdControlVideoCodingKHR as *const c_void,
        "vkCmdEndVideoCodingKHR" => vkCmdEndVideoCodingKHR as *const c_void,
        "vkCmdEncodeVideoKHR" => vkCmdEncodeVideoKHR as *const c_void,
        "vkCmdDecompressMemoryNV" => vkCmdDecompressMemoryNV as *const c_void,
        "vkCmdDecompressMemoryIndirectCountNV" => {
            vkCmdDecompressMemoryIndirectCountNV as *const c_void
        }
        "vkCreateCuModuleNVX" => vkCreateCuModuleNVX as *const c_void,
        "vkCreateCuFunctionNVX" => vkCreateCuFunctionNVX as *const c_void,
        "vkDestroyCuModuleNVX" => vkDestroyCuModuleNVX as *const c_void,
        "vkDestroyCuFunctionNVX" => vkDestroyCuFunctionNVX as *const c_void,
        "vkCmdCuLaunchKernelNVX" => vkCmdCuLaunchKernelNVX as *const c_void,
        "vkGetDescriptorSetLayoutSizeEXT" => vkGetDescriptorSetLayoutSizeEXT as *const c_void,
        "vkGetDescriptorSetLayoutBindingOffsetEXT" => {
            vkGetDescriptorSetLayoutBindingOffsetEXT as *const c_void
        }
        "vkGetDescriptorEXT" => vkGetDescriptorEXT as *const c_void,
        "vkCmdBindDescriptorBuffersEXT" => vkCmdBindDescriptorBuffersEXT as *const c_void,
        "vkCmdSetDescriptorBufferOffsetsEXT" => vkCmdSetDescriptorBufferOffsetsEXT as *const c_void,
        "vkCmdBindDescriptorBufferEmbeddedSamplersEXT" => {
            vkCmdBindDescriptorBufferEmbeddedSamplersEXT as *const c_void
        }
        "vkGetBufferOpaqueCaptureDescriptorDataEXT" => {
            vkGetBufferOpaqueCaptureDescriptorDataEXT as *const c_void
        }
        "vkGetImageOpaqueCaptureDescriptorDataEXT" => {
            vkGetImageOpaqueCaptureDescriptorDataEXT as *const c_void
        }
        "vkGetImageViewOpaqueCaptureDescriptorDataEXT" => {
            vkGetImageViewOpaqueCaptureDescriptorDataEXT as *const c_void
        }
        "vkGetSamplerOpaqueCaptureDescriptorDataEXT" => {
            vkGetSamplerOpaqueCaptureDescriptorDataEXT as *const c_void
        }
        "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT" => {
            vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT as *const c_void
        }
        "vkSetDeviceMemoryPriorityEXT" => vkSetDeviceMemoryPriorityEXT as *const c_void,
        "vkAcquireDrmDisplayEXT" => vkAcquireDrmDisplayEXT as *const c_void,
        "vkGetDrmDisplayEXT" => vkGetDrmDisplayEXT as *const c_void,
        "vkWaitForPresentKHR" => vkWaitForPresentKHR as *const c_void,
        "vkCreateBufferCollectionFUCHSIA" => vkCreateBufferCollectionFUCHSIA as *const c_void,
        "vkSetBufferCollectionBufferConstraintsFUCHSIA" => {
            vkSetBufferCollectionBufferConstraintsFUCHSIA as *const c_void
        }
        "vkSetBufferCollectionImageConstraintsFUCHSIA" => {
            vkSetBufferCollectionImageConstraintsFUCHSIA as *const c_void
        }
        "vkDestroyBufferCollectionFUCHSIA" => vkDestroyBufferCollectionFUCHSIA as *const c_void,
        "vkGetBufferCollectionPropertiesFUCHSIA" => {
            vkGetBufferCollectionPropertiesFUCHSIA as *const c_void
        }
        "vkCreateCudaModuleNV" => vkCreateCudaModuleNV as *const c_void,
        "vkGetCudaModuleCacheNV" => vkGetCudaModuleCacheNV as *const c_void,
        "vkCreateCudaFunctionNV" => vkCreateCudaFunctionNV as *const c_void,
        "vkDestroyCudaModuleNV" => vkDestroyCudaModuleNV as *const c_void,
        "vkDestroyCudaFunctionNV" => vkDestroyCudaFunctionNV as *const c_void,
        "vkCmdCudaLaunchKernelNV" => vkCmdCudaLaunchKernelNV as *const c_void,
        "vkCmdBeginRendering" => vkCmdBeginRendering as *const c_void,
        "vkCmdEndRendering" => vkCmdEndRendering as *const c_void,
        "vkGetDescriptorSetLayoutHostMappingInfoVALVE" => {
            vkGetDescriptorSetLayoutHostMappingInfoVALVE as *const c_void
        }
        "vkGetDescriptorSetHostMappingVALVE" => vkGetDescriptorSetHostMappingVALVE as *const c_void,
        "vkCreateMicromapEXT" => vkCreateMicromapEXT as *const c_void,
        "vkCmdBuildMicromapsEXT" => vkCmdBuildMicromapsEXT as *const c_void,
        "vkBuildMicromapsEXT" => vkBuildMicromapsEXT as *const c_void,
        "vkDestroyMicromapEXT" => vkDestroyMicromapEXT as *const c_void,
        "vkCmdCopyMicromapEXT" => vkCmdCopyMicromapEXT as *const c_void,
        "vkCopyMicromapEXT" => vkCopyMicromapEXT as *const c_void,
        "vkCmdCopyMicromapToMemoryEXT" => vkCmdCopyMicromapToMemoryEXT as *const c_void,
        "vkCopyMicromapToMemoryEXT" => vkCopyMicromapToMemoryEXT as *const c_void,
        "vkCmdCopyMemoryToMicromapEXT" => vkCmdCopyMemoryToMicromapEXT as *const c_void,
        "vkCopyMemoryToMicromapEXT" => vkCopyMemoryToMicromapEXT as *const c_void,
        "vkCmdWriteMicromapsPropertiesEXT" => vkCmdWriteMicromapsPropertiesEXT as *const c_void,
        "vkWriteMicromapsPropertiesEXT" => vkWriteMicromapsPropertiesEXT as *const c_void,
        "vkGetDeviceMicromapCompatibilityEXT" => {
            vkGetDeviceMicromapCompatibilityEXT as *const c_void
        }
        "vkGetMicromapBuildSizesEXT" => vkGetMicromapBuildSizesEXT as *const c_void,
        "vkGetShaderModuleIdentifierEXT" => vkGetShaderModuleIdentifierEXT as *const c_void,
        "vkGetShaderModuleCreateInfoIdentifierEXT" => {
            vkGetShaderModuleCreateInfoIdentifierEXT as *const c_void
        }
        "vkGetImageSubresourceLayout2KHR" => vkGetImageSubresourceLayout2KHR as *const c_void,
        "vkGetPipelinePropertiesEXT" => vkGetPipelinePropertiesEXT as *const c_void,
        "vkExportMetalObjectsEXT" => vkExportMetalObjectsEXT as *const c_void,
        "vkGetFramebufferTilePropertiesQCOM" => vkGetFramebufferTilePropertiesQCOM as *const c_void,
        "vkGetDynamicRenderingTilePropertiesQCOM" => {
            vkGetDynamicRenderingTilePropertiesQCOM as *const c_void
        }
        "vkGetPhysicalDeviceOpticalFlowImageFormatsNV" => {
            vkGetPhysicalDeviceOpticalFlowImageFormatsNV as *const c_void
        }
        "vkCreateOpticalFlowSessionNV" => vkCreateOpticalFlowSessionNV as *const c_void,
        "vkDestroyOpticalFlowSessionNV" => vkDestroyOpticalFlowSessionNV as *const c_void,
        "vkBindOpticalFlowSessionImageNV" => vkBindOpticalFlowSessionImageNV as *const c_void,
        "vkCmdOpticalFlowExecuteNV" => vkCmdOpticalFlowExecuteNV as *const c_void,
        "vkGetDeviceFaultInfoEXT" => vkGetDeviceFaultInfoEXT as *const c_void,
        "vkCmdSetDepthBias2EXT" => vkCmdSetDepthBias2EXT as *const c_void,
        "vkReleaseSwapchainImagesEXT" => vkReleaseSwapchainImagesEXT as *const c_void,
        "vkGetDeviceImageSubresourceLayoutKHR" => {
            vkGetDeviceImageSubresourceLayoutKHR as *const c_void
        }
        "vkMapMemory2KHR" => vkMapMemory2KHR as *const c_void,
        "vkUnmapMemory2KHR" => vkUnmapMemory2KHR as *const c_void,
        "vkCreateShadersEXT" => vkCreateShadersEXT as *const c_void,
        "vkDestroyShaderEXT" => vkDestroyShaderEXT as *const c_void,
        "vkGetShaderBinaryDataEXT" => vkGetShaderBinaryDataEXT as *const c_void,
        "vkCmdBindShadersEXT" => vkCmdBindShadersEXT as *const c_void,
        "vkGetScreenBufferPropertiesQNX" => vkGetScreenBufferPropertiesQNX as *const c_void,
        "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR" => {
            vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR as *const c_void
        }
        "vkGetExecutionGraphPipelineScratchSizeAMDX" => {
            vkGetExecutionGraphPipelineScratchSizeAMDX as *const c_void
        }
        "vkGetExecutionGraphPipelineNodeIndexAMDX" => {
            vkGetExecutionGraphPipelineNodeIndexAMDX as *const c_void
        }
        "vkCreateExecutionGraphPipelinesAMDX" => {
            vkCreateExecutionGraphPipelinesAMDX as *const c_void
        }
        "vkCmdInitializeGraphScratchMemoryAMDX" => {
            vkCmdInitializeGraphScratchMemoryAMDX as *const c_void
        }
        "vkCmdDispatchGraphAMDX" => vkCmdDispatchGraphAMDX as *const c_void,
        "vkCmdDispatchGraphIndirectAMDX" => vkCmdDispatchGraphIndirectAMDX as *const c_void,
        "vkCmdDispatchGraphIndirectCountAMDX" => {
            vkCmdDispatchGraphIndirectCountAMDX as *const c_void
        }
        "vkCmdBindDescriptorSets2KHR" => vkCmdBindDescriptorSets2KHR as *const c_void,
        "vkCmdPushConstants2KHR" => vkCmdPushConstants2KHR as *const c_void,
        "vkCmdPushDescriptorSet2KHR" => vkCmdPushDescriptorSet2KHR as *const c_void,
        "vkCmdPushDescriptorSetWithTemplate2KHR" => {
            vkCmdPushDescriptorSetWithTemplate2KHR as *const c_void
        }
        "vkCmdSetDescriptorBufferOffsets2EXT" => {
            vkCmdSetDescriptorBufferOffsets2EXT as *const c_void
        }
        "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT" => {
            vkCmdBindDescriptorBufferEmbeddedSamplers2EXT as *const c_void
        }
        "vkSetLatencySleepModeNV" => vkSetLatencySleepModeNV as *const c_void,
        "vkLatencySleepNV" => vkLatencySleepNV as *const c_void,
        "vkSetLatencyMarkerNV" => vkSetLatencyMarkerNV as *const c_void,
        "vkGetLatencyTimingsNV" => vkGetLatencyTimingsNV as *const c_void,
        "vkQueueNotifyOutOfBandNV" => vkQueueNotifyOutOfBandNV as *const c_void,
        "vkCmdSetRenderingAttachmentLocationsKHR" => {
            vkCmdSetRenderingAttachmentLocationsKHR as *const c_void
        }
        "vkCmdSetRenderingInputAttachmentIndicesKHR" => {
            vkCmdSetRenderingInputAttachmentIndicesKHR as *const c_void
        }
        _ => std::ptr::null(),
    }
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateInstance.html>"]
extern "stdcall" fn vkCreateInstance(
    p_create_info: *const vk::InstanceCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_instance: *mut vk::Instance,
) -> vk::Result {
    unimplemented!("vkCreateInstance");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyInstance.html>"]
extern "stdcall" fn vkDestroyInstance(
    instance: vk::Instance,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyInstance");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDevices.html>"]
extern "stdcall" fn vkEnumeratePhysicalDevices(
    instance: vk::Instance,
    p_physical_device_count: *mut u32,
    p_physical_devices: *mut vk::PhysicalDevice,
) -> vk::Result {
    unimplemented!("vkEnumeratePhysicalDevices");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceProcAddr.html>"]
extern "stdcall" fn vkGetDeviceProcAddr(
    device: vk::Device,
    p_name: *const char,
) -> vk::PFN_vkVoidFunction {
    unimplemented!("vkGetDeviceProcAddr");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetInstanceProcAddr.html>"]
extern "stdcall" fn vkGetInstanceProcAddr(
    instance: vk::Instance,
    p_name: *const char,
) -> vk::PFN_vkVoidFunction {
    unimplemented!("vkGetInstanceProcAddr");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceProperties(
    physical_device: vk::PhysicalDevice,
    p_properties: *mut vk::PhysicalDeviceProperties,
) {
    unimplemented!("vkGetPhysicalDeviceProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceQueueFamilyProperties(
    physical_device: vk::PhysicalDevice,
    p_queue_family_property_count: *mut u32,
    p_queue_family_properties: *mut vk::QueueFamilyProperties,
) {
    unimplemented!("vkGetPhysicalDeviceQueueFamilyProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMemoryProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceMemoryProperties(
    physical_device: vk::PhysicalDevice,
    p_memory_properties: *mut vk::PhysicalDeviceMemoryProperties,
) {
    unimplemented!("vkGetPhysicalDeviceMemoryProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFeatures.html>"]
extern "stdcall" fn vkGetPhysicalDeviceFeatures(
    physical_device: vk::PhysicalDevice,
    p_features: *mut vk::PhysicalDeviceFeatures,
) {
    unimplemented!("vkGetPhysicalDeviceFeatures");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFormatProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceFormatProperties(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    p_format_properties: *mut vk::FormatProperties,
) {
    unimplemented!("vkGetPhysicalDeviceFormatProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceImageFormatProperties(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    r#type: vk::ImageType,
    tiling: vk::ImageTiling,
    usage: vk::ImageUsageFlags,
    flags: vk::ImageCreateFlags,
    p_image_format_properties: *mut vk::ImageFormatProperties,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceImageFormatProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDevice.html>"]
extern "stdcall" fn vkCreateDevice(
    physical_device: vk::PhysicalDevice,
    p_create_info: *const vk::DeviceCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_device: *mut vk::Device,
) -> vk::Result {
    unimplemented!("vkCreateDevice");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDevice.html>"]
extern "stdcall" fn vkDestroyDevice(
    device: vk::Device,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDevice");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceVersion.html>"]
extern "stdcall" fn vkEnumerateInstanceVersion(p_api_version: *mut u32) -> vk::Result {
    unimplemented!("vkEnumerateInstanceVersion");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceLayerProperties.html>"]
extern "stdcall" fn vkEnumerateInstanceLayerProperties(
    p_property_count: *mut u32,
    p_properties: *mut vk::LayerProperties,
) -> vk::Result {
    unimplemented!("vkEnumerateInstanceLayerProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceExtensionProperties.html>"]
unsafe extern "stdcall" fn vkEnumerateInstanceExtensionProperties(
    p_layer_name: *const c_char,
    p_property_count: *mut u32,
    p_properties: *mut vk::ExtensionProperties,
) -> vk::Result {
    //let mut packet = wie_transport_guest::new_packet(5);
    //packet.write_null_str(p_layer_name);
    //packet.write(*p_property_count);

    unimplemented!("vkEnumerateInstanceExtensionProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateDeviceLayerProperties.html>"]
extern "stdcall" fn vkEnumerateDeviceLayerProperties(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::LayerProperties,
) -> vk::Result {
    unimplemented!("vkEnumerateDeviceLayerProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateDeviceExtensionProperties.html>"]
extern "stdcall" fn vkEnumerateDeviceExtensionProperties(
    physical_device: vk::PhysicalDevice,
    p_layer_name: *const char,
    p_property_count: *mut u32,
    p_properties: *mut vk::ExtensionProperties,
) -> vk::Result {
    unimplemented!("vkEnumerateDeviceExtensionProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceQueue.html>"]
extern "stdcall" fn vkGetDeviceQueue(
    device: vk::Device,
    queue_family_index: u32,
    queue_index: u32,
    p_queue: *mut vk::Queue,
) {
    unimplemented!("vkGetDeviceQueue");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit.html>"]
extern "stdcall" fn vkQueueSubmit(
    queue: vk::Queue,
    submit_count: u32,
    p_submits: *const vk::SubmitInfo,
    fence: vk::Fence,
) -> vk::Result {
    unimplemented!("vkQueueSubmit");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueWaitIdle.html>"]
extern "stdcall" fn vkQueueWaitIdle(queue: vk::Queue) -> vk::Result {
    unimplemented!("vkQueueWaitIdle");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDeviceWaitIdle.html>"]
extern "stdcall" fn vkDeviceWaitIdle(device: vk::Device) -> vk::Result {
    unimplemented!("vkDeviceWaitIdle");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateMemory.html>"]
extern "stdcall" fn vkAllocateMemory(
    device: vk::Device,
    p_allocate_info: *const vk::MemoryAllocateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_memory: *mut vk::DeviceMemory,
) -> vk::Result {
    unimplemented!("vkAllocateMemory");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeMemory.html>"]
extern "stdcall" fn vkFreeMemory(
    device: vk::Device,
    memory: vk::DeviceMemory,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkFreeMemory");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMapMemory.html>"]
extern "stdcall" fn vkMapMemory(
    device: vk::Device,
    memory: vk::DeviceMemory,
    offset: vk::DeviceSize,
    size: vk::DeviceSize,
    flags: vk::MemoryMapFlags,
    pp_data: *mut *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkMapMemory");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUnmapMemory.html>"]
extern "stdcall" fn vkUnmapMemory(device: vk::Device, memory: vk::DeviceMemory) {
    unimplemented!("vkUnmapMemory");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFlushMappedMemoryRanges.html>"]
extern "stdcall" fn vkFlushMappedMemoryRanges(
    device: vk::Device,
    memory_range_count: u32,
    p_memory_ranges: *const vk::MappedMemoryRange,
) -> vk::Result {
    unimplemented!("vkFlushMappedMemoryRanges");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkInvalidateMappedMemoryRanges.html>"]
extern "stdcall" fn vkInvalidateMappedMemoryRanges(
    device: vk::Device,
    memory_range_count: u32,
    p_memory_ranges: *const vk::MappedMemoryRange,
) -> vk::Result {
    unimplemented!("vkInvalidateMappedMemoryRanges");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMemoryCommitment.html>"]
extern "stdcall" fn vkGetDeviceMemoryCommitment(
    device: vk::Device,
    memory: vk::DeviceMemory,
    p_committed_memory_in_bytes: *mut vk::DeviceSize,
) {
    unimplemented!("vkGetDeviceMemoryCommitment");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferMemoryRequirements.html>"]
extern "stdcall" fn vkGetBufferMemoryRequirements(
    device: vk::Device,
    buffer: vk::Buffer,
    p_memory_requirements: *mut vk::MemoryRequirements,
) {
    unimplemented!("vkGetBufferMemoryRequirements");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindBufferMemory.html>"]
extern "stdcall" fn vkBindBufferMemory(
    device: vk::Device,
    buffer: vk::Buffer,
    memory: vk::DeviceMemory,
    memory_offset: vk::DeviceSize,
) -> vk::Result {
    unimplemented!("vkBindBufferMemory");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageMemoryRequirements.html>"]
extern "stdcall" fn vkGetImageMemoryRequirements(
    device: vk::Device,
    image: vk::Image,
    p_memory_requirements: *mut vk::MemoryRequirements,
) {
    unimplemented!("vkGetImageMemoryRequirements");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindImageMemory.html>"]
extern "stdcall" fn vkBindImageMemory(
    device: vk::Device,
    image: vk::Image,
    memory: vk::DeviceMemory,
    memory_offset: vk::DeviceSize,
) -> vk::Result {
    unimplemented!("vkBindImageMemory");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSparseMemoryRequirements.html>"]
extern "stdcall" fn vkGetImageSparseMemoryRequirements(
    device: vk::Device,
    image: vk::Image,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut vk::SparseImageMemoryRequirements,
) {
    unimplemented!("vkGetImageSparseMemoryRequirements");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSparseImageFormatProperties(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    r#type: vk::ImageType,
    samples: vk::SampleCountFlags,
    usage: vk::ImageUsageFlags,
    tiling: vk::ImageTiling,
    p_property_count: *mut u32,
    p_properties: *mut vk::SparseImageFormatProperties,
) {
    unimplemented!("vkGetPhysicalDeviceSparseImageFormatProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueBindSparse.html>"]
extern "stdcall" fn vkQueueBindSparse(
    queue: vk::Queue,
    bind_info_count: u32,
    p_bind_info: *const vk::BindSparseInfo,
    fence: vk::Fence,
) -> vk::Result {
    unimplemented!("vkQueueBindSparse");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateFence.html>"]
extern "stdcall" fn vkCreateFence(
    device: vk::Device,
    p_create_info: *const vk::FenceCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_fence: *mut vk::Fence,
) -> vk::Result {
    unimplemented!("vkCreateFence");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyFence.html>"]
extern "stdcall" fn vkDestroyFence(
    device: vk::Device,
    fence: vk::Fence,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyFence");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetFences.html>"]
extern "stdcall" fn vkResetFences(
    device: vk::Device,
    fence_count: u32,
    p_fences: *const vk::Fence,
) -> vk::Result {
    unimplemented!("vkResetFences");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceStatus.html>"]
extern "stdcall" fn vkGetFenceStatus(device: vk::Device, fence: vk::Fence) -> vk::Result {
    unimplemented!("vkGetFenceStatus");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitForFences.html>"]
extern "stdcall" fn vkWaitForFences(
    device: vk::Device,
    fence_count: u32,
    p_fences: *const vk::Fence,
    wait_all: vk::Bool32,
    timeout: u64,
) -> vk::Result {
    unimplemented!("vkWaitForFences");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSemaphore.html>"]
extern "stdcall" fn vkCreateSemaphore(
    device: vk::Device,
    p_create_info: *const vk::SemaphoreCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_semaphore: *mut vk::Semaphore,
) -> vk::Result {
    unimplemented!("vkCreateSemaphore");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySemaphore.html>"]
extern "stdcall" fn vkDestroySemaphore(
    device: vk::Device,
    semaphore: vk::Semaphore,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroySemaphore");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateEvent.html>"]
extern "stdcall" fn vkCreateEvent(
    device: vk::Device,
    p_create_info: *const vk::EventCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_event: *mut vk::Event,
) -> vk::Result {
    unimplemented!("vkCreateEvent");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyEvent.html>"]
extern "stdcall" fn vkDestroyEvent(
    device: vk::Device,
    event: vk::Event,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyEvent");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetEventStatus.html>"]
extern "stdcall" fn vkGetEventStatus(device: vk::Device, event: vk::Event) -> vk::Result {
    unimplemented!("vkGetEventStatus");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetEvent.html>"]
extern "stdcall" fn vkSetEvent(device: vk::Device, event: vk::Event) -> vk::Result {
    unimplemented!("vkSetEvent");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetEvent.html>"]
extern "stdcall" fn vkResetEvent(device: vk::Device, event: vk::Event) -> vk::Result {
    unimplemented!("vkResetEvent");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateQueryPool.html>"]
extern "stdcall" fn vkCreateQueryPool(
    device: vk::Device,
    p_create_info: *const vk::QueryPoolCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_query_pool: *mut vk::QueryPool,
) -> vk::Result {
    unimplemented!("vkCreateQueryPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyQueryPool.html>"]
extern "stdcall" fn vkDestroyQueryPool(
    device: vk::Device,
    query_pool: vk::QueryPool,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyQueryPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueryPoolResults.html>"]
extern "stdcall" fn vkGetQueryPoolResults(
    device: vk::Device,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
    stride: vk::DeviceSize,
    flags: vk::QueryResultFlags,
) -> vk::Result {
    unimplemented!("vkGetQueryPoolResults");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetQueryPool.html>"]
extern "stdcall" fn vkResetQueryPool(
    device: vk::Device,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
) {
    unimplemented!("vkResetQueryPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBuffer.html>"]
extern "stdcall" fn vkCreateBuffer(
    device: vk::Device,
    p_create_info: *const vk::BufferCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_buffer: *mut vk::Buffer,
) -> vk::Result {
    unimplemented!("vkCreateBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBuffer.html>"]
extern "stdcall" fn vkDestroyBuffer(
    device: vk::Device,
    buffer: vk::Buffer,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBufferView.html>"]
extern "stdcall" fn vkCreateBufferView(
    device: vk::Device,
    p_create_info: *const vk::BufferViewCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_view: *mut vk::BufferView,
) -> vk::Result {
    unimplemented!("vkCreateBufferView");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBufferView.html>"]
extern "stdcall" fn vkDestroyBufferView(
    device: vk::Device,
    buffer_view: vk::BufferView,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyBufferView");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImage.html>"]
extern "stdcall" fn vkCreateImage(
    device: vk::Device,
    p_create_info: *const vk::ImageCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_image: *mut vk::Image,
) -> vk::Result {
    unimplemented!("vkCreateImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyImage.html>"]
extern "stdcall" fn vkDestroyImage(
    device: vk::Device,
    image: vk::Image,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSubresourceLayout.html>"]
extern "stdcall" fn vkGetImageSubresourceLayout(
    device: vk::Device,
    image: vk::Image,
    p_subresource: *const vk::ImageSubresource,
    p_layout: *mut vk::SubresourceLayout,
) {
    unimplemented!("vkGetImageSubresourceLayout");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImageView.html>"]
extern "stdcall" fn vkCreateImageView(
    device: vk::Device,
    p_create_info: *const vk::ImageViewCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_view: *mut vk::ImageView,
) -> vk::Result {
    unimplemented!("vkCreateImageView");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyImageView.html>"]
extern "stdcall" fn vkDestroyImageView(
    device: vk::Device,
    image_view: vk::ImageView,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyImageView");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateShaderModule.html>"]
extern "stdcall" fn vkCreateShaderModule(
    device: vk::Device,
    p_create_info: *const vk::ShaderModuleCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_shader_module: *mut vk::ShaderModule,
) -> vk::Result {
    unimplemented!("vkCreateShaderModule");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyShaderModule.html>"]
extern "stdcall" fn vkDestroyShaderModule(
    device: vk::Device,
    shader_module: vk::ShaderModule,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyShaderModule");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePipelineCache.html>"]
extern "stdcall" fn vkCreatePipelineCache(
    device: vk::Device,
    p_create_info: *const vk::PipelineCacheCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipeline_cache: *mut vk::PipelineCache,
) -> vk::Result {
    unimplemented!("vkCreatePipelineCache");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipelineCache.html>"]
extern "stdcall" fn vkDestroyPipelineCache(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyPipelineCache");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineCacheData.html>"]
extern "stdcall" fn vkGetPipelineCacheData(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetPipelineCacheData");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMergePipelineCaches.html>"]
extern "stdcall" fn vkMergePipelineCaches(
    device: vk::Device,
    dst_cache: vk::PipelineCache,
    src_cache_count: u32,
    p_src_caches: *const vk::PipelineCache,
) -> vk::Result {
    unimplemented!("vkMergePipelineCaches");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateGraphicsPipelines.html>"]
extern "stdcall" fn vkCreateGraphicsPipelines(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::GraphicsPipelineCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    unimplemented!("vkCreateGraphicsPipelines");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateComputePipelines.html>"]
extern "stdcall" fn vkCreateComputePipelines(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::ComputePipelineCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    unimplemented!("vkCreateComputePipelines");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.html>"]
extern "stdcall" fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
    device: vk::Device,
    renderpass: vk::RenderPass,
    p_max_workgroup_size: *mut vk::Extent2D,
) -> vk::Result {
    unimplemented!("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipeline.html>"]
extern "stdcall" fn vkDestroyPipeline(
    device: vk::Device,
    pipeline: vk::Pipeline,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyPipeline");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePipelineLayout.html>"]
extern "stdcall" fn vkCreatePipelineLayout(
    device: vk::Device,
    p_create_info: *const vk::PipelineLayoutCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipeline_layout: *mut vk::PipelineLayout,
) -> vk::Result {
    unimplemented!("vkCreatePipelineLayout");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipelineLayout.html>"]
extern "stdcall" fn vkDestroyPipelineLayout(
    device: vk::Device,
    pipeline_layout: vk::PipelineLayout,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyPipelineLayout");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSampler.html>"]
extern "stdcall" fn vkCreateSampler(
    device: vk::Device,
    p_create_info: *const vk::SamplerCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_sampler: *mut vk::Sampler,
) -> vk::Result {
    unimplemented!("vkCreateSampler");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySampler.html>"]
extern "stdcall" fn vkDestroySampler(
    device: vk::Device,
    sampler: vk::Sampler,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroySampler");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorSetLayout.html>"]
extern "stdcall" fn vkCreateDescriptorSetLayout(
    device: vk::Device,
    p_create_info: *const vk::DescriptorSetLayoutCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_set_layout: *mut vk::DescriptorSetLayout,
) -> vk::Result {
    unimplemented!("vkCreateDescriptorSetLayout");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorSetLayout.html>"]
extern "stdcall" fn vkDestroyDescriptorSetLayout(
    device: vk::Device,
    descriptor_set_layout: vk::DescriptorSetLayout,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDescriptorSetLayout");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorPool.html>"]
extern "stdcall" fn vkCreateDescriptorPool(
    device: vk::Device,
    p_create_info: *const vk::DescriptorPoolCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_descriptor_pool: *mut vk::DescriptorPool,
) -> vk::Result {
    unimplemented!("vkCreateDescriptorPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorPool.html>"]
extern "stdcall" fn vkDestroyDescriptorPool(
    device: vk::Device,
    descriptor_pool: vk::DescriptorPool,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDescriptorPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetDescriptorPool.html>"]
extern "stdcall" fn vkResetDescriptorPool(
    device: vk::Device,
    descriptor_pool: vk::DescriptorPool,
    flags: vk::DescriptorPoolResetFlags,
) -> vk::Result {
    unimplemented!("vkResetDescriptorPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateDescriptorSets.html>"]
extern "stdcall" fn vkAllocateDescriptorSets(
    device: vk::Device,
    p_allocate_info: *const vk::DescriptorSetAllocateInfo,
    p_descriptor_sets: *mut vk::DescriptorSet,
) -> vk::Result {
    unimplemented!("vkAllocateDescriptorSets");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeDescriptorSets.html>"]
extern "stdcall" fn vkFreeDescriptorSets(
    device: vk::Device,
    descriptor_pool: vk::DescriptorPool,
    descriptor_set_count: u32,
    p_descriptor_sets: *const vk::DescriptorSet,
) -> vk::Result {
    unimplemented!("vkFreeDescriptorSets");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateDescriptorSets.html>"]
extern "stdcall" fn vkUpdateDescriptorSets(
    device: vk::Device,
    descriptor_write_count: u32,
    p_descriptor_writes: *const vk::WriteDescriptorSet,
    descriptor_copy_count: u32,
    p_descriptor_copies: *const vk::CopyDescriptorSet,
) {
    unimplemented!("vkUpdateDescriptorSets");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateFramebuffer.html>"]
extern "stdcall" fn vkCreateFramebuffer(
    device: vk::Device,
    p_create_info: *const vk::FramebufferCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_framebuffer: *mut vk::Framebuffer,
) -> vk::Result {
    unimplemented!("vkCreateFramebuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyFramebuffer.html>"]
extern "stdcall" fn vkDestroyFramebuffer(
    device: vk::Device,
    framebuffer: vk::Framebuffer,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyFramebuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRenderPass.html>"]
extern "stdcall" fn vkCreateRenderPass(
    device: vk::Device,
    p_create_info: *const vk::RenderPassCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_render_pass: *mut vk::RenderPass,
) -> vk::Result {
    unimplemented!("vkCreateRenderPass");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyRenderPass.html>"]
extern "stdcall" fn vkDestroyRenderPass(
    device: vk::Device,
    render_pass: vk::RenderPass,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyRenderPass");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRenderAreaGranularity.html>"]
extern "stdcall" fn vkGetRenderAreaGranularity(
    device: vk::Device,
    render_pass: vk::RenderPass,
    p_granularity: *mut vk::Extent2D,
) {
    unimplemented!("vkGetRenderAreaGranularity");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRenderingAreaGranularityKHR.html>"]
extern "stdcall" fn vkGetRenderingAreaGranularityKHR(
    device: vk::Device,
    p_rendering_area_info: *const vk::RenderingAreaInfoKHR,
    p_granularity: *mut vk::Extent2D,
) {
    unimplemented!("vkGetRenderingAreaGranularityKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCommandPool.html>"]
extern "stdcall" fn vkCreateCommandPool(
    device: vk::Device,
    p_create_info: *const vk::CommandPoolCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_command_pool: *mut vk::CommandPool,
) -> vk::Result {
    unimplemented!("vkCreateCommandPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCommandPool.html>"]
extern "stdcall" fn vkDestroyCommandPool(
    device: vk::Device,
    command_pool: vk::CommandPool,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyCommandPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetCommandPool.html>"]
extern "stdcall" fn vkResetCommandPool(
    device: vk::Device,
    command_pool: vk::CommandPool,
    flags: vk::CommandPoolResetFlags,
) -> vk::Result {
    unimplemented!("vkResetCommandPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateCommandBuffers.html>"]
extern "stdcall" fn vkAllocateCommandBuffers(
    device: vk::Device,
    p_allocate_info: *const vk::CommandBufferAllocateInfo,
    p_command_buffers: *mut vk::CommandBuffer,
) -> vk::Result {
    unimplemented!("vkAllocateCommandBuffers");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeCommandBuffers.html>"]
extern "stdcall" fn vkFreeCommandBuffers(
    device: vk::Device,
    command_pool: vk::CommandPool,
    command_buffer_count: u32,
    p_command_buffers: *const vk::CommandBuffer,
) {
    unimplemented!("vkFreeCommandBuffers");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBeginCommandBuffer.html>"]
extern "stdcall" fn vkBeginCommandBuffer(
    command_buffer: vk::CommandBuffer,
    p_begin_info: *const vk::CommandBufferBeginInfo,
) -> vk::Result {
    unimplemented!("vkBeginCommandBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEndCommandBuffer.html>"]
extern "stdcall" fn vkEndCommandBuffer(command_buffer: vk::CommandBuffer) -> vk::Result {
    unimplemented!("vkEndCommandBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetCommandBuffer.html>"]
extern "stdcall" fn vkResetCommandBuffer(
    command_buffer: vk::CommandBuffer,
    flags: vk::CommandBufferResetFlags,
) -> vk::Result {
    unimplemented!("vkResetCommandBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipeline.html>"]
extern "stdcall" fn vkCmdBindPipeline(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    pipeline: vk::Pipeline,
) {
    unimplemented!("vkCmdBindPipeline");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAttachmentFeedbackLoopEnableEXT.html>"]
extern "stdcall" fn vkCmdSetAttachmentFeedbackLoopEnableEXT(
    command_buffer: vk::CommandBuffer,
    aspect_mask: vk::ImageAspectFlags,
) {
    unimplemented!("vkCmdSetAttachmentFeedbackLoopEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewport.html>"]
extern "stdcall" fn vkCmdSetViewport(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_viewports: *const vk::Viewport,
) {
    unimplemented!("vkCmdSetViewport");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetScissor.html>"]
extern "stdcall" fn vkCmdSetScissor(
    command_buffer: vk::CommandBuffer,
    first_scissor: u32,
    scissor_count: u32,
    p_scissors: *const vk::Rect2D,
) {
    unimplemented!("vkCmdSetScissor");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineWidth.html>"]
extern "stdcall" fn vkCmdSetLineWidth(command_buffer: vk::CommandBuffer, line_width: f32) {
    unimplemented!("vkCmdSetLineWidth");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBias.html>"]
extern "stdcall" fn vkCmdSetDepthBias(
    command_buffer: vk::CommandBuffer,
    depth_bias_constant_factor: f32,
    depth_bias_clamp: f32,
    depth_bias_slope_factor: f32,
) {
    unimplemented!("vkCmdSetDepthBias");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetBlendConstants.html>"]
extern "stdcall" fn vkCmdSetBlendConstants(
    command_buffer: vk::CommandBuffer,
    blend_constants: f32,
) {
    unimplemented!("vkCmdSetBlendConstants");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBounds.html>"]
extern "stdcall" fn vkCmdSetDepthBounds(
    command_buffer: vk::CommandBuffer,
    min_depth_bounds: f32,
    max_depth_bounds: f32,
) {
    unimplemented!("vkCmdSetDepthBounds");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilCompareMask.html>"]
extern "stdcall" fn vkCmdSetStencilCompareMask(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    compare_mask: u32,
) {
    unimplemented!("vkCmdSetStencilCompareMask");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilWriteMask.html>"]
extern "stdcall" fn vkCmdSetStencilWriteMask(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    write_mask: u32,
) {
    unimplemented!("vkCmdSetStencilWriteMask");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilReference.html>"]
extern "stdcall" fn vkCmdSetStencilReference(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    reference: u32,
) {
    unimplemented!("vkCmdSetStencilReference");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorSets.html>"]
extern "stdcall" fn vkCmdBindDescriptorSets(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    first_set: u32,
    descriptor_set_count: u32,
    p_descriptor_sets: *const vk::DescriptorSet,
    dynamic_offset_count: u32,
    p_dynamic_offsets: *const u32,
) {
    unimplemented!("vkCmdBindDescriptorSets");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindIndexBuffer.html>"]
extern "stdcall" fn vkCmdBindIndexBuffer(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    index_type: vk::IndexType,
) {
    unimplemented!("vkCmdBindIndexBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindVertexBuffers.html>"]
extern "stdcall" fn vkCmdBindVertexBuffers(
    command_buffer: vk::CommandBuffer,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const vk::Buffer,
    p_offsets: *const vk::DeviceSize,
) {
    unimplemented!("vkCmdBindVertexBuffers");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDraw.html>"]
extern "stdcall" fn vkCmdDraw(
    command_buffer: vk::CommandBuffer,
    vertex_count: u32,
    instance_count: u32,
    first_vertex: u32,
    first_instance: u32,
) {
    unimplemented!("vkCmdDraw");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexed.html>"]
extern "stdcall" fn vkCmdDrawIndexed(
    command_buffer: vk::CommandBuffer,
    index_count: u32,
    instance_count: u32,
    first_index: u32,
    vertex_offset: i32,
    first_instance: u32,
) {
    unimplemented!("vkCmdDrawIndexed");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMultiEXT.html>"]
extern "stdcall" fn vkCmdDrawMultiEXT(
    command_buffer: vk::CommandBuffer,
    draw_count: u32,
    p_vertex_info: *const vk::MultiDrawInfoEXT,
    instance_count: u32,
    first_instance: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawMultiEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMultiIndexedEXT.html>"]
extern "stdcall" fn vkCmdDrawMultiIndexedEXT(
    command_buffer: vk::CommandBuffer,
    draw_count: u32,
    p_index_info: *const vk::MultiDrawIndexedInfoEXT,
    instance_count: u32,
    first_instance: u32,
    stride: u32,
    p_vertex_offset: *const i32,
) {
    unimplemented!("vkCmdDrawMultiIndexedEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirect.html>"]
extern "stdcall" fn vkCmdDrawIndirect(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawIndirect");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexedIndirect.html>"]
extern "stdcall" fn vkCmdDrawIndexedIndirect(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawIndexedIndirect");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatch.html>"]
extern "stdcall" fn vkCmdDispatch(
    command_buffer: vk::CommandBuffer,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    unimplemented!("vkCmdDispatch");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchIndirect.html>"]
extern "stdcall" fn vkCmdDispatchIndirect(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
) {
    unimplemented!("vkCmdDispatchIndirect");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSubpassShadingHUAWEI.html>"]
extern "stdcall" fn vkCmdSubpassShadingHUAWEI(command_buffer: vk::CommandBuffer) {
    unimplemented!("vkCmdSubpassShadingHUAWEI");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawClusterHUAWEI.html>"]
extern "stdcall" fn vkCmdDrawClusterHUAWEI(
    command_buffer: vk::CommandBuffer,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    unimplemented!("vkCmdDrawClusterHUAWEI");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawClusterIndirectHUAWEI.html>"]
extern "stdcall" fn vkCmdDrawClusterIndirectHUAWEI(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
) {
    unimplemented!("vkCmdDrawClusterIndirectHUAWEI");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdUpdatePipelineIndirectBufferNV.html>"]
extern "stdcall" fn vkCmdUpdatePipelineIndirectBufferNV(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    pipeline: vk::Pipeline,
) {
    unimplemented!("vkCmdUpdatePipelineIndirectBufferNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBuffer.html>"]
extern "stdcall" fn vkCmdCopyBuffer(
    command_buffer: vk::CommandBuffer,
    src_buffer: vk::Buffer,
    dst_buffer: vk::Buffer,
    region_count: u32,
    p_regions: *const vk::BufferCopy,
) {
    unimplemented!("vkCmdCopyBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImage.html>"]
extern "stdcall" fn vkCmdCopyImage(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::ImageCopy,
) {
    unimplemented!("vkCmdCopyImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBlitImage.html>"]
extern "stdcall" fn vkCmdBlitImage(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::ImageBlit,
    filter: vk::Filter,
) {
    unimplemented!("vkCmdBlitImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBufferToImage.html>"]
extern "stdcall" fn vkCmdCopyBufferToImage(
    command_buffer: vk::CommandBuffer,
    src_buffer: vk::Buffer,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::BufferImageCopy,
) {
    unimplemented!("vkCmdCopyBufferToImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImageToBuffer.html>"]
extern "stdcall" fn vkCmdCopyImageToBuffer(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_buffer: vk::Buffer,
    region_count: u32,
    p_regions: *const vk::BufferImageCopy,
) {
    unimplemented!("vkCmdCopyImageToBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryIndirectNV.html>"]
extern "stdcall" fn vkCmdCopyMemoryIndirectNV(
    command_buffer: vk::CommandBuffer,
    copy_buffer_address: vk::DeviceAddress,
    copy_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdCopyMemoryIndirectNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToImageIndirectNV.html>"]
extern "stdcall" fn vkCmdCopyMemoryToImageIndirectNV(
    command_buffer: vk::CommandBuffer,
    copy_buffer_address: vk::DeviceAddress,
    copy_count: u32,
    stride: u32,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    p_image_subresources: *const vk::ImageSubresourceLayers,
) {
    unimplemented!("vkCmdCopyMemoryToImageIndirectNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdUpdateBuffer.html>"]
extern "stdcall" fn vkCmdUpdateBuffer(
    command_buffer: vk::CommandBuffer,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    data_size: vk::DeviceSize,
    p_data: *const std::ffi::c_void,
) {
    unimplemented!("vkCmdUpdateBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdFillBuffer.html>"]
extern "stdcall" fn vkCmdFillBuffer(
    command_buffer: vk::CommandBuffer,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    size: vk::DeviceSize,
    data: u32,
) {
    unimplemented!("vkCmdFillBuffer");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearColorImage.html>"]
extern "stdcall" fn vkCmdClearColorImage(
    command_buffer: vk::CommandBuffer,
    image: vk::Image,
    image_layout: vk::ImageLayout,
    p_color: *const vk::ClearColorValue,
    range_count: u32,
    p_ranges: *const vk::ImageSubresourceRange,
) {
    unimplemented!("vkCmdClearColorImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearDepthStencilImage.html>"]
extern "stdcall" fn vkCmdClearDepthStencilImage(
    command_buffer: vk::CommandBuffer,
    image: vk::Image,
    image_layout: vk::ImageLayout,
    p_depth_stencil: *const vk::ClearDepthStencilValue,
    range_count: u32,
    p_ranges: *const vk::ImageSubresourceRange,
) {
    unimplemented!("vkCmdClearDepthStencilImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearAttachments.html>"]
extern "stdcall" fn vkCmdClearAttachments(
    command_buffer: vk::CommandBuffer,
    attachment_count: u32,
    p_attachments: *const vk::ClearAttachment,
    rect_count: u32,
    p_rects: *const vk::ClearRect,
) {
    unimplemented!("vkCmdClearAttachments");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResolveImage.html>"]
extern "stdcall" fn vkCmdResolveImage(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::ImageResolve,
) {
    unimplemented!("vkCmdResolveImage");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetEvent.html>"]
extern "stdcall" fn vkCmdSetEvent(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    stage_mask: vk::PipelineStageFlags,
) {
    unimplemented!("vkCmdSetEvent");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetEvent.html>"]
extern "stdcall" fn vkCmdResetEvent(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    stage_mask: vk::PipelineStageFlags,
) {
    unimplemented!("vkCmdResetEvent");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWaitEvents.html>"]
extern "stdcall" fn vkCmdWaitEvents(
    command_buffer: vk::CommandBuffer,
    event_count: u32,
    p_events: *const vk::Event,
    src_stage_mask: vk::PipelineStageFlags,
    dst_stage_mask: vk::PipelineStageFlags,
    memory_barrier_count: u32,
    p_memory_barriers: *const vk::MemoryBarrier,
    buffer_memory_barrier_count: u32,
    p_buffer_memory_barriers: *const vk::BufferMemoryBarrier,
    image_memory_barrier_count: u32,
    p_image_memory_barriers: *const vk::ImageMemoryBarrier,
) {
    unimplemented!("vkCmdWaitEvents");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPipelineBarrier.html>"]
extern "stdcall" fn vkCmdPipelineBarrier(
    command_buffer: vk::CommandBuffer,
    src_stage_mask: vk::PipelineStageFlags,
    dst_stage_mask: vk::PipelineStageFlags,
    dependency_flags: vk::DependencyFlags,
    memory_barrier_count: u32,
    p_memory_barriers: *const vk::MemoryBarrier,
    buffer_memory_barrier_count: u32,
    p_buffer_memory_barriers: *const vk::BufferMemoryBarrier,
    image_memory_barrier_count: u32,
    p_image_memory_barriers: *const vk::ImageMemoryBarrier,
) {
    unimplemented!("vkCmdPipelineBarrier");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginQuery.html>"]
extern "stdcall" fn vkCmdBeginQuery(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
    flags: vk::QueryControlFlags,
) {
    unimplemented!("vkCmdBeginQuery");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndQuery.html>"]
extern "stdcall" fn vkCmdEndQuery(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
) {
    unimplemented!("vkCmdEndQuery");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginConditionalRenderingEXT.html>"]
extern "stdcall" fn vkCmdBeginConditionalRenderingEXT(
    command_buffer: vk::CommandBuffer,
    p_conditional_rendering_begin: *const vk::ConditionalRenderingBeginInfoEXT,
) {
    unimplemented!("vkCmdBeginConditionalRenderingEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndConditionalRenderingEXT.html>"]
extern "stdcall" fn vkCmdEndConditionalRenderingEXT(command_buffer: vk::CommandBuffer) {
    unimplemented!("vkCmdEndConditionalRenderingEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetQueryPool.html>"]
extern "stdcall" fn vkCmdResetQueryPool(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
) {
    unimplemented!("vkCmdResetQueryPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteTimestamp.html>"]
extern "stdcall" fn vkCmdWriteTimestamp(
    command_buffer: vk::CommandBuffer,
    pipeline_stage: vk::PipelineStageFlags,
    query_pool: vk::QueryPool,
    query: u32,
) {
    unimplemented!("vkCmdWriteTimestamp");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyQueryPoolResults.html>"]
extern "stdcall" fn vkCmdCopyQueryPoolResults(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    stride: vk::DeviceSize,
    flags: vk::QueryResultFlags,
) {
    unimplemented!("vkCmdCopyQueryPoolResults");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants.html>"]
extern "stdcall" fn vkCmdPushConstants(
    command_buffer: vk::CommandBuffer,
    layout: vk::PipelineLayout,
    stage_flags: vk::ShaderStageFlags,
    offset: u32,
    size: u32,
    p_values: *const std::ffi::c_void,
) {
    unimplemented!("vkCmdPushConstants");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass.html>"]
extern "stdcall" fn vkCmdBeginRenderPass(
    command_buffer: vk::CommandBuffer,
    p_render_pass_begin: *const vk::RenderPassBeginInfo,
    contents: vk::SubpassContents,
) {
    unimplemented!("vkCmdBeginRenderPass");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdNextSubpass.html>"]
extern "stdcall" fn vkCmdNextSubpass(
    command_buffer: vk::CommandBuffer,
    contents: vk::SubpassContents,
) {
    unimplemented!("vkCmdNextSubpass");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderPass.html>"]
extern "stdcall" fn vkCmdEndRenderPass(command_buffer: vk::CommandBuffer) {
    unimplemented!("vkCmdEndRenderPass");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdExecuteCommands.html>"]
extern "stdcall" fn vkCmdExecuteCommands(
    command_buffer: vk::CommandBuffer,
    command_buffer_count: u32,
    p_command_buffers: *const vk::CommandBuffer,
) {
    unimplemented!("vkCmdExecuteCommands");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAndroidSurfaceKHR.html>"]
extern "stdcall" fn vkCreateAndroidSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::AndroidSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateAndroidSurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPropertiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceDisplayPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayPropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceDisplayPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPlanePropertiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayPlanePropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneSupportedDisplaysKHR.html>"]
extern "stdcall" fn vkGetDisplayPlaneSupportedDisplaysKHR(
    physical_device: vk::PhysicalDevice,
    plane_index: u32,
    p_display_count: *mut u32,
    p_displays: *mut vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkGetDisplayPlaneSupportedDisplaysKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayModePropertiesKHR.html>"]
extern "stdcall" fn vkGetDisplayModePropertiesKHR(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayModePropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetDisplayModePropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDisplayModeKHR.html>"]
extern "stdcall" fn vkCreateDisplayModeKHR(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
    p_create_info: *const vk::DisplayModeCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_mode: *mut vk::DisplayModeKHR,
) -> vk::Result {
    unimplemented!("vkCreateDisplayModeKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneCapabilitiesKHR.html>"]
extern "stdcall" fn vkGetDisplayPlaneCapabilitiesKHR(
    physical_device: vk::PhysicalDevice,
    mode: vk::DisplayModeKHR,
    plane_index: u32,
    p_capabilities: *mut vk::DisplayPlaneCapabilitiesKHR,
) -> vk::Result {
    unimplemented!("vkGetDisplayPlaneCapabilitiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDisplayPlaneSurfaceKHR.html>"]
extern "stdcall" fn vkCreateDisplayPlaneSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::DisplaySurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateDisplayPlaneSurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSharedSwapchainsKHR.html>"]
extern "stdcall" fn vkCreateSharedSwapchainsKHR(
    device: vk::Device,
    swapchain_count: u32,
    p_create_infos: *const vk::SwapchainCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_swapchains: *mut vk::SwapchainKHR,
) -> vk::Result {
    unimplemented!("vkCreateSharedSwapchainsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySurfaceKHR.html>"]
extern "stdcall" fn vkDestroySurfaceKHR(
    instance: vk::Instance,
    surface: vk::SurfaceKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroySurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfaceSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    surface: vk::SurfaceKHR,
    p_supported: *mut vk::Bool32,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfaceSupportKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilitiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_surface_capabilities: *mut vk::SurfaceCapabilitiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceFormatsKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfaceFormatsKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_surface_format_count: *mut u32,
    p_surface_formats: *mut vk::SurfaceFormatKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfaceFormatsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfacePresentModesKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_present_mode_count: *mut u32,
    p_present_modes: *mut vk::PresentModeKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfacePresentModesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSwapchainKHR.html>"]
extern "stdcall" fn vkCreateSwapchainKHR(
    device: vk::Device,
    p_create_info: *const vk::SwapchainCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_swapchain: *mut vk::SwapchainKHR,
) -> vk::Result {
    unimplemented!("vkCreateSwapchainKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySwapchainKHR.html>"]
extern "stdcall" fn vkDestroySwapchainKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroySwapchainKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainImagesKHR.html>"]
extern "stdcall" fn vkGetSwapchainImagesKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_swapchain_image_count: *mut u32,
    p_swapchain_images: *mut vk::Image,
) -> vk::Result {
    unimplemented!("vkGetSwapchainImagesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireNextImageKHR.html>"]
extern "stdcall" fn vkAcquireNextImageKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    timeout: u64,
    semaphore: vk::Semaphore,
    fence: vk::Fence,
    p_image_index: *mut u32,
) -> vk::Result {
    unimplemented!("vkAcquireNextImageKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueuePresentKHR.html>"]
extern "stdcall" fn vkQueuePresentKHR(
    queue: vk::Queue,
    p_present_info: *const vk::PresentInfoKHR,
) -> vk::Result {
    unimplemented!("vkQueuePresentKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateViSurfaceNN.html>"]
extern "stdcall" fn vkCreateViSurfaceNN(
    instance: vk::Instance,
    p_create_info: *const vk::ViSurfaceCreateInfoNN,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateViSurfaceNN");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateWaylandSurfaceKHR.html>"]
extern "stdcall" fn vkCreateWaylandSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::WaylandSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateWaylandSurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceWaylandPresentationSupportKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    display: *mut vk::wl_display,
) -> vk::Bool32 {
    unimplemented!("vkGetPhysicalDeviceWaylandPresentationSupportKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateWin32SurfaceKHR.html>"]
extern "stdcall" fn vkCreateWin32SurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::Win32SurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateWin32SurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceWin32PresentationSupportKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceWin32PresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
) -> vk::Bool32 {
    unimplemented!("vkGetPhysicalDeviceWin32PresentationSupportKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateXlibSurfaceKHR.html>"]
extern "stdcall" fn vkCreateXlibSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::XlibSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateXlibSurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceXlibPresentationSupportKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceXlibPresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    dpy: *mut vk::Display,
    visual_i_d: vk::VisualID,
) -> vk::Bool32 {
    unimplemented!("vkGetPhysicalDeviceXlibPresentationSupportKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateXcbSurfaceKHR.html>"]
extern "stdcall" fn vkCreateXcbSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::XcbSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateXcbSurfaceKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceXcbPresentationSupportKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceXcbPresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    connection: *mut vk::xcb_connection_t,
    visual_id: vk::xcb_visualid_t,
) -> vk::Bool32 {
    unimplemented!("vkGetPhysicalDeviceXcbPresentationSupportKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDirectFBSurfaceEXT.html>"]
extern "stdcall" fn vkCreateDirectFBSurfaceEXT(
    instance: vk::Instance,
    p_create_info: *const vk::DirectFBSurfaceCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateDirectFBSurfaceEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDirectFBPresentationSupportEXT.html>"]
extern "stdcall" fn vkGetPhysicalDeviceDirectFBPresentationSupportEXT(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    dfb: *mut vk::IDirectFB,
) -> vk::Bool32 {
    unimplemented!("vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImagePipeSurfaceFUCHSIA.html>"]
extern "stdcall" fn vkCreateImagePipeSurfaceFUCHSIA(
    instance: vk::Instance,
    p_create_info: *const vk::ImagePipeSurfaceCreateInfoFUCHSIA,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateImagePipeSurfaceFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateStreamDescriptorSurfaceGGP.html>"]
extern "stdcall" fn vkCreateStreamDescriptorSurfaceGGP(
    instance: vk::Instance,
    p_create_info: *const vk::StreamDescriptorSurfaceCreateInfoGGP,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateStreamDescriptorSurfaceGGP");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateScreenSurfaceQNX.html>"]
extern "stdcall" fn vkCreateScreenSurfaceQNX(
    instance: vk::Instance,
    p_create_info: *const vk::ScreenSurfaceCreateInfoQNX,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateScreenSurfaceQNX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceScreenPresentationSupportQNX.html>"]
extern "stdcall" fn vkGetPhysicalDeviceScreenPresentationSupportQNX(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    window: *mut vk::_screen_window,
) -> vk::Bool32 {
    unimplemented!("vkGetPhysicalDeviceScreenPresentationSupportQNX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDebugReportCallbackEXT.html>"]
extern "stdcall" fn vkCreateDebugReportCallbackEXT(
    instance: vk::Instance,
    p_create_info: *const vk::DebugReportCallbackCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_callback: *mut vk::DebugReportCallbackEXT,
) -> vk::Result {
    unimplemented!("vkCreateDebugReportCallbackEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDebugReportCallbackEXT.html>"]
extern "stdcall" fn vkDestroyDebugReportCallbackEXT(
    instance: vk::Instance,
    callback: vk::DebugReportCallbackEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDebugReportCallbackEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugReportMessageEXT.html>"]
extern "stdcall" fn vkDebugReportMessageEXT(
    instance: vk::Instance,
    flags: vk::DebugReportFlagsEXT,
    object_type: vk::DebugReportObjectTypeEXT,
    object: u64,
    location: isize,
    message_code: i32,
    p_layer_prefix: *const char,
    p_message: *const char,
) {
    unimplemented!("vkDebugReportMessageEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugMarkerSetObjectNameEXT.html>"]
extern "stdcall" fn vkDebugMarkerSetObjectNameEXT(
    device: vk::Device,
    p_name_info: *const vk::DebugMarkerObjectNameInfoEXT,
) -> vk::Result {
    unimplemented!("vkDebugMarkerSetObjectNameEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugMarkerSetObjectTagEXT.html>"]
extern "stdcall" fn vkDebugMarkerSetObjectTagEXT(
    device: vk::Device,
    p_tag_info: *const vk::DebugMarkerObjectTagInfoEXT,
) -> vk::Result {
    unimplemented!("vkDebugMarkerSetObjectTagEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerBeginEXT.html>"]
extern "stdcall" fn vkCmdDebugMarkerBeginEXT(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::DebugMarkerMarkerInfoEXT,
) {
    unimplemented!("vkCmdDebugMarkerBeginEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerEndEXT.html>"]
extern "stdcall" fn vkCmdDebugMarkerEndEXT(command_buffer: vk::CommandBuffer) {
    unimplemented!("vkCmdDebugMarkerEndEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerInsertEXT.html>"]
extern "stdcall" fn vkCmdDebugMarkerInsertEXT(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::DebugMarkerMarkerInfoEXT,
) {
    unimplemented!("vkCmdDebugMarkerInsertEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalImageFormatPropertiesNV.html>"]
extern "stdcall" fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    r#type: vk::ImageType,
    tiling: vk::ImageTiling,
    usage: vk::ImageUsageFlags,
    flags: vk::ImageCreateFlags,
    external_handle_type: vk::ExternalMemoryHandleTypeFlagsNV,
    p_external_image_format_properties: *mut vk::ExternalImageFormatPropertiesNV,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandleNV.html>"]
extern "stdcall" fn vkGetMemoryWin32HandleNV(
    device: vk::Device,
    memory: vk::DeviceMemory,
    handle_type: vk::ExternalMemoryHandleTypeFlagsNV,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    unimplemented!("vkGetMemoryWin32HandleNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdExecuteGeneratedCommandsNV.html>"]
extern "stdcall" fn vkCmdExecuteGeneratedCommandsNV(
    command_buffer: vk::CommandBuffer,
    is_preprocessed: vk::Bool32,
    p_generated_commands_info: *const vk::GeneratedCommandsInfoNV,
) {
    unimplemented!("vkCmdExecuteGeneratedCommandsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPreprocessGeneratedCommandsNV.html>"]
extern "stdcall" fn vkCmdPreprocessGeneratedCommandsNV(
    command_buffer: vk::CommandBuffer,
    p_generated_commands_info: *const vk::GeneratedCommandsInfoNV,
) {
    unimplemented!("vkCmdPreprocessGeneratedCommandsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipelineShaderGroupNV.html>"]
extern "stdcall" fn vkCmdBindPipelineShaderGroupNV(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    pipeline: vk::Pipeline,
    group_index: u32,
) {
    unimplemented!("vkCmdBindPipelineShaderGroupNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetGeneratedCommandsMemoryRequirementsNV.html>"]
extern "stdcall" fn vkGetGeneratedCommandsMemoryRequirementsNV(
    device: vk::Device,
    p_info: *const vk::GeneratedCommandsMemoryRequirementsInfoNV,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    unimplemented!("vkGetGeneratedCommandsMemoryRequirementsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateIndirectCommandsLayoutNV.html>"]
extern "stdcall" fn vkCreateIndirectCommandsLayoutNV(
    device: vk::Device,
    p_create_info: *const vk::IndirectCommandsLayoutCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_indirect_commands_layout: *mut vk::IndirectCommandsLayoutNV,
) -> vk::Result {
    unimplemented!("vkCreateIndirectCommandsLayoutNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyIndirectCommandsLayoutNV.html>"]
extern "stdcall" fn vkDestroyIndirectCommandsLayoutNV(
    device: vk::Device,
    indirect_commands_layout: vk::IndirectCommandsLayoutNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyIndirectCommandsLayoutNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFeatures2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceFeatures2(
    physical_device: vk::PhysicalDevice,
    p_features: *mut vk::PhysicalDeviceFeatures2,
) {
    unimplemented!("vkGetPhysicalDeviceFeatures2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceProperties2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceProperties2(
    physical_device: vk::PhysicalDevice,
    p_properties: *mut vk::PhysicalDeviceProperties2,
) {
    unimplemented!("vkGetPhysicalDeviceProperties2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFormatProperties2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceFormatProperties2(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    p_format_properties: *mut vk::FormatProperties2,
) {
    unimplemented!("vkGetPhysicalDeviceFormatProperties2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceImageFormatProperties2(
    physical_device: vk::PhysicalDevice,
    p_image_format_info: *const vk::PhysicalDeviceImageFormatInfo2,
    p_image_format_properties: *mut vk::ImageFormatProperties2,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceImageFormatProperties2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceQueueFamilyProperties2(
    physical_device: vk::PhysicalDevice,
    p_queue_family_property_count: *mut u32,
    p_queue_family_properties: *mut vk::QueueFamilyProperties2,
) {
    unimplemented!("vkGetPhysicalDeviceQueueFamilyProperties2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMemoryProperties2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceMemoryProperties2(
    physical_device: vk::PhysicalDevice,
    p_memory_properties: *mut vk::PhysicalDeviceMemoryProperties2,
) {
    unimplemented!("vkGetPhysicalDeviceMemoryProperties2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties2.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSparseImageFormatProperties2(
    physical_device: vk::PhysicalDevice,
    p_format_info: *const vk::PhysicalDeviceSparseImageFormatInfo2,
    p_property_count: *mut u32,
    p_properties: *mut vk::SparseImageFormatProperties2,
) {
    unimplemented!("vkGetPhysicalDeviceSparseImageFormatProperties2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetKHR.html>"]
extern "stdcall" fn vkCmdPushDescriptorSetKHR(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    set: u32,
    descriptor_write_count: u32,
    p_descriptor_writes: *const vk::WriteDescriptorSet,
) {
    unimplemented!("vkCmdPushDescriptorSetKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkTrimCommandPool.html>"]
extern "stdcall" fn vkTrimCommandPool(
    device: vk::Device,
    command_pool: vk::CommandPool,
    flags: vk::CommandPoolTrimFlags,
) {
    unimplemented!("vkTrimCommandPool");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalBufferProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceExternalBufferProperties(
    physical_device: vk::PhysicalDevice,
    p_external_buffer_info: *const vk::PhysicalDeviceExternalBufferInfo,
    p_external_buffer_properties: *mut vk::ExternalBufferProperties,
) {
    unimplemented!("vkGetPhysicalDeviceExternalBufferProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandleKHR.html>"]
extern "stdcall" fn vkGetMemoryWin32HandleKHR(
    device: vk::Device,
    p_get_win32_handle_info: *const vk::MemoryGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    unimplemented!("vkGetMemoryWin32HandleKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandlePropertiesKHR.html>"]
extern "stdcall" fn vkGetMemoryWin32HandlePropertiesKHR(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    handle: vk::HANDLE,
    p_memory_win32_handle_properties: *mut vk::MemoryWin32HandlePropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetMemoryWin32HandlePropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryFdKHR.html>"]
extern "stdcall" fn vkGetMemoryFdKHR(
    device: vk::Device,
    p_get_fd_info: *const vk::MemoryGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    unimplemented!("vkGetMemoryFdKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryFdPropertiesKHR.html>"]
extern "stdcall" fn vkGetMemoryFdPropertiesKHR(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    fd: std::os::raw::c_int,
    p_memory_fd_properties: *mut vk::MemoryFdPropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetMemoryFdPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryZirconHandleFUCHSIA.html>"]
extern "stdcall" fn vkGetMemoryZirconHandleFUCHSIA(
    device: vk::Device,
    p_get_zircon_handle_info: *const vk::MemoryGetZirconHandleInfoFUCHSIA,
    p_zircon_handle: *mut vk::zx_handle_t,
) -> vk::Result {
    unimplemented!("vkGetMemoryZirconHandleFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryZirconHandlePropertiesFUCHSIA.html>"]
extern "stdcall" fn vkGetMemoryZirconHandlePropertiesFUCHSIA(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    zircon_handle: vk::zx_handle_t,
    p_memory_zircon_handle_properties: *mut vk::MemoryZirconHandlePropertiesFUCHSIA,
) -> vk::Result {
    unimplemented!("vkGetMemoryZirconHandlePropertiesFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryRemoteAddressNV.html>"]
extern "stdcall" fn vkGetMemoryRemoteAddressNV(
    device: vk::Device,
    p_memory_get_remote_address_info: *const vk::MemoryGetRemoteAddressInfoNV,
    p_address: *mut vk::RemoteAddressNV,
) -> vk::Result {
    unimplemented!("vkGetMemoryRemoteAddressNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalSemaphoreProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceExternalSemaphoreProperties(
    physical_device: vk::PhysicalDevice,
    p_external_semaphore_info: *const vk::PhysicalDeviceExternalSemaphoreInfo,
    p_external_semaphore_properties: *mut vk::ExternalSemaphoreProperties,
) {
    unimplemented!("vkGetPhysicalDeviceExternalSemaphoreProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreWin32HandleKHR.html>"]
extern "stdcall" fn vkGetSemaphoreWin32HandleKHR(
    device: vk::Device,
    p_get_win32_handle_info: *const vk::SemaphoreGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    unimplemented!("vkGetSemaphoreWin32HandleKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreWin32HandleKHR.html>"]
extern "stdcall" fn vkImportSemaphoreWin32HandleKHR(
    device: vk::Device,
    p_import_semaphore_win32_handle_info: *const vk::ImportSemaphoreWin32HandleInfoKHR,
) -> vk::Result {
    unimplemented!("vkImportSemaphoreWin32HandleKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreFdKHR.html>"]
extern "stdcall" fn vkGetSemaphoreFdKHR(
    device: vk::Device,
    p_get_fd_info: *const vk::SemaphoreGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    unimplemented!("vkGetSemaphoreFdKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreFdKHR.html>"]
extern "stdcall" fn vkImportSemaphoreFdKHR(
    device: vk::Device,
    p_import_semaphore_fd_info: *const vk::ImportSemaphoreFdInfoKHR,
) -> vk::Result {
    unimplemented!("vkImportSemaphoreFdKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreZirconHandleFUCHSIA.html>"]
extern "stdcall" fn vkGetSemaphoreZirconHandleFUCHSIA(
    device: vk::Device,
    p_get_zircon_handle_info: *const vk::SemaphoreGetZirconHandleInfoFUCHSIA,
    p_zircon_handle: *mut vk::zx_handle_t,
) -> vk::Result {
    unimplemented!("vkGetSemaphoreZirconHandleFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreZirconHandleFUCHSIA.html>"]
extern "stdcall" fn vkImportSemaphoreZirconHandleFUCHSIA(
    device: vk::Device,
    p_import_semaphore_zircon_handle_info: *const vk::ImportSemaphoreZirconHandleInfoFUCHSIA,
) -> vk::Result {
    unimplemented!("vkImportSemaphoreZirconHandleFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalFenceProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceExternalFenceProperties(
    physical_device: vk::PhysicalDevice,
    p_external_fence_info: *const vk::PhysicalDeviceExternalFenceInfo,
    p_external_fence_properties: *mut vk::ExternalFenceProperties,
) {
    unimplemented!("vkGetPhysicalDeviceExternalFenceProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceWin32HandleKHR.html>"]
extern "stdcall" fn vkGetFenceWin32HandleKHR(
    device: vk::Device,
    p_get_win32_handle_info: *const vk::FenceGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    unimplemented!("vkGetFenceWin32HandleKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportFenceWin32HandleKHR.html>"]
extern "stdcall" fn vkImportFenceWin32HandleKHR(
    device: vk::Device,
    p_import_fence_win32_handle_info: *const vk::ImportFenceWin32HandleInfoKHR,
) -> vk::Result {
    unimplemented!("vkImportFenceWin32HandleKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceFdKHR.html>"]
extern "stdcall" fn vkGetFenceFdKHR(
    device: vk::Device,
    p_get_fd_info: *const vk::FenceGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    unimplemented!("vkGetFenceFdKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportFenceFdKHR.html>"]
extern "stdcall" fn vkImportFenceFdKHR(
    device: vk::Device,
    p_import_fence_fd_info: *const vk::ImportFenceFdInfoKHR,
) -> vk::Result {
    unimplemented!("vkImportFenceFdKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseDisplayEXT.html>"]
extern "stdcall" fn vkReleaseDisplayEXT(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkReleaseDisplayEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireXlibDisplayEXT.html>"]
extern "stdcall" fn vkAcquireXlibDisplayEXT(
    physical_device: vk::PhysicalDevice,
    dpy: *mut vk::Display,
    display: vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkAcquireXlibDisplayEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRandROutputDisplayEXT.html>"]
extern "stdcall" fn vkGetRandROutputDisplayEXT(
    physical_device: vk::PhysicalDevice,
    dpy: *mut vk::Display,
    rr_output: vk::RROutput,
    p_display: *mut vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkGetRandROutputDisplayEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireWinrtDisplayNV.html>"]
extern "stdcall" fn vkAcquireWinrtDisplayNV(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkAcquireWinrtDisplayNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetWinrtDisplayNV.html>"]
extern "stdcall" fn vkGetWinrtDisplayNV(
    physical_device: vk::PhysicalDevice,
    device_relative_id: u32,
    p_display: *mut vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkGetWinrtDisplayNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDisplayPowerControlEXT.html>"]
extern "stdcall" fn vkDisplayPowerControlEXT(
    device: vk::Device,
    display: vk::DisplayKHR,
    p_display_power_info: *const vk::DisplayPowerInfoEXT,
) -> vk::Result {
    unimplemented!("vkDisplayPowerControlEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkRegisterDeviceEventEXT.html>"]
extern "stdcall" fn vkRegisterDeviceEventEXT(
    device: vk::Device,
    p_device_event_info: *const vk::DeviceEventInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_fence: *mut vk::Fence,
) -> vk::Result {
    unimplemented!("vkRegisterDeviceEventEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkRegisterDisplayEventEXT.html>"]
extern "stdcall" fn vkRegisterDisplayEventEXT(
    device: vk::Device,
    display: vk::DisplayKHR,
    p_display_event_info: *const vk::DisplayEventInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_fence: *mut vk::Fence,
) -> vk::Result {
    unimplemented!("vkRegisterDisplayEventEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainCounterEXT.html>"]
extern "stdcall" fn vkGetSwapchainCounterEXT(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    counter: vk::SurfaceCounterFlagsEXT,
    p_counter_value: *mut u64,
) -> vk::Result {
    unimplemented!("vkGetSwapchainCounterEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2EXT.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_surface_capabilities: *mut vk::SurfaceCapabilities2EXT,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDeviceGroups.html>"]
extern "stdcall" fn vkEnumeratePhysicalDeviceGroups(
    instance: vk::Instance,
    p_physical_device_group_count: *mut u32,
    p_physical_device_group_properties: *mut vk::PhysicalDeviceGroupProperties,
) -> vk::Result {
    unimplemented!("vkEnumeratePhysicalDeviceGroups");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupPeerMemoryFeatures.html>"]
extern "stdcall" fn vkGetDeviceGroupPeerMemoryFeatures(
    device: vk::Device,
    heap_index: u32,
    local_device_index: u32,
    remote_device_index: u32,
    p_peer_memory_features: *mut vk::PeerMemoryFeatureFlags,
) {
    unimplemented!("vkGetDeviceGroupPeerMemoryFeatures");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindBufferMemory2.html>"]
extern "stdcall" fn vkBindBufferMemory2(
    device: vk::Device,
    bind_info_count: u32,
    p_bind_infos: *const vk::BindBufferMemoryInfo,
) -> vk::Result {
    unimplemented!("vkBindBufferMemory2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindImageMemory2.html>"]
extern "stdcall" fn vkBindImageMemory2(
    device: vk::Device,
    bind_info_count: u32,
    p_bind_infos: *const vk::BindImageMemoryInfo,
) -> vk::Result {
    unimplemented!("vkBindImageMemory2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDeviceMask.html>"]
extern "stdcall" fn vkCmdSetDeviceMask(command_buffer: vk::CommandBuffer, device_mask: u32) {
    unimplemented!("vkCmdSetDeviceMask");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupPresentCapabilitiesKHR.html>"]
extern "stdcall" fn vkGetDeviceGroupPresentCapabilitiesKHR(
    device: vk::Device,
    p_device_group_present_capabilities: *mut vk::DeviceGroupPresentCapabilitiesKHR,
) -> vk::Result {
    unimplemented!("vkGetDeviceGroupPresentCapabilitiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupSurfacePresentModesKHR.html>"]
extern "stdcall" fn vkGetDeviceGroupSurfacePresentModesKHR(
    device: vk::Device,
    surface: vk::SurfaceKHR,
    p_modes: *mut vk::DeviceGroupPresentModeFlagsKHR,
) -> vk::Result {
    unimplemented!("vkGetDeviceGroupSurfacePresentModesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireNextImage2KHR.html>"]
extern "stdcall" fn vkAcquireNextImage2KHR(
    device: vk::Device,
    p_acquire_info: *const vk::AcquireNextImageInfoKHR,
    p_image_index: *mut u32,
) -> vk::Result {
    unimplemented!("vkAcquireNextImage2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchBase.html>"]
extern "stdcall" fn vkCmdDispatchBase(
    command_buffer: vk::CommandBuffer,
    base_group_x: u32,
    base_group_y: u32,
    base_group_z: u32,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    unimplemented!("vkCmdDispatchBase");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDevicePresentRectanglesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDevicePresentRectanglesKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_rect_count: *mut u32,
    p_rects: *mut vk::Rect2D,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDevicePresentRectanglesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorUpdateTemplate.html>"]
extern "stdcall" fn vkCreateDescriptorUpdateTemplate(
    device: vk::Device,
    p_create_info: *const vk::DescriptorUpdateTemplateCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_descriptor_update_template: *mut vk::DescriptorUpdateTemplate,
) -> vk::Result {
    unimplemented!("vkCreateDescriptorUpdateTemplate");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorUpdateTemplate.html>"]
extern "stdcall" fn vkDestroyDescriptorUpdateTemplate(
    device: vk::Device,
    descriptor_update_template: vk::DescriptorUpdateTemplate,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDescriptorUpdateTemplate");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateDescriptorSetWithTemplate.html>"]
extern "stdcall" fn vkUpdateDescriptorSetWithTemplate(
    device: vk::Device,
    descriptor_set: vk::DescriptorSet,
    descriptor_update_template: vk::DescriptorUpdateTemplate,
    p_data: *const std::ffi::c_void,
) {
    unimplemented!("vkUpdateDescriptorSetWithTemplate");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetWithTemplateKHR.html>"]
extern "stdcall" fn vkCmdPushDescriptorSetWithTemplateKHR(
    command_buffer: vk::CommandBuffer,
    descriptor_update_template: vk::DescriptorUpdateTemplate,
    layout: vk::PipelineLayout,
    set: u32,
    p_data: *const std::ffi::c_void,
) {
    unimplemented!("vkCmdPushDescriptorSetWithTemplateKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetHdrMetadataEXT.html>"]
extern "stdcall" fn vkSetHdrMetadataEXT(
    device: vk::Device,
    swapchain_count: u32,
    p_swapchains: *const vk::SwapchainKHR,
    p_metadata: *const vk::HdrMetadataEXT,
) {
    unimplemented!("vkSetHdrMetadataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainStatusKHR.html>"]
extern "stdcall" fn vkGetSwapchainStatusKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
) -> vk::Result {
    unimplemented!("vkGetSwapchainStatusKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRefreshCycleDurationGOOGLE.html>"]
extern "stdcall" fn vkGetRefreshCycleDurationGOOGLE(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_display_timing_properties: *mut vk::RefreshCycleDurationGOOGLE,
) -> vk::Result {
    unimplemented!("vkGetRefreshCycleDurationGOOGLE");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPastPresentationTimingGOOGLE.html>"]
extern "stdcall" fn vkGetPastPresentationTimingGOOGLE(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_presentation_timing_count: *mut u32,
    p_presentation_timings: *mut vk::PastPresentationTimingGOOGLE,
) -> vk::Result {
    unimplemented!("vkGetPastPresentationTimingGOOGLE");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateIOSSurfaceMVK.html>"]
extern "stdcall" fn vkCreateIOSSurfaceMVK(
    instance: vk::Instance,
    p_create_info: *const vk::IOSSurfaceCreateInfoMVK,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateIOSSurfaceMVK");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMacOSSurfaceMVK.html>"]
extern "stdcall" fn vkCreateMacOSSurfaceMVK(
    instance: vk::Instance,
    p_create_info: *const vk::MacOSSurfaceCreateInfoMVK,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateMacOSSurfaceMVK");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMetalSurfaceEXT.html>"]
extern "stdcall" fn vkCreateMetalSurfaceEXT(
    instance: vk::Instance,
    p_create_info: *const vk::MetalSurfaceCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateMetalSurfaceEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWScalingNV.html>"]
extern "stdcall" fn vkCmdSetViewportWScalingNV(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_viewport_w_scalings: *const vk::ViewportWScalingNV,
) {
    unimplemented!("vkCmdSetViewportWScalingNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleEXT.html>"]
extern "stdcall" fn vkCmdSetDiscardRectangleEXT(
    command_buffer: vk::CommandBuffer,
    first_discard_rectangle: u32,
    discard_rectangle_count: u32,
    p_discard_rectangles: *const vk::Rect2D,
) {
    unimplemented!("vkCmdSetDiscardRectangleEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleEnableEXT.html>"]
extern "stdcall" fn vkCmdSetDiscardRectangleEnableEXT(
    command_buffer: vk::CommandBuffer,
    discard_rectangle_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDiscardRectangleEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleModeEXT.html>"]
extern "stdcall" fn vkCmdSetDiscardRectangleModeEXT(
    command_buffer: vk::CommandBuffer,
    discard_rectangle_mode: vk::DiscardRectangleModeEXT,
) {
    unimplemented!("vkCmdSetDiscardRectangleModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleLocationsEXT.html>"]
extern "stdcall" fn vkCmdSetSampleLocationsEXT(
    command_buffer: vk::CommandBuffer,
    p_sample_locations_info: *const vk::SampleLocationsInfoEXT,
) {
    unimplemented!("vkCmdSetSampleLocationsEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMultisamplePropertiesEXT.html>"]
extern "stdcall" fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
    physical_device: vk::PhysicalDevice,
    samples: vk::SampleCountFlags,
    p_multisample_properties: *mut vk::MultisamplePropertiesEXT,
) {
    unimplemented!("vkGetPhysicalDeviceMultisamplePropertiesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2KHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    physical_device: vk::PhysicalDevice,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_surface_capabilities: *mut vk::SurfaceCapabilities2KHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceFormats2KHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfaceFormats2KHR(
    physical_device: vk::PhysicalDevice,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_surface_format_count: *mut u32,
    p_surface_formats: *mut vk::SurfaceFormat2KHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfaceFormats2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayProperties2KHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceDisplayProperties2KHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayProperties2KHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceDisplayProperties2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPlaneProperties2KHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayPlaneProperties2KHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayModeProperties2KHR.html>"]
extern "stdcall" fn vkGetDisplayModeProperties2KHR(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayModeProperties2KHR,
) -> vk::Result {
    unimplemented!("vkGetDisplayModeProperties2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneCapabilities2KHR.html>"]
extern "stdcall" fn vkGetDisplayPlaneCapabilities2KHR(
    physical_device: vk::PhysicalDevice,
    p_display_plane_info: *const vk::DisplayPlaneInfo2KHR,
    p_capabilities: *mut vk::DisplayPlaneCapabilities2KHR,
) -> vk::Result {
    unimplemented!("vkGetDisplayPlaneCapabilities2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferMemoryRequirements2.html>"]
extern "stdcall" fn vkGetBufferMemoryRequirements2(
    device: vk::Device,
    p_info: *const vk::BufferMemoryRequirementsInfo2,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    unimplemented!("vkGetBufferMemoryRequirements2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageMemoryRequirements2.html>"]
extern "stdcall" fn vkGetImageMemoryRequirements2(
    device: vk::Device,
    p_info: *const vk::ImageMemoryRequirementsInfo2,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    unimplemented!("vkGetImageMemoryRequirements2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSparseMemoryRequirements2.html>"]
extern "stdcall" fn vkGetImageSparseMemoryRequirements2(
    device: vk::Device,
    p_info: *const vk::ImageSparseMemoryRequirementsInfo2,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut vk::SparseImageMemoryRequirements2,
) {
    unimplemented!("vkGetImageSparseMemoryRequirements2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceBufferMemoryRequirements.html>"]
extern "stdcall" fn vkGetDeviceBufferMemoryRequirements(
    device: vk::Device,
    p_info: *const vk::DeviceBufferMemoryRequirements,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    unimplemented!("vkGetDeviceBufferMemoryRequirements");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageMemoryRequirements.html>"]
extern "stdcall" fn vkGetDeviceImageMemoryRequirements(
    device: vk::Device,
    p_info: *const vk::DeviceImageMemoryRequirements,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    unimplemented!("vkGetDeviceImageMemoryRequirements");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageSparseMemoryRequirements.html>"]
extern "stdcall" fn vkGetDeviceImageSparseMemoryRequirements(
    device: vk::Device,
    p_info: *const vk::DeviceImageMemoryRequirements,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut vk::SparseImageMemoryRequirements2,
) {
    unimplemented!("vkGetDeviceImageSparseMemoryRequirements");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSamplerYcbcrConversion.html>"]
extern "stdcall" fn vkCreateSamplerYcbcrConversion(
    device: vk::Device,
    p_create_info: *const vk::SamplerYcbcrConversionCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_ycbcr_conversion: *mut vk::SamplerYcbcrConversion,
) -> vk::Result {
    unimplemented!("vkCreateSamplerYcbcrConversion");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySamplerYcbcrConversion.html>"]
extern "stdcall" fn vkDestroySamplerYcbcrConversion(
    device: vk::Device,
    ycbcr_conversion: vk::SamplerYcbcrConversion,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroySamplerYcbcrConversion");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceQueue2.html>"]
extern "stdcall" fn vkGetDeviceQueue2(
    device: vk::Device,
    p_queue_info: *const vk::DeviceQueueInfo2,
    p_queue: *mut vk::Queue,
) {
    unimplemented!("vkGetDeviceQueue2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateValidationCacheEXT.html>"]
extern "stdcall" fn vkCreateValidationCacheEXT(
    device: vk::Device,
    p_create_info: *const vk::ValidationCacheCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_validation_cache: *mut vk::ValidationCacheEXT,
) -> vk::Result {
    unimplemented!("vkCreateValidationCacheEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyValidationCacheEXT.html>"]
extern "stdcall" fn vkDestroyValidationCacheEXT(
    device: vk::Device,
    validation_cache: vk::ValidationCacheEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyValidationCacheEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetValidationCacheDataEXT.html>"]
extern "stdcall" fn vkGetValidationCacheDataEXT(
    device: vk::Device,
    validation_cache: vk::ValidationCacheEXT,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetValidationCacheDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMergeValidationCachesEXT.html>"]
extern "stdcall" fn vkMergeValidationCachesEXT(
    device: vk::Device,
    dst_cache: vk::ValidationCacheEXT,
    src_cache_count: u32,
    p_src_caches: *const vk::ValidationCacheEXT,
) -> vk::Result {
    unimplemented!("vkMergeValidationCachesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutSupport.html>"]
extern "stdcall" fn vkGetDescriptorSetLayoutSupport(
    device: vk::Device,
    p_create_info: *const vk::DescriptorSetLayoutCreateInfo,
    p_support: *mut vk::DescriptorSetLayoutSupport,
) {
    unimplemented!("vkGetDescriptorSetLayoutSupport");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainGrallocUsageANDROID.html>"]
extern "stdcall" fn vkGetSwapchainGrallocUsageANDROID(
    device: vk::Device,
    format: vk::Format,
    image_usage: vk::ImageUsageFlags,
    gralloc_usage: *mut std::os::raw::c_int,
) -> vk::Result {
    unimplemented!("vkGetSwapchainGrallocUsageANDROID");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainGrallocUsage2ANDROID.html>"]
extern "stdcall" fn vkGetSwapchainGrallocUsage2ANDROID(
    device: vk::Device,
    format: vk::Format,
    image_usage: vk::ImageUsageFlags,
    swapchain_image_usage: vk::SwapchainImageUsageFlagsANDROID,
    gralloc_consumer_usage: *mut u64,
    gralloc_producer_usage: *mut u64,
) -> vk::Result {
    unimplemented!("vkGetSwapchainGrallocUsage2ANDROID");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireImageANDROID.html>"]
extern "stdcall" fn vkAcquireImageANDROID(
    device: vk::Device,
    image: vk::Image,
    native_fence_fd: std::os::raw::c_int,
    semaphore: vk::Semaphore,
    fence: vk::Fence,
) -> vk::Result {
    unimplemented!("vkAcquireImageANDROID");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSignalReleaseImageANDROID.html>"]
extern "stdcall" fn vkQueueSignalReleaseImageANDROID(
    queue: vk::Queue,
    wait_semaphore_count: u32,
    p_wait_semaphores: *const vk::Semaphore,
    image: vk::Image,
    p_native_fence_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    unimplemented!("vkQueueSignalReleaseImageANDROID");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderInfoAMD.html>"]
extern "stdcall" fn vkGetShaderInfoAMD(
    device: vk::Device,
    pipeline: vk::Pipeline,
    shader_stage: vk::ShaderStageFlags,
    info_type: vk::ShaderInfoTypeAMD,
    p_info_size: *mut isize,
    p_info: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetShaderInfoAMD");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLocalDimmingAMD.html>"]
extern "stdcall" fn vkSetLocalDimmingAMD(
    device: vk::Device,
    swap_chain: vk::SwapchainKHR,
    local_dimming_enable: vk::Bool32,
) {
    unimplemented!("vkSetLocalDimmingAMD");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(
    physical_device: vk::PhysicalDevice,
    p_time_domain_count: *mut u32,
    p_time_domains: *mut vk::TimeDomainKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetCalibratedTimestampsKHR.html>"]
extern "stdcall" fn vkGetCalibratedTimestampsKHR(
    device: vk::Device,
    timestamp_count: u32,
    p_timestamp_infos: *const vk::CalibratedTimestampInfoKHR,
    p_timestamps: *mut u64,
    p_max_deviation: *mut u64,
) -> vk::Result {
    unimplemented!("vkGetCalibratedTimestampsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDebugUtilsObjectNameEXT.html>"]
extern "stdcall" fn vkSetDebugUtilsObjectNameEXT(
    device: vk::Device,
    p_name_info: *const vk::DebugUtilsObjectNameInfoEXT,
) -> vk::Result {
    unimplemented!("vkSetDebugUtilsObjectNameEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDebugUtilsObjectTagEXT.html>"]
extern "stdcall" fn vkSetDebugUtilsObjectTagEXT(
    device: vk::Device,
    p_tag_info: *const vk::DebugUtilsObjectTagInfoEXT,
) -> vk::Result {
    unimplemented!("vkSetDebugUtilsObjectTagEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueBeginDebugUtilsLabelEXT.html>"]
extern "stdcall" fn vkQueueBeginDebugUtilsLabelEXT(
    queue: vk::Queue,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    unimplemented!("vkQueueBeginDebugUtilsLabelEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueEndDebugUtilsLabelEXT.html>"]
extern "stdcall" fn vkQueueEndDebugUtilsLabelEXT(queue: vk::Queue) {
    unimplemented!("vkQueueEndDebugUtilsLabelEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueInsertDebugUtilsLabelEXT.html>"]
extern "stdcall" fn vkQueueInsertDebugUtilsLabelEXT(
    queue: vk::Queue,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    unimplemented!("vkQueueInsertDebugUtilsLabelEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginDebugUtilsLabelEXT.html>"]
extern "stdcall" fn vkCmdBeginDebugUtilsLabelEXT(
    command_buffer: vk::CommandBuffer,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    unimplemented!("vkCmdBeginDebugUtilsLabelEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndDebugUtilsLabelEXT.html>"]
extern "stdcall" fn vkCmdEndDebugUtilsLabelEXT(command_buffer: vk::CommandBuffer) {
    unimplemented!("vkCmdEndDebugUtilsLabelEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdInsertDebugUtilsLabelEXT.html>"]
extern "stdcall" fn vkCmdInsertDebugUtilsLabelEXT(
    command_buffer: vk::CommandBuffer,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    unimplemented!("vkCmdInsertDebugUtilsLabelEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDebugUtilsMessengerEXT.html>"]
extern "stdcall" fn vkCreateDebugUtilsMessengerEXT(
    instance: vk::Instance,
    p_create_info: *const vk::DebugUtilsMessengerCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_messenger: *mut vk::DebugUtilsMessengerEXT,
) -> vk::Result {
    unimplemented!("vkCreateDebugUtilsMessengerEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDebugUtilsMessengerEXT.html>"]
extern "stdcall" fn vkDestroyDebugUtilsMessengerEXT(
    instance: vk::Instance,
    messenger: vk::DebugUtilsMessengerEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDebugUtilsMessengerEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSubmitDebugUtilsMessageEXT.html>"]
extern "stdcall" fn vkSubmitDebugUtilsMessageEXT(
    instance: vk::Instance,
    message_severity: vk::DebugUtilsMessageSeverityFlagsEXT,
    message_types: vk::DebugUtilsMessageTypeFlagsEXT,
    p_callback_data: *const vk::DebugUtilsMessengerCallbackDataEXT,
) {
    unimplemented!("vkSubmitDebugUtilsMessageEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryHostPointerPropertiesEXT.html>"]
extern "stdcall" fn vkGetMemoryHostPointerPropertiesEXT(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    p_host_pointer: *const std::ffi::c_void,
    p_memory_host_pointer_properties: *mut vk::MemoryHostPointerPropertiesEXT,
) -> vk::Result {
    unimplemented!("vkGetMemoryHostPointerPropertiesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteBufferMarkerAMD.html>"]
extern "stdcall" fn vkCmdWriteBufferMarkerAMD(
    command_buffer: vk::CommandBuffer,
    pipeline_stage: vk::PipelineStageFlags,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    marker: u32,
) {
    unimplemented!("vkCmdWriteBufferMarkerAMD");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRenderPass2.html>"]
extern "stdcall" fn vkCreateRenderPass2(
    device: vk::Device,
    p_create_info: *const vk::RenderPassCreateInfo2,
    p_allocator: *const vk::AllocationCallbacks,
    p_render_pass: *mut vk::RenderPass,
) -> vk::Result {
    unimplemented!("vkCreateRenderPass2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass2.html>"]
extern "stdcall" fn vkCmdBeginRenderPass2(
    command_buffer: vk::CommandBuffer,
    p_render_pass_begin: *const vk::RenderPassBeginInfo,
    p_subpass_begin_info: *const vk::SubpassBeginInfo,
) {
    unimplemented!("vkCmdBeginRenderPass2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdNextSubpass2.html>"]
extern "stdcall" fn vkCmdNextSubpass2(
    command_buffer: vk::CommandBuffer,
    p_subpass_begin_info: *const vk::SubpassBeginInfo,
    p_subpass_end_info: *const vk::SubpassEndInfo,
) {
    unimplemented!("vkCmdNextSubpass2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderPass2.html>"]
extern "stdcall" fn vkCmdEndRenderPass2(
    command_buffer: vk::CommandBuffer,
    p_subpass_end_info: *const vk::SubpassEndInfo,
) {
    unimplemented!("vkCmdEndRenderPass2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreCounterValue.html>"]
extern "stdcall" fn vkGetSemaphoreCounterValue(
    device: vk::Device,
    semaphore: vk::Semaphore,
    p_value: *mut u64,
) -> vk::Result {
    unimplemented!("vkGetSemaphoreCounterValue");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitSemaphores.html>"]
extern "stdcall" fn vkWaitSemaphores(
    device: vk::Device,
    p_wait_info: *const vk::SemaphoreWaitInfo,
    timeout: u64,
) -> vk::Result {
    unimplemented!("vkWaitSemaphores");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSignalSemaphore.html>"]
extern "stdcall" fn vkSignalSemaphore(
    device: vk::Device,
    p_signal_info: *const vk::SemaphoreSignalInfo,
) -> vk::Result {
    unimplemented!("vkSignalSemaphore");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAndroidHardwareBufferPropertiesANDROID.html>"]
extern "stdcall" fn vkGetAndroidHardwareBufferPropertiesANDROID(
    device: vk::Device,
    buffer: *const vk::AHardwareBuffer,
    p_properties: *mut vk::AndroidHardwareBufferPropertiesANDROID,
) -> vk::Result {
    unimplemented!("vkGetAndroidHardwareBufferPropertiesANDROID");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryAndroidHardwareBufferANDROID.html>"]
extern "stdcall" fn vkGetMemoryAndroidHardwareBufferANDROID(
    device: vk::Device,
    p_info: *const vk::MemoryGetAndroidHardwareBufferInfoANDROID,
    p_buffer: *mut *mut vk::AHardwareBuffer,
) -> vk::Result {
    unimplemented!("vkGetMemoryAndroidHardwareBufferANDROID");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirectCount.html>"]
extern "stdcall" fn vkCmdDrawIndirectCount(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawIndirectCount");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexedIndirectCount.html>"]
extern "stdcall" fn vkCmdDrawIndexedIndirectCount(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawIndexedIndirectCount");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCheckpointNV.html>"]
extern "stdcall" fn vkCmdSetCheckpointNV(
    command_buffer: vk::CommandBuffer,
    p_checkpoint_marker: *const std::ffi::c_void,
) {
    unimplemented!("vkCmdSetCheckpointNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueueCheckpointDataNV.html>"]
extern "stdcall" fn vkGetQueueCheckpointDataNV(
    queue: vk::Queue,
    p_checkpoint_data_count: *mut u32,
    p_checkpoint_data: *mut vk::CheckpointDataNV,
) {
    unimplemented!("vkGetQueueCheckpointDataNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindTransformFeedbackBuffersEXT.html>"]
extern "stdcall" fn vkCmdBindTransformFeedbackBuffersEXT(
    command_buffer: vk::CommandBuffer,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const vk::Buffer,
    p_offsets: *const vk::DeviceSize,
    p_sizes: *const vk::DeviceSize,
) {
    unimplemented!("vkCmdBindTransformFeedbackBuffersEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginTransformFeedbackEXT.html>"]
extern "stdcall" fn vkCmdBeginTransformFeedbackEXT(
    command_buffer: vk::CommandBuffer,
    first_counter_buffer: u32,
    counter_buffer_count: u32,
    p_counter_buffers: *const vk::Buffer,
    p_counter_buffer_offsets: *const vk::DeviceSize,
) {
    unimplemented!("vkCmdBeginTransformFeedbackEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndTransformFeedbackEXT.html>"]
extern "stdcall" fn vkCmdEndTransformFeedbackEXT(
    command_buffer: vk::CommandBuffer,
    first_counter_buffer: u32,
    counter_buffer_count: u32,
    p_counter_buffers: *const vk::Buffer,
    p_counter_buffer_offsets: *const vk::DeviceSize,
) {
    unimplemented!("vkCmdEndTransformFeedbackEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginQueryIndexedEXT.html>"]
extern "stdcall" fn vkCmdBeginQueryIndexedEXT(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
    flags: vk::QueryControlFlags,
    index: u32,
) {
    unimplemented!("vkCmdBeginQueryIndexedEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndQueryIndexedEXT.html>"]
extern "stdcall" fn vkCmdEndQueryIndexedEXT(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
    index: u32,
) {
    unimplemented!("vkCmdEndQueryIndexedEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirectByteCountEXT.html>"]
extern "stdcall" fn vkCmdDrawIndirectByteCountEXT(
    command_buffer: vk::CommandBuffer,
    instance_count: u32,
    first_instance: u32,
    counter_buffer: vk::Buffer,
    counter_buffer_offset: vk::DeviceSize,
    counter_offset: u32,
    vertex_stride: u32,
) {
    unimplemented!("vkCmdDrawIndirectByteCountEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExclusiveScissorNV.html>"]
extern "stdcall" fn vkCmdSetExclusiveScissorNV(
    command_buffer: vk::CommandBuffer,
    first_exclusive_scissor: u32,
    exclusive_scissor_count: u32,
    p_exclusive_scissors: *const vk::Rect2D,
) {
    unimplemented!("vkCmdSetExclusiveScissorNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExclusiveScissorEnableNV.html>"]
extern "stdcall" fn vkCmdSetExclusiveScissorEnableNV(
    command_buffer: vk::CommandBuffer,
    first_exclusive_scissor: u32,
    exclusive_scissor_count: u32,
    p_exclusive_scissor_enables: *const vk::Bool32,
) {
    unimplemented!("vkCmdSetExclusiveScissorEnableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindShadingRateImageNV.html>"]
extern "stdcall" fn vkCmdBindShadingRateImageNV(
    command_buffer: vk::CommandBuffer,
    image_view: vk::ImageView,
    image_layout: vk::ImageLayout,
) {
    unimplemented!("vkCmdBindShadingRateImageNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportShadingRatePaletteNV.html>"]
extern "stdcall" fn vkCmdSetViewportShadingRatePaletteNV(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_shading_rate_palettes: *const vk::ShadingRatePaletteNV,
) {
    unimplemented!("vkCmdSetViewportShadingRatePaletteNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoarseSampleOrderNV.html>"]
extern "stdcall" fn vkCmdSetCoarseSampleOrderNV(
    command_buffer: vk::CommandBuffer,
    sample_order_type: vk::CoarseSampleOrderTypeNV,
    custom_sample_order_count: u32,
    p_custom_sample_orders: *const vk::CoarseSampleOrderCustomNV,
) {
    unimplemented!("vkCmdSetCoarseSampleOrderNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksNV.html>"]
extern "stdcall" fn vkCmdDrawMeshTasksNV(
    command_buffer: vk::CommandBuffer,
    task_count: u32,
    first_task: u32,
) {
    unimplemented!("vkCmdDrawMeshTasksNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectNV.html>"]
extern "stdcall" fn vkCmdDrawMeshTasksIndirectNV(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawMeshTasksIndirectNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectCountNV.html>"]
extern "stdcall" fn vkCmdDrawMeshTasksIndirectCountNV(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawMeshTasksIndirectCountNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksEXT.html>"]
extern "stdcall" fn vkCmdDrawMeshTasksEXT(
    command_buffer: vk::CommandBuffer,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    unimplemented!("vkCmdDrawMeshTasksEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectEXT.html>"]
extern "stdcall" fn vkCmdDrawMeshTasksIndirectEXT(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawMeshTasksIndirectEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectCountEXT.html>"]
extern "stdcall" fn vkCmdDrawMeshTasksIndirectCountEXT(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    unimplemented!("vkCmdDrawMeshTasksIndirectCountEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCompileDeferredNV.html>"]
extern "stdcall" fn vkCompileDeferredNV(
    device: vk::Device,
    pipeline: vk::Pipeline,
    shader: u32,
) -> vk::Result {
    unimplemented!("vkCompileDeferredNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAccelerationStructureNV.html>"]
extern "stdcall" fn vkCreateAccelerationStructureNV(
    device: vk::Device,
    p_create_info: *const vk::AccelerationStructureCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_acceleration_structure: *mut vk::AccelerationStructureNV,
) -> vk::Result {
    unimplemented!("vkCreateAccelerationStructureNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindInvocationMaskHUAWEI.html>"]
extern "stdcall" fn vkCmdBindInvocationMaskHUAWEI(
    command_buffer: vk::CommandBuffer,
    image_view: vk::ImageView,
    image_layout: vk::ImageLayout,
) {
    unimplemented!("vkCmdBindInvocationMaskHUAWEI");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyAccelerationStructureKHR.html>"]
extern "stdcall" fn vkDestroyAccelerationStructureKHR(
    device: vk::Device,
    acceleration_structure: vk::AccelerationStructureKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyAccelerationStructureKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyAccelerationStructureNV.html>"]
extern "stdcall" fn vkDestroyAccelerationStructureNV(
    device: vk::Device,
    acceleration_structure: vk::AccelerationStructureNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyAccelerationStructureNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureMemoryRequirementsNV.html>"]
extern "stdcall" fn vkGetAccelerationStructureMemoryRequirementsNV(
    device: vk::Device,
    p_info: *const vk::AccelerationStructureMemoryRequirementsInfoNV,
    p_memory_requirements: *mut vk::MemoryRequirements2KHR,
) {
    unimplemented!("vkGetAccelerationStructureMemoryRequirementsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindAccelerationStructureMemoryNV.html>"]
extern "stdcall" fn vkBindAccelerationStructureMemoryNV(
    device: vk::Device,
    bind_info_count: u32,
    p_bind_infos: *const vk::BindAccelerationStructureMemoryInfoNV,
) -> vk::Result {
    unimplemented!("vkBindAccelerationStructureMemoryNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureNV.html>"]
extern "stdcall" fn vkCmdCopyAccelerationStructureNV(
    command_buffer: vk::CommandBuffer,
    dst: vk::AccelerationStructureNV,
    src: vk::AccelerationStructureNV,
    mode: vk::CopyAccelerationStructureModeKHR,
) {
    unimplemented!("vkCmdCopyAccelerationStructureNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureKHR.html>"]
extern "stdcall" fn vkCmdCopyAccelerationStructureKHR(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyAccelerationStructureInfoKHR,
) {
    unimplemented!("vkCmdCopyAccelerationStructureKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyAccelerationStructureKHR.html>"]
extern "stdcall" fn vkCopyAccelerationStructureKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyAccelerationStructureInfoKHR,
) -> vk::Result {
    unimplemented!("vkCopyAccelerationStructureKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureToMemoryKHR.html>"]
extern "stdcall" fn vkCmdCopyAccelerationStructureToMemoryKHR(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyAccelerationStructureToMemoryInfoKHR,
) {
    unimplemented!("vkCmdCopyAccelerationStructureToMemoryKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyAccelerationStructureToMemoryKHR.html>"]
extern "stdcall" fn vkCopyAccelerationStructureToMemoryKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyAccelerationStructureToMemoryInfoKHR,
) -> vk::Result {
    unimplemented!("vkCopyAccelerationStructureToMemoryKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToAccelerationStructureKHR.html>"]
extern "stdcall" fn vkCmdCopyMemoryToAccelerationStructureKHR(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMemoryToAccelerationStructureInfoKHR,
) {
    unimplemented!("vkCmdCopyMemoryToAccelerationStructureKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToAccelerationStructureKHR.html>"]
extern "stdcall" fn vkCopyMemoryToAccelerationStructureKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMemoryToAccelerationStructureInfoKHR,
) -> vk::Result {
    unimplemented!("vkCopyMemoryToAccelerationStructureKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesKHR.html>"]
extern "stdcall" fn vkCmdWriteAccelerationStructuresPropertiesKHR(
    command_buffer: vk::CommandBuffer,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const vk::AccelerationStructureKHR,
    query_type: vk::QueryType,
    query_pool: vk::QueryPool,
    first_query: u32,
) {
    unimplemented!("vkCmdWriteAccelerationStructuresPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesNV.html>"]
extern "stdcall" fn vkCmdWriteAccelerationStructuresPropertiesNV(
    command_buffer: vk::CommandBuffer,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const vk::AccelerationStructureNV,
    query_type: vk::QueryType,
    query_pool: vk::QueryPool,
    first_query: u32,
) {
    unimplemented!("vkCmdWriteAccelerationStructuresPropertiesNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructureNV.html>"]
extern "stdcall" fn vkCmdBuildAccelerationStructureNV(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::AccelerationStructureInfoNV,
    instance_data: vk::Buffer,
    instance_offset: vk::DeviceSize,
    update: vk::Bool32,
    dst: vk::AccelerationStructureNV,
    src: vk::AccelerationStructureNV,
    scratch: vk::Buffer,
    scratch_offset: vk::DeviceSize,
) {
    unimplemented!("vkCmdBuildAccelerationStructureNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWriteAccelerationStructuresPropertiesKHR.html>"]
extern "stdcall" fn vkWriteAccelerationStructuresPropertiesKHR(
    device: vk::Device,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const vk::AccelerationStructureKHR,
    query_type: vk::QueryType,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
    stride: isize,
) -> vk::Result {
    unimplemented!("vkWriteAccelerationStructuresPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysKHR.html>"]
extern "stdcall" fn vkCmdTraceRaysKHR(
    command_buffer: vk::CommandBuffer,
    p_raygen_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_miss_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_hit_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_callable_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    width: u32,
    height: u32,
    depth: u32,
) {
    unimplemented!("vkCmdTraceRaysKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysNV.html>"]
extern "stdcall" fn vkCmdTraceRaysNV(
    command_buffer: vk::CommandBuffer,
    raygen_shader_binding_table_buffer: vk::Buffer,
    raygen_shader_binding_offset: vk::DeviceSize,
    miss_shader_binding_table_buffer: vk::Buffer,
    miss_shader_binding_offset: vk::DeviceSize,
    miss_shader_binding_stride: vk::DeviceSize,
    hit_shader_binding_table_buffer: vk::Buffer,
    hit_shader_binding_offset: vk::DeviceSize,
    hit_shader_binding_stride: vk::DeviceSize,
    callable_shader_binding_table_buffer: vk::Buffer,
    callable_shader_binding_offset: vk::DeviceSize,
    callable_shader_binding_stride: vk::DeviceSize,
    width: u32,
    height: u32,
    depth: u32,
) {
    unimplemented!("vkCmdTraceRaysNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingShaderGroupHandlesKHR.html>"]
extern "stdcall" fn vkGetRayTracingShaderGroupHandlesKHR(
    device: vk::Device,
    pipeline: vk::Pipeline,
    first_group: u32,
    group_count: u32,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetRayTracingShaderGroupHandlesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.html>"]
extern "stdcall" fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    device: vk::Device,
    pipeline: vk::Pipeline,
    first_group: u32,
    group_count: u32,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureHandleNV.html>"]
extern "stdcall" fn vkGetAccelerationStructureHandleNV(
    device: vk::Device,
    acceleration_structure: vk::AccelerationStructureNV,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetAccelerationStructureHandleNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRayTracingPipelinesNV.html>"]
extern "stdcall" fn vkCreateRayTracingPipelinesNV(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::RayTracingPipelineCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    unimplemented!("vkCreateRayTracingPipelinesNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRayTracingPipelinesKHR.html>"]
extern "stdcall" fn vkCreateRayTracingPipelinesKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::RayTracingPipelineCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    unimplemented!("vkCreateRayTracingPipelinesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.html>"]
extern "stdcall" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::CooperativeMatrixPropertiesNV,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysIndirectKHR.html>"]
extern "stdcall" fn vkCmdTraceRaysIndirectKHR(
    command_buffer: vk::CommandBuffer,
    p_raygen_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_miss_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_hit_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_callable_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    indirect_device_address: vk::DeviceAddress,
) {
    unimplemented!("vkCmdTraceRaysIndirectKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysIndirect2KHR.html>"]
extern "stdcall" fn vkCmdTraceRaysIndirect2KHR(
    command_buffer: vk::CommandBuffer,
    indirect_device_address: vk::DeviceAddress,
) {
    unimplemented!("vkCmdTraceRaysIndirect2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceAccelerationStructureCompatibilityKHR.html>"]
extern "stdcall" fn vkGetDeviceAccelerationStructureCompatibilityKHR(
    device: vk::Device,
    p_version_info: *const vk::AccelerationStructureVersionInfoKHR,
    p_compatibility: *mut vk::AccelerationStructureCompatibilityKHR,
) {
    unimplemented!("vkGetDeviceAccelerationStructureCompatibilityKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingShaderGroupStackSizeKHR.html>"]
extern "stdcall" fn vkGetRayTracingShaderGroupStackSizeKHR(
    device: vk::Device,
    pipeline: vk::Pipeline,
    group: u32,
    group_shader: vk::ShaderGroupShaderKHR,
) -> vk::DeviceSize {
    unimplemented!("vkGetRayTracingShaderGroupStackSizeKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRayTracingPipelineStackSizeKHR.html>"]
extern "stdcall" fn vkCmdSetRayTracingPipelineStackSizeKHR(
    command_buffer: vk::CommandBuffer,
    pipeline_stack_size: u32,
) {
    unimplemented!("vkCmdSetRayTracingPipelineStackSizeKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewHandleNVX.html>"]
extern "stdcall" fn vkGetImageViewHandleNVX(
    device: vk::Device,
    p_info: *const vk::ImageViewHandleInfoNVX,
) -> u32 {
    unimplemented!("vkGetImageViewHandleNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewAddressNVX.html>"]
extern "stdcall" fn vkGetImageViewAddressNVX(
    device: vk::Device,
    image_view: vk::ImageView,
    p_properties: *mut vk::ImageViewAddressPropertiesNVX,
) -> vk::Result {
    unimplemented!("vkGetImageViewAddressNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModes2EXT.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSurfacePresentModes2EXT(
    physical_device: vk::PhysicalDevice,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_present_mode_count: *mut u32,
    p_present_modes: *mut vk::PresentModeKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSurfacePresentModes2EXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupSurfacePresentModes2EXT.html>"]
extern "stdcall" fn vkGetDeviceGroupSurfacePresentModes2EXT(
    device: vk::Device,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_modes: *mut vk::DeviceGroupPresentModeFlagsKHR,
) -> vk::Result {
    unimplemented!("vkGetDeviceGroupSurfacePresentModes2EXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireFullScreenExclusiveModeEXT.html>"]
extern "stdcall" fn vkAcquireFullScreenExclusiveModeEXT(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
) -> vk::Result {
    unimplemented!("vkAcquireFullScreenExclusiveModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseFullScreenExclusiveModeEXT.html>"]
extern "stdcall" fn vkReleaseFullScreenExclusiveModeEXT(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
) -> vk::Result {
    unimplemented!("vkReleaseFullScreenExclusiveModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.html>"]
extern "stdcall" fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    p_counter_count: *mut u32,
    p_counters: *mut vk::PerformanceCounterKHR,
    p_counter_descriptions: *mut vk::PerformanceCounterDescriptionKHR,
) -> vk::Result {
    unimplemented!("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    physical_device: vk::PhysicalDevice,
    p_performance_query_create_info: *const vk::QueryPoolPerformanceCreateInfoKHR,
    p_num_passes: *mut u32,
) {
    unimplemented!("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireProfilingLockKHR.html>"]
extern "stdcall" fn vkAcquireProfilingLockKHR(
    device: vk::Device,
    p_info: *const vk::AcquireProfilingLockInfoKHR,
) -> vk::Result {
    unimplemented!("vkAcquireProfilingLockKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseProfilingLockKHR.html>"]
extern "stdcall" fn vkReleaseProfilingLockKHR(device: vk::Device) {
    unimplemented!("vkReleaseProfilingLockKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageDrmFormatModifierPropertiesEXT.html>"]
extern "stdcall" fn vkGetImageDrmFormatModifierPropertiesEXT(
    device: vk::Device,
    image: vk::Image,
    p_properties: *mut vk::ImageDrmFormatModifierPropertiesEXT,
) -> vk::Result {
    unimplemented!("vkGetImageDrmFormatModifierPropertiesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferOpaqueCaptureAddress.html>"]
extern "stdcall" fn vkGetBufferOpaqueCaptureAddress(
    device: vk::Device,
    p_info: *const vk::BufferDeviceAddressInfo,
) -> u64 {
    unimplemented!("vkGetBufferOpaqueCaptureAddress");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferDeviceAddress.html>"]
extern "stdcall" fn vkGetBufferDeviceAddress(
    device: vk::Device,
    p_info: *const vk::BufferDeviceAddressInfo,
) -> vk::DeviceAddress {
    unimplemented!("vkGetBufferDeviceAddress");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateHeadlessSurfaceEXT.html>"]
extern "stdcall" fn vkCreateHeadlessSurfaceEXT(
    instance: vk::Instance,
    p_create_info: *const vk::HeadlessSurfaceCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    unimplemented!("vkCreateHeadlessSurfaceEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.html>"]
extern "stdcall" fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    physical_device: vk::PhysicalDevice,
    p_combination_count: *mut u32,
    p_combinations: *mut vk::FramebufferMixedSamplesCombinationNV,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkInitializePerformanceApiINTEL.html>"]
extern "stdcall" fn vkInitializePerformanceApiINTEL(
    device: vk::Device,
    p_initialize_info: *const vk::InitializePerformanceApiInfoINTEL,
) -> vk::Result {
    unimplemented!("vkInitializePerformanceApiINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUninitializePerformanceApiINTEL.html>"]
extern "stdcall" fn vkUninitializePerformanceApiINTEL(device: vk::Device) {
    unimplemented!("vkUninitializePerformanceApiINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceMarkerINTEL.html>"]
extern "stdcall" fn vkCmdSetPerformanceMarkerINTEL(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::PerformanceMarkerInfoINTEL,
) -> vk::Result {
    unimplemented!("vkCmdSetPerformanceMarkerINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceStreamMarkerINTEL.html>"]
extern "stdcall" fn vkCmdSetPerformanceStreamMarkerINTEL(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::PerformanceStreamMarkerInfoINTEL,
) -> vk::Result {
    unimplemented!("vkCmdSetPerformanceStreamMarkerINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceOverrideINTEL.html>"]
extern "stdcall" fn vkCmdSetPerformanceOverrideINTEL(
    command_buffer: vk::CommandBuffer,
    p_override_info: *const vk::PerformanceOverrideInfoINTEL,
) -> vk::Result {
    unimplemented!("vkCmdSetPerformanceOverrideINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquirePerformanceConfigurationINTEL.html>"]
extern "stdcall" fn vkAcquirePerformanceConfigurationINTEL(
    device: vk::Device,
    p_acquire_info: *const vk::PerformanceConfigurationAcquireInfoINTEL,
    p_configuration: *mut vk::PerformanceConfigurationINTEL,
) -> vk::Result {
    unimplemented!("vkAcquirePerformanceConfigurationINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleasePerformanceConfigurationINTEL.html>"]
extern "stdcall" fn vkReleasePerformanceConfigurationINTEL(
    device: vk::Device,
    configuration: vk::PerformanceConfigurationINTEL,
) -> vk::Result {
    unimplemented!("vkReleasePerformanceConfigurationINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSetPerformanceConfigurationINTEL.html>"]
extern "stdcall" fn vkQueueSetPerformanceConfigurationINTEL(
    queue: vk::Queue,
    configuration: vk::PerformanceConfigurationINTEL,
) -> vk::Result {
    unimplemented!("vkQueueSetPerformanceConfigurationINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPerformanceParameterINTEL.html>"]
extern "stdcall" fn vkGetPerformanceParameterINTEL(
    device: vk::Device,
    parameter: vk::PerformanceParameterTypeINTEL,
    p_value: *mut vk::PerformanceValueINTEL,
) -> vk::Result {
    unimplemented!("vkGetPerformanceParameterINTEL");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMemoryOpaqueCaptureAddress.html>"]
extern "stdcall" fn vkGetDeviceMemoryOpaqueCaptureAddress(
    device: vk::Device,
    p_info: *const vk::DeviceMemoryOpaqueCaptureAddressInfo,
) -> u64 {
    unimplemented!("vkGetDeviceMemoryOpaqueCaptureAddress");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutablePropertiesKHR.html>"]
extern "stdcall" fn vkGetPipelineExecutablePropertiesKHR(
    device: vk::Device,
    p_pipeline_info: *const vk::PipelineInfoKHR,
    p_executable_count: *mut u32,
    p_properties: *mut vk::PipelineExecutablePropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPipelineExecutablePropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutableStatisticsKHR.html>"]
extern "stdcall" fn vkGetPipelineExecutableStatisticsKHR(
    device: vk::Device,
    p_executable_info: *const vk::PipelineExecutableInfoKHR,
    p_statistic_count: *mut u32,
    p_statistics: *mut vk::PipelineExecutableStatisticKHR,
) -> vk::Result {
    unimplemented!("vkGetPipelineExecutableStatisticsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutableInternalRepresentationsKHR.html>"]
extern "stdcall" fn vkGetPipelineExecutableInternalRepresentationsKHR(
    device: vk::Device,
    p_executable_info: *const vk::PipelineExecutableInfoKHR,
    p_internal_representation_count: *mut u32,
    p_internal_representations: *mut vk::PipelineExecutableInternalRepresentationKHR,
) -> vk::Result {
    unimplemented!("vkGetPipelineExecutableInternalRepresentationsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleKHR.html>"]
extern "stdcall" fn vkCmdSetLineStippleKHR(
    command_buffer: vk::CommandBuffer,
    line_stipple_factor: u32,
    line_stipple_pattern: u16,
) {
    unimplemented!("vkCmdSetLineStippleKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceToolProperties.html>"]
extern "stdcall" fn vkGetPhysicalDeviceToolProperties(
    physical_device: vk::PhysicalDevice,
    p_tool_count: *mut u32,
    p_tool_properties: *mut vk::PhysicalDeviceToolProperties,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceToolProperties");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAccelerationStructureKHR.html>"]
extern "stdcall" fn vkCreateAccelerationStructureKHR(
    device: vk::Device,
    p_create_info: *const vk::AccelerationStructureCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_acceleration_structure: *mut vk::AccelerationStructureKHR,
) -> vk::Result {
    unimplemented!("vkCreateAccelerationStructureKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructuresKHR.html>"]
extern "stdcall" fn vkCmdBuildAccelerationStructuresKHR(
    command_buffer: vk::CommandBuffer,
    info_count: u32,
    p_infos: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    pp_build_range_infos: *mut *const vk::AccelerationStructureBuildRangeInfoKHR,
) {
    unimplemented!("vkCmdBuildAccelerationStructuresKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructuresIndirectKHR.html>"]
extern "stdcall" fn vkCmdBuildAccelerationStructuresIndirectKHR(
    command_buffer: vk::CommandBuffer,
    info_count: u32,
    p_infos: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    p_indirect_device_addresses: *const vk::DeviceAddress,
    p_indirect_strides: *const u32,
    pp_max_primitive_counts: *mut *const u32,
) {
    unimplemented!("vkCmdBuildAccelerationStructuresIndirectKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBuildAccelerationStructuresKHR.html>"]
extern "stdcall" fn vkBuildAccelerationStructuresKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    info_count: u32,
    p_infos: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    pp_build_range_infos: *mut *const vk::AccelerationStructureBuildRangeInfoKHR,
) -> vk::Result {
    unimplemented!("vkBuildAccelerationStructuresKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureDeviceAddressKHR.html>"]
extern "stdcall" fn vkGetAccelerationStructureDeviceAddressKHR(
    device: vk::Device,
    p_info: *const vk::AccelerationStructureDeviceAddressInfoKHR,
) -> vk::DeviceAddress {
    unimplemented!("vkGetAccelerationStructureDeviceAddressKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDeferredOperationKHR.html>"]
extern "stdcall" fn vkCreateDeferredOperationKHR(
    device: vk::Device,
    p_allocator: *const vk::AllocationCallbacks,
    p_deferred_operation: *mut vk::DeferredOperationKHR,
) -> vk::Result {
    unimplemented!("vkCreateDeferredOperationKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDeferredOperationKHR.html>"]
extern "stdcall" fn vkDestroyDeferredOperationKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyDeferredOperationKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeferredOperationMaxConcurrencyKHR.html>"]
extern "stdcall" fn vkGetDeferredOperationMaxConcurrencyKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
) -> u32 {
    unimplemented!("vkGetDeferredOperationMaxConcurrencyKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeferredOperationResultKHR.html>"]
extern "stdcall" fn vkGetDeferredOperationResultKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
) -> vk::Result {
    unimplemented!("vkGetDeferredOperationResultKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDeferredOperationJoinKHR.html>"]
extern "stdcall" fn vkDeferredOperationJoinKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
) -> vk::Result {
    unimplemented!("vkDeferredOperationJoinKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineIndirectMemoryRequirementsNV.html>"]
extern "stdcall" fn vkGetPipelineIndirectMemoryRequirementsNV(
    device: vk::Device,
    p_create_info: *const vk::ComputePipelineCreateInfo,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    unimplemented!("vkGetPipelineIndirectMemoryRequirementsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineIndirectDeviceAddressNV.html>"]
extern "stdcall" fn vkGetPipelineIndirectDeviceAddressNV(
    device: vk::Device,
    p_info: *const vk::PipelineIndirectDeviceAddressInfoNV,
) -> vk::DeviceAddress {
    unimplemented!("vkGetPipelineIndirectDeviceAddressNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCullMode.html>"]
extern "stdcall" fn vkCmdSetCullMode(
    command_buffer: vk::CommandBuffer,
    cull_mode: vk::CullModeFlags,
) {
    unimplemented!("vkCmdSetCullMode");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFrontFace.html>"]
extern "stdcall" fn vkCmdSetFrontFace(
    command_buffer: vk::CommandBuffer,
    front_face: vk::FrontFace,
) {
    unimplemented!("vkCmdSetFrontFace");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPrimitiveTopology.html>"]
extern "stdcall" fn vkCmdSetPrimitiveTopology(
    command_buffer: vk::CommandBuffer,
    primitive_topology: vk::PrimitiveTopology,
) {
    unimplemented!("vkCmdSetPrimitiveTopology");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWithCount.html>"]
extern "stdcall" fn vkCmdSetViewportWithCount(
    command_buffer: vk::CommandBuffer,
    viewport_count: u32,
    p_viewports: *const vk::Viewport,
) {
    unimplemented!("vkCmdSetViewportWithCount");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetScissorWithCount.html>"]
extern "stdcall" fn vkCmdSetScissorWithCount(
    command_buffer: vk::CommandBuffer,
    scissor_count: u32,
    p_scissors: *const vk::Rect2D,
) {
    unimplemented!("vkCmdSetScissorWithCount");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindIndexBuffer2KHR.html>"]
extern "stdcall" fn vkCmdBindIndexBuffer2KHR(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    size: vk::DeviceSize,
    index_type: vk::IndexType,
) {
    unimplemented!("vkCmdBindIndexBuffer2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindVertexBuffers2.html>"]
extern "stdcall" fn vkCmdBindVertexBuffers2(
    command_buffer: vk::CommandBuffer,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const vk::Buffer,
    p_offsets: *const vk::DeviceSize,
    p_sizes: *const vk::DeviceSize,
    p_strides: *const vk::DeviceSize,
) {
    unimplemented!("vkCmdBindVertexBuffers2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthTestEnable.html>"]
extern "stdcall" fn vkCmdSetDepthTestEnable(
    command_buffer: vk::CommandBuffer,
    depth_test_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthTestEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthWriteEnable.html>"]
extern "stdcall" fn vkCmdSetDepthWriteEnable(
    command_buffer: vk::CommandBuffer,
    depth_write_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthWriteEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthCompareOp.html>"]
extern "stdcall" fn vkCmdSetDepthCompareOp(
    command_buffer: vk::CommandBuffer,
    depth_compare_op: vk::CompareOp,
) {
    unimplemented!("vkCmdSetDepthCompareOp");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBoundsTestEnable.html>"]
extern "stdcall" fn vkCmdSetDepthBoundsTestEnable(
    command_buffer: vk::CommandBuffer,
    depth_bounds_test_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthBoundsTestEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilTestEnable.html>"]
extern "stdcall" fn vkCmdSetStencilTestEnable(
    command_buffer: vk::CommandBuffer,
    stencil_test_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetStencilTestEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilOp.html>"]
extern "stdcall" fn vkCmdSetStencilOp(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    fail_op: vk::StencilOp,
    pass_op: vk::StencilOp,
    depth_fail_op: vk::StencilOp,
    compare_op: vk::CompareOp,
) {
    unimplemented!("vkCmdSetStencilOp");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPatchControlPointsEXT.html>"]
extern "stdcall" fn vkCmdSetPatchControlPointsEXT(
    command_buffer: vk::CommandBuffer,
    patch_control_points: u32,
) {
    unimplemented!("vkCmdSetPatchControlPointsEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizerDiscardEnable.html>"]
extern "stdcall" fn vkCmdSetRasterizerDiscardEnable(
    command_buffer: vk::CommandBuffer,
    rasterizer_discard_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetRasterizerDiscardEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBiasEnable.html>"]
extern "stdcall" fn vkCmdSetDepthBiasEnable(
    command_buffer: vk::CommandBuffer,
    depth_bias_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthBiasEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLogicOpEXT.html>"]
extern "stdcall" fn vkCmdSetLogicOpEXT(command_buffer: vk::CommandBuffer, logic_op: vk::LogicOp) {
    unimplemented!("vkCmdSetLogicOpEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPrimitiveRestartEnable.html>"]
extern "stdcall" fn vkCmdSetPrimitiveRestartEnable(
    command_buffer: vk::CommandBuffer,
    primitive_restart_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetPrimitiveRestartEnable");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetTessellationDomainOriginEXT.html>"]
extern "stdcall" fn vkCmdSetTessellationDomainOriginEXT(
    command_buffer: vk::CommandBuffer,
    domain_origin: vk::TessellationDomainOrigin,
) {
    unimplemented!("vkCmdSetTessellationDomainOriginEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClampEnableEXT.html>"]
extern "stdcall" fn vkCmdSetDepthClampEnableEXT(
    command_buffer: vk::CommandBuffer,
    depth_clamp_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthClampEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPolygonModeEXT.html>"]
extern "stdcall" fn vkCmdSetPolygonModeEXT(
    command_buffer: vk::CommandBuffer,
    polygon_mode: vk::PolygonMode,
) {
    unimplemented!("vkCmdSetPolygonModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizationSamplesEXT.html>"]
extern "stdcall" fn vkCmdSetRasterizationSamplesEXT(
    command_buffer: vk::CommandBuffer,
    rasterization_samples: vk::SampleCountFlags,
) {
    unimplemented!("vkCmdSetRasterizationSamplesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleMaskEXT.html>"]
extern "stdcall" fn vkCmdSetSampleMaskEXT(
    command_buffer: vk::CommandBuffer,
    samples: vk::SampleCountFlags,
    p_sample_mask: *const vk::SampleMask,
) {
    unimplemented!("vkCmdSetSampleMaskEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAlphaToCoverageEnableEXT.html>"]
extern "stdcall" fn vkCmdSetAlphaToCoverageEnableEXT(
    command_buffer: vk::CommandBuffer,
    alpha_to_coverage_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetAlphaToCoverageEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAlphaToOneEnableEXT.html>"]
extern "stdcall" fn vkCmdSetAlphaToOneEnableEXT(
    command_buffer: vk::CommandBuffer,
    alpha_to_one_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetAlphaToOneEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLogicOpEnableEXT.html>"]
extern "stdcall" fn vkCmdSetLogicOpEnableEXT(
    command_buffer: vk::CommandBuffer,
    logic_op_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetLogicOpEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEnableEXT.html>"]
extern "stdcall" fn vkCmdSetColorBlendEnableEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_enables: *const vk::Bool32,
) {
    unimplemented!("vkCmdSetColorBlendEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEquationEXT.html>"]
extern "stdcall" fn vkCmdSetColorBlendEquationEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_equations: *const vk::ColorBlendEquationEXT,
) {
    unimplemented!("vkCmdSetColorBlendEquationEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteMaskEXT.html>"]
extern "stdcall" fn vkCmdSetColorWriteMaskEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_write_masks: *const vk::ColorComponentFlags,
) {
    unimplemented!("vkCmdSetColorWriteMaskEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizationStreamEXT.html>"]
extern "stdcall" fn vkCmdSetRasterizationStreamEXT(
    command_buffer: vk::CommandBuffer,
    rasterization_stream: u32,
) {
    unimplemented!("vkCmdSetRasterizationStreamEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetConservativeRasterizationModeEXT.html>"]
extern "stdcall" fn vkCmdSetConservativeRasterizationModeEXT(
    command_buffer: vk::CommandBuffer,
    conservative_rasterization_mode: vk::ConservativeRasterizationModeEXT,
) {
    unimplemented!("vkCmdSetConservativeRasterizationModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExtraPrimitiveOverestimationSizeEXT.html>"]
extern "stdcall" fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(
    command_buffer: vk::CommandBuffer,
    extra_primitive_overestimation_size: f32,
) {
    unimplemented!("vkCmdSetExtraPrimitiveOverestimationSizeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClipEnableEXT.html>"]
extern "stdcall" fn vkCmdSetDepthClipEnableEXT(
    command_buffer: vk::CommandBuffer,
    depth_clip_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthClipEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleLocationsEnableEXT.html>"]
extern "stdcall" fn vkCmdSetSampleLocationsEnableEXT(
    command_buffer: vk::CommandBuffer,
    sample_locations_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetSampleLocationsEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendAdvancedEXT.html>"]
extern "stdcall" fn vkCmdSetColorBlendAdvancedEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_advanced: *const vk::ColorBlendAdvancedEXT,
) {
    unimplemented!("vkCmdSetColorBlendAdvancedEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetProvokingVertexModeEXT.html>"]
extern "stdcall" fn vkCmdSetProvokingVertexModeEXT(
    command_buffer: vk::CommandBuffer,
    provoking_vertex_mode: vk::ProvokingVertexModeEXT,
) {
    unimplemented!("vkCmdSetProvokingVertexModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineRasterizationModeEXT.html>"]
extern "stdcall" fn vkCmdSetLineRasterizationModeEXT(
    command_buffer: vk::CommandBuffer,
    line_rasterization_mode: vk::LineRasterizationModeEXT,
) {
    unimplemented!("vkCmdSetLineRasterizationModeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleEnableEXT.html>"]
extern "stdcall" fn vkCmdSetLineStippleEnableEXT(
    command_buffer: vk::CommandBuffer,
    stippled_line_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetLineStippleEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClipNegativeOneToOneEXT.html>"]
extern "stdcall" fn vkCmdSetDepthClipNegativeOneToOneEXT(
    command_buffer: vk::CommandBuffer,
    negative_one_to_one: vk::Bool32,
) {
    unimplemented!("vkCmdSetDepthClipNegativeOneToOneEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWScalingEnableNV.html>"]
extern "stdcall" fn vkCmdSetViewportWScalingEnableNV(
    command_buffer: vk::CommandBuffer,
    viewport_w_scaling_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetViewportWScalingEnableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportSwizzleNV.html>"]
extern "stdcall" fn vkCmdSetViewportSwizzleNV(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_viewport_swizzles: *const vk::ViewportSwizzleNV,
) {
    unimplemented!("vkCmdSetViewportSwizzleNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageToColorEnableNV.html>"]
extern "stdcall" fn vkCmdSetCoverageToColorEnableNV(
    command_buffer: vk::CommandBuffer,
    coverage_to_color_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetCoverageToColorEnableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageToColorLocationNV.html>"]
extern "stdcall" fn vkCmdSetCoverageToColorLocationNV(
    command_buffer: vk::CommandBuffer,
    coverage_to_color_location: u32,
) {
    unimplemented!("vkCmdSetCoverageToColorLocationNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationModeNV.html>"]
extern "stdcall" fn vkCmdSetCoverageModulationModeNV(
    command_buffer: vk::CommandBuffer,
    coverage_modulation_mode: vk::CoverageModulationModeNV,
) {
    unimplemented!("vkCmdSetCoverageModulationModeNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationTableEnableNV.html>"]
extern "stdcall" fn vkCmdSetCoverageModulationTableEnableNV(
    command_buffer: vk::CommandBuffer,
    coverage_modulation_table_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetCoverageModulationTableEnableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationTableNV.html>"]
extern "stdcall" fn vkCmdSetCoverageModulationTableNV(
    command_buffer: vk::CommandBuffer,
    coverage_modulation_table_count: u32,
    p_coverage_modulation_table: *const f32,
) {
    unimplemented!("vkCmdSetCoverageModulationTableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetShadingRateImageEnableNV.html>"]
extern "stdcall" fn vkCmdSetShadingRateImageEnableNV(
    command_buffer: vk::CommandBuffer,
    shading_rate_image_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetShadingRateImageEnableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageReductionModeNV.html>"]
extern "stdcall" fn vkCmdSetCoverageReductionModeNV(
    command_buffer: vk::CommandBuffer,
    coverage_reduction_mode: vk::CoverageReductionModeNV,
) {
    unimplemented!("vkCmdSetCoverageReductionModeNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRepresentativeFragmentTestEnableNV.html>"]
extern "stdcall" fn vkCmdSetRepresentativeFragmentTestEnableNV(
    command_buffer: vk::CommandBuffer,
    representative_fragment_test_enable: vk::Bool32,
) {
    unimplemented!("vkCmdSetRepresentativeFragmentTestEnableNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePrivateDataSlot.html>"]
extern "stdcall" fn vkCreatePrivateDataSlot(
    device: vk::Device,
    p_create_info: *const vk::PrivateDataSlotCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_private_data_slot: *mut vk::PrivateDataSlot,
) -> vk::Result {
    unimplemented!("vkCreatePrivateDataSlot");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPrivateDataSlot.html>"]
extern "stdcall" fn vkDestroyPrivateDataSlot(
    device: vk::Device,
    private_data_slot: vk::PrivateDataSlot,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyPrivateDataSlot");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetPrivateData.html>"]
extern "stdcall" fn vkSetPrivateData(
    device: vk::Device,
    object_type: vk::ObjectType,
    object_handle: u64,
    private_data_slot: vk::PrivateDataSlot,
    data: u64,
) -> vk::Result {
    unimplemented!("vkSetPrivateData");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPrivateData.html>"]
extern "stdcall" fn vkGetPrivateData(
    device: vk::Device,
    object_type: vk::ObjectType,
    object_handle: u64,
    private_data_slot: vk::PrivateDataSlot,
    p_data: *mut u64,
) {
    unimplemented!("vkGetPrivateData");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBuffer2.html>"]
extern "stdcall" fn vkCmdCopyBuffer2(
    command_buffer: vk::CommandBuffer,
    p_copy_buffer_info: *const vk::CopyBufferInfo2,
) {
    unimplemented!("vkCmdCopyBuffer2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImage2.html>"]
extern "stdcall" fn vkCmdCopyImage2(
    command_buffer: vk::CommandBuffer,
    p_copy_image_info: *const vk::CopyImageInfo2,
) {
    unimplemented!("vkCmdCopyImage2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBlitImage2.html>"]
extern "stdcall" fn vkCmdBlitImage2(
    command_buffer: vk::CommandBuffer,
    p_blit_image_info: *const vk::BlitImageInfo2,
) {
    unimplemented!("vkCmdBlitImage2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBufferToImage2.html>"]
extern "stdcall" fn vkCmdCopyBufferToImage2(
    command_buffer: vk::CommandBuffer,
    p_copy_buffer_to_image_info: *const vk::CopyBufferToImageInfo2,
) {
    unimplemented!("vkCmdCopyBufferToImage2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImageToBuffer2.html>"]
extern "stdcall" fn vkCmdCopyImageToBuffer2(
    command_buffer: vk::CommandBuffer,
    p_copy_image_to_buffer_info: *const vk::CopyImageToBufferInfo2,
) {
    unimplemented!("vkCmdCopyImageToBuffer2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResolveImage2.html>"]
extern "stdcall" fn vkCmdResolveImage2(
    command_buffer: vk::CommandBuffer,
    p_resolve_image_info: *const vk::ResolveImageInfo2,
) {
    unimplemented!("vkCmdResolveImage2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFragmentShadingRateKHR.html>"]
extern "stdcall" fn vkCmdSetFragmentShadingRateKHR(
    command_buffer: vk::CommandBuffer,
    p_fragment_size: *const vk::Extent2D,
    combiner_ops: vk::FragmentShadingRateCombinerOpKHR,
) {
    unimplemented!("vkCmdSetFragmentShadingRateKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFragmentShadingRatesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceFragmentShadingRatesKHR(
    physical_device: vk::PhysicalDevice,
    p_fragment_shading_rate_count: *mut u32,
    p_fragment_shading_rates: *mut vk::PhysicalDeviceFragmentShadingRateKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceFragmentShadingRatesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFragmentShadingRateEnumNV.html>"]
extern "stdcall" fn vkCmdSetFragmentShadingRateEnumNV(
    command_buffer: vk::CommandBuffer,
    shading_rate: vk::FragmentShadingRateNV,
    combiner_ops: vk::FragmentShadingRateCombinerOpKHR,
) {
    unimplemented!("vkCmdSetFragmentShadingRateEnumNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureBuildSizesKHR.html>"]
extern "stdcall" fn vkGetAccelerationStructureBuildSizesKHR(
    device: vk::Device,
    build_type: vk::AccelerationStructureBuildTypeKHR,
    p_build_info: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    p_max_primitive_counts: *const u32,
    p_size_info: *mut vk::AccelerationStructureBuildSizesInfoKHR,
) {
    unimplemented!("vkGetAccelerationStructureBuildSizesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetVertexInputEXT.html>"]
extern "stdcall" fn vkCmdSetVertexInputEXT(
    command_buffer: vk::CommandBuffer,
    vertex_binding_description_count: u32,
    p_vertex_binding_descriptions: *const vk::VertexInputBindingDescription2EXT,
    vertex_attribute_description_count: u32,
    p_vertex_attribute_descriptions: *const vk::VertexInputAttributeDescription2EXT,
) {
    unimplemented!("vkCmdSetVertexInputEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteEnableEXT.html>"]
extern "stdcall" fn vkCmdSetColorWriteEnableEXT(
    command_buffer: vk::CommandBuffer,
    attachment_count: u32,
    p_color_write_enables: *const vk::Bool32,
) {
    unimplemented!("vkCmdSetColorWriteEnableEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetEvent2.html>"]
extern "stdcall" fn vkCmdSetEvent2(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    p_dependency_info: *const vk::DependencyInfo,
) {
    unimplemented!("vkCmdSetEvent2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetEvent2.html>"]
extern "stdcall" fn vkCmdResetEvent2(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    stage_mask: vk::PipelineStageFlags2,
) {
    unimplemented!("vkCmdResetEvent2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWaitEvents2.html>"]
extern "stdcall" fn vkCmdWaitEvents2(
    command_buffer: vk::CommandBuffer,
    event_count: u32,
    p_events: *const vk::Event,
    p_dependency_infos: *const vk::DependencyInfo,
) {
    unimplemented!("vkCmdWaitEvents2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPipelineBarrier2.html>"]
extern "stdcall" fn vkCmdPipelineBarrier2(
    command_buffer: vk::CommandBuffer,
    p_dependency_info: *const vk::DependencyInfo,
) {
    unimplemented!("vkCmdPipelineBarrier2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit2.html>"]
extern "stdcall" fn vkQueueSubmit2(
    queue: vk::Queue,
    submit_count: u32,
    p_submits: *const vk::SubmitInfo2,
    fence: vk::Fence,
) -> vk::Result {
    unimplemented!("vkQueueSubmit2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteTimestamp2.html>"]
extern "stdcall" fn vkCmdWriteTimestamp2(
    command_buffer: vk::CommandBuffer,
    stage: vk::PipelineStageFlags2,
    query_pool: vk::QueryPool,
    query: u32,
) {
    unimplemented!("vkCmdWriteTimestamp2");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteBufferMarker2AMD.html>"]
extern "stdcall" fn vkCmdWriteBufferMarker2AMD(
    command_buffer: vk::CommandBuffer,
    stage: vk::PipelineStageFlags2,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    marker: u32,
) {
    unimplemented!("vkCmdWriteBufferMarker2AMD");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueueCheckpointData2NV.html>"]
extern "stdcall" fn vkGetQueueCheckpointData2NV(
    queue: vk::Queue,
    p_checkpoint_data_count: *mut u32,
    p_checkpoint_data: *mut vk::CheckpointData2NV,
) {
    unimplemented!("vkGetQueueCheckpointData2NV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToImageEXT.html>"]
extern "stdcall" fn vkCopyMemoryToImageEXT(
    device: vk::Device,
    p_copy_memory_to_image_info: *const vk::CopyMemoryToImageInfoEXT,
) -> vk::Result {
    unimplemented!("vkCopyMemoryToImageEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyImageToMemoryEXT.html>"]
extern "stdcall" fn vkCopyImageToMemoryEXT(
    device: vk::Device,
    p_copy_image_to_memory_info: *const vk::CopyImageToMemoryInfoEXT,
) -> vk::Result {
    unimplemented!("vkCopyImageToMemoryEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyImageToImageEXT.html>"]
extern "stdcall" fn vkCopyImageToImageEXT(
    device: vk::Device,
    p_copy_image_to_image_info: *const vk::CopyImageToImageInfoEXT,
) -> vk::Result {
    unimplemented!("vkCopyImageToImageEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkTransitionImageLayoutEXT.html>"]
extern "stdcall" fn vkTransitionImageLayoutEXT(
    device: vk::Device,
    transition_count: u32,
    p_transitions: *const vk::HostImageLayoutTransitionInfoEXT,
) -> vk::Result {
    unimplemented!("vkTransitionImageLayoutEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoCapabilitiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceVideoCapabilitiesKHR(
    physical_device: vk::PhysicalDevice,
    p_video_profile: *const vk::VideoProfileInfoKHR,
    p_capabilities: *mut vk::VideoCapabilitiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceVideoCapabilitiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoFormatPropertiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_video_format_info: *const vk::PhysicalDeviceVideoFormatInfoKHR,
    p_video_format_property_count: *mut u32,
    p_video_format_properties: *mut vk::VideoFormatPropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceVideoFormatPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_quality_level_info: *const vk::PhysicalDeviceVideoEncodeQualityLevelInfoKHR,
    p_quality_level_properties: *mut vk::VideoEncodeQualityLevelPropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateVideoSessionKHR.html>"]
extern "stdcall" fn vkCreateVideoSessionKHR(
    device: vk::Device,
    p_create_info: *const vk::VideoSessionCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_video_session: *mut vk::VideoSessionKHR,
) -> vk::Result {
    unimplemented!("vkCreateVideoSessionKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyVideoSessionKHR.html>"]
extern "stdcall" fn vkDestroyVideoSessionKHR(
    device: vk::Device,
    video_session: vk::VideoSessionKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyVideoSessionKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateVideoSessionParametersKHR.html>"]
extern "stdcall" fn vkCreateVideoSessionParametersKHR(
    device: vk::Device,
    p_create_info: *const vk::VideoSessionParametersCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_video_session_parameters: *mut vk::VideoSessionParametersKHR,
) -> vk::Result {
    unimplemented!("vkCreateVideoSessionParametersKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateVideoSessionParametersKHR.html>"]
extern "stdcall" fn vkUpdateVideoSessionParametersKHR(
    device: vk::Device,
    video_session_parameters: vk::VideoSessionParametersKHR,
    p_update_info: *const vk::VideoSessionParametersUpdateInfoKHR,
) -> vk::Result {
    unimplemented!("vkUpdateVideoSessionParametersKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetEncodedVideoSessionParametersKHR.html>"]
extern "stdcall" fn vkGetEncodedVideoSessionParametersKHR(
    device: vk::Device,
    p_video_session_parameters_info: *const vk::VideoEncodeSessionParametersGetInfoKHR,
    p_feedback_info: *mut vk::VideoEncodeSessionParametersFeedbackInfoKHR,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetEncodedVideoSessionParametersKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyVideoSessionParametersKHR.html>"]
extern "stdcall" fn vkDestroyVideoSessionParametersKHR(
    device: vk::Device,
    video_session_parameters: vk::VideoSessionParametersKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyVideoSessionParametersKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetVideoSessionMemoryRequirementsKHR.html>"]
extern "stdcall" fn vkGetVideoSessionMemoryRequirementsKHR(
    device: vk::Device,
    video_session: vk::VideoSessionKHR,
    p_memory_requirements_count: *mut u32,
    p_memory_requirements: *mut vk::VideoSessionMemoryRequirementsKHR,
) -> vk::Result {
    unimplemented!("vkGetVideoSessionMemoryRequirementsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindVideoSessionMemoryKHR.html>"]
extern "stdcall" fn vkBindVideoSessionMemoryKHR(
    device: vk::Device,
    video_session: vk::VideoSessionKHR,
    bind_session_memory_info_count: u32,
    p_bind_session_memory_infos: *const vk::BindVideoSessionMemoryInfoKHR,
) -> vk::Result {
    unimplemented!("vkBindVideoSessionMemoryKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecodeVideoKHR.html>"]
extern "stdcall" fn vkCmdDecodeVideoKHR(
    command_buffer: vk::CommandBuffer,
    p_decode_info: *const vk::VideoDecodeInfoKHR,
) {
    unimplemented!("vkCmdDecodeVideoKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginVideoCodingKHR.html>"]
extern "stdcall" fn vkCmdBeginVideoCodingKHR(
    command_buffer: vk::CommandBuffer,
    p_begin_info: *const vk::VideoBeginCodingInfoKHR,
) {
    unimplemented!("vkCmdBeginVideoCodingKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdControlVideoCodingKHR.html>"]
extern "stdcall" fn vkCmdControlVideoCodingKHR(
    command_buffer: vk::CommandBuffer,
    p_coding_control_info: *const vk::VideoCodingControlInfoKHR,
) {
    unimplemented!("vkCmdControlVideoCodingKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndVideoCodingKHR.html>"]
extern "stdcall" fn vkCmdEndVideoCodingKHR(
    command_buffer: vk::CommandBuffer,
    p_end_coding_info: *const vk::VideoEndCodingInfoKHR,
) {
    unimplemented!("vkCmdEndVideoCodingKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEncodeVideoKHR.html>"]
extern "stdcall" fn vkCmdEncodeVideoKHR(
    command_buffer: vk::CommandBuffer,
    p_encode_info: *const vk::VideoEncodeInfoKHR,
) {
    unimplemented!("vkCmdEncodeVideoKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecompressMemoryNV.html>"]
extern "stdcall" fn vkCmdDecompressMemoryNV(
    command_buffer: vk::CommandBuffer,
    decompress_region_count: u32,
    p_decompress_memory_regions: *const vk::DecompressMemoryRegionNV,
) {
    unimplemented!("vkCmdDecompressMemoryNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecompressMemoryIndirectCountNV.html>"]
extern "stdcall" fn vkCmdDecompressMemoryIndirectCountNV(
    command_buffer: vk::CommandBuffer,
    indirect_commands_address: vk::DeviceAddress,
    indirect_commands_count_address: vk::DeviceAddress,
    stride: u32,
) {
    unimplemented!("vkCmdDecompressMemoryIndirectCountNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCuModuleNVX.html>"]
extern "stdcall" fn vkCreateCuModuleNVX(
    device: vk::Device,
    p_create_info: *const vk::CuModuleCreateInfoNVX,
    p_allocator: *const vk::AllocationCallbacks,
    p_module: *mut vk::CuModuleNVX,
) -> vk::Result {
    unimplemented!("vkCreateCuModuleNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCuFunctionNVX.html>"]
extern "stdcall" fn vkCreateCuFunctionNVX(
    device: vk::Device,
    p_create_info: *const vk::CuFunctionCreateInfoNVX,
    p_allocator: *const vk::AllocationCallbacks,
    p_function: *mut vk::CuFunctionNVX,
) -> vk::Result {
    unimplemented!("vkCreateCuFunctionNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCuModuleNVX.html>"]
extern "stdcall" fn vkDestroyCuModuleNVX(
    device: vk::Device,
    module: vk::CuModuleNVX,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyCuModuleNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCuFunctionNVX.html>"]
extern "stdcall" fn vkDestroyCuFunctionNVX(
    device: vk::Device,
    function: vk::CuFunctionNVX,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyCuFunctionNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCuLaunchKernelNVX.html>"]
extern "stdcall" fn vkCmdCuLaunchKernelNVX(
    command_buffer: vk::CommandBuffer,
    p_launch_info: *const vk::CuLaunchInfoNVX,
) {
    unimplemented!("vkCmdCuLaunchKernelNVX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutSizeEXT.html>"]
extern "stdcall" fn vkGetDescriptorSetLayoutSizeEXT(
    device: vk::Device,
    layout: vk::DescriptorSetLayout,
    p_layout_size_in_bytes: *mut vk::DeviceSize,
) {
    unimplemented!("vkGetDescriptorSetLayoutSizeEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutBindingOffsetEXT.html>"]
extern "stdcall" fn vkGetDescriptorSetLayoutBindingOffsetEXT(
    device: vk::Device,
    layout: vk::DescriptorSetLayout,
    binding: u32,
    p_offset: *mut vk::DeviceSize,
) {
    unimplemented!("vkGetDescriptorSetLayoutBindingOffsetEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorEXT.html>"]
extern "stdcall" fn vkGetDescriptorEXT(
    device: vk::Device,
    p_descriptor_info: *const vk::DescriptorGetInfoEXT,
    data_size: isize,
    p_descriptor: *mut std::ffi::c_void,
) {
    unimplemented!("vkGetDescriptorEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBuffersEXT.html>"]
extern "stdcall" fn vkCmdBindDescriptorBuffersEXT(
    command_buffer: vk::CommandBuffer,
    buffer_count: u32,
    p_binding_infos: *const vk::DescriptorBufferBindingInfoEXT,
) {
    unimplemented!("vkCmdBindDescriptorBuffersEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDescriptorBufferOffsetsEXT.html>"]
extern "stdcall" fn vkCmdSetDescriptorBufferOffsetsEXT(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    first_set: u32,
    set_count: u32,
    p_buffer_indices: *const u32,
    p_offsets: *const vk::DeviceSize,
) {
    unimplemented!("vkCmdSetDescriptorBufferOffsetsEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBufferEmbeddedSamplersEXT.html>"]
extern "stdcall" fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    set: u32,
) {
    unimplemented!("vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferOpaqueCaptureDescriptorDataEXT.html>"]
extern "stdcall" fn vkGetBufferOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::BufferCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetBufferOpaqueCaptureDescriptorDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageOpaqueCaptureDescriptorDataEXT.html>"]
extern "stdcall" fn vkGetImageOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::ImageCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetImageOpaqueCaptureDescriptorDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewOpaqueCaptureDescriptorDataEXT.html>"]
extern "stdcall" fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::ImageViewCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetImageViewOpaqueCaptureDescriptorDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSamplerOpaqueCaptureDescriptorDataEXT.html>"]
extern "stdcall" fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::SamplerCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetSamplerOpaqueCaptureDescriptorDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.html>"]
extern "stdcall" fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::AccelerationStructureCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDeviceMemoryPriorityEXT.html>"]
extern "stdcall" fn vkSetDeviceMemoryPriorityEXT(
    device: vk::Device,
    memory: vk::DeviceMemory,
    priority: f32,
) {
    unimplemented!("vkSetDeviceMemoryPriorityEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireDrmDisplayEXT.html>"]
extern "stdcall" fn vkAcquireDrmDisplayEXT(
    physical_device: vk::PhysicalDevice,
    drm_fd: i32,
    display: vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkAcquireDrmDisplayEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDrmDisplayEXT.html>"]
extern "stdcall" fn vkGetDrmDisplayEXT(
    physical_device: vk::PhysicalDevice,
    drm_fd: i32,
    connector_id: u32,
    display: *mut vk::DisplayKHR,
) -> vk::Result {
    unimplemented!("vkGetDrmDisplayEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitForPresentKHR.html>"]
extern "stdcall" fn vkWaitForPresentKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    present_id: u64,
    timeout: u64,
) -> vk::Result {
    unimplemented!("vkWaitForPresentKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBufferCollectionFUCHSIA.html>"]
extern "stdcall" fn vkCreateBufferCollectionFUCHSIA(
    device: vk::Device,
    p_create_info: *const vk::BufferCollectionCreateInfoFUCHSIA,
    p_allocator: *const vk::AllocationCallbacks,
    p_collection: *mut vk::BufferCollectionFUCHSIA,
) -> vk::Result {
    unimplemented!("vkCreateBufferCollectionFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetBufferCollectionBufferConstraintsFUCHSIA.html>"]
extern "stdcall" fn vkSetBufferCollectionBufferConstraintsFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_buffer_constraints_info: *const vk::BufferConstraintsInfoFUCHSIA,
) -> vk::Result {
    unimplemented!("vkSetBufferCollectionBufferConstraintsFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetBufferCollectionImageConstraintsFUCHSIA.html>"]
extern "stdcall" fn vkSetBufferCollectionImageConstraintsFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_image_constraints_info: *const vk::ImageConstraintsInfoFUCHSIA,
) -> vk::Result {
    unimplemented!("vkSetBufferCollectionImageConstraintsFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBufferCollectionFUCHSIA.html>"]
extern "stdcall" fn vkDestroyBufferCollectionFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyBufferCollectionFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferCollectionPropertiesFUCHSIA.html>"]
extern "stdcall" fn vkGetBufferCollectionPropertiesFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_properties: *mut vk::BufferCollectionPropertiesFUCHSIA,
) -> vk::Result {
    unimplemented!("vkGetBufferCollectionPropertiesFUCHSIA");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCudaModuleNV.html>"]
extern "stdcall" fn vkCreateCudaModuleNV(
    device: vk::Device,
    p_create_info: *const vk::CudaModuleCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_module: *mut vk::CudaModuleNV,
) -> vk::Result {
    unimplemented!("vkCreateCudaModuleNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetCudaModuleCacheNV.html>"]
extern "stdcall" fn vkGetCudaModuleCacheNV(
    device: vk::Device,
    module: vk::CudaModuleNV,
    p_cache_size: *mut isize,
    p_cache_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetCudaModuleCacheNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCudaFunctionNV.html>"]
extern "stdcall" fn vkCreateCudaFunctionNV(
    device: vk::Device,
    p_create_info: *const vk::CudaFunctionCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_function: *mut vk::CudaFunctionNV,
) -> vk::Result {
    unimplemented!("vkCreateCudaFunctionNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCudaModuleNV.html>"]
extern "stdcall" fn vkDestroyCudaModuleNV(
    device: vk::Device,
    module: vk::CudaModuleNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyCudaModuleNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCudaFunctionNV.html>"]
extern "stdcall" fn vkDestroyCudaFunctionNV(
    device: vk::Device,
    function: vk::CudaFunctionNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyCudaFunctionNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCudaLaunchKernelNV.html>"]
extern "stdcall" fn vkCmdCudaLaunchKernelNV(
    command_buffer: vk::CommandBuffer,
    p_launch_info: *const vk::CudaLaunchInfoNV,
) {
    unimplemented!("vkCmdCudaLaunchKernelNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRendering.html>"]
extern "stdcall" fn vkCmdBeginRendering(
    command_buffer: vk::CommandBuffer,
    p_rendering_info: *const vk::RenderingInfo,
) {
    unimplemented!("vkCmdBeginRendering");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRendering.html>"]
extern "stdcall" fn vkCmdEndRendering(command_buffer: vk::CommandBuffer) {
    unimplemented!("vkCmdEndRendering");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutHostMappingInfoVALVE.html>"]
extern "stdcall" fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(
    device: vk::Device,
    p_binding_reference: *const vk::DescriptorSetBindingReferenceVALVE,
    p_host_mapping: *mut vk::DescriptorSetLayoutHostMappingInfoVALVE,
) {
    unimplemented!("vkGetDescriptorSetLayoutHostMappingInfoVALVE");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetHostMappingVALVE.html>"]
extern "stdcall" fn vkGetDescriptorSetHostMappingVALVE(
    device: vk::Device,
    descriptor_set: vk::DescriptorSet,
    pp_data: *mut *mut std::ffi::c_void,
) {
    unimplemented!("vkGetDescriptorSetHostMappingVALVE");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMicromapEXT.html>"]
extern "stdcall" fn vkCreateMicromapEXT(
    device: vk::Device,
    p_create_info: *const vk::MicromapCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_micromap: *mut vk::MicromapEXT,
) -> vk::Result {
    unimplemented!("vkCreateMicromapEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildMicromapsEXT.html>"]
extern "stdcall" fn vkCmdBuildMicromapsEXT(
    command_buffer: vk::CommandBuffer,
    info_count: u32,
    p_infos: *const vk::MicromapBuildInfoEXT,
) {
    unimplemented!("vkCmdBuildMicromapsEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBuildMicromapsEXT.html>"]
extern "stdcall" fn vkBuildMicromapsEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    info_count: u32,
    p_infos: *const vk::MicromapBuildInfoEXT,
) -> vk::Result {
    unimplemented!("vkBuildMicromapsEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyMicromapEXT.html>"]
extern "stdcall" fn vkDestroyMicromapEXT(
    device: vk::Device,
    micromap: vk::MicromapEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyMicromapEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMicromapEXT.html>"]
extern "stdcall" fn vkCmdCopyMicromapEXT(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMicromapInfoEXT,
) {
    unimplemented!("vkCmdCopyMicromapEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMicromapEXT.html>"]
extern "stdcall" fn vkCopyMicromapEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMicromapInfoEXT,
) -> vk::Result {
    unimplemented!("vkCopyMicromapEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMicromapToMemoryEXT.html>"]
extern "stdcall" fn vkCmdCopyMicromapToMemoryEXT(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMicromapToMemoryInfoEXT,
) {
    unimplemented!("vkCmdCopyMicromapToMemoryEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMicromapToMemoryEXT.html>"]
extern "stdcall" fn vkCopyMicromapToMemoryEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMicromapToMemoryInfoEXT,
) -> vk::Result {
    unimplemented!("vkCopyMicromapToMemoryEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToMicromapEXT.html>"]
extern "stdcall" fn vkCmdCopyMemoryToMicromapEXT(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMemoryToMicromapInfoEXT,
) {
    unimplemented!("vkCmdCopyMemoryToMicromapEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToMicromapEXT.html>"]
extern "stdcall" fn vkCopyMemoryToMicromapEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMemoryToMicromapInfoEXT,
) -> vk::Result {
    unimplemented!("vkCopyMemoryToMicromapEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteMicromapsPropertiesEXT.html>"]
extern "stdcall" fn vkCmdWriteMicromapsPropertiesEXT(
    command_buffer: vk::CommandBuffer,
    micromap_count: u32,
    p_micromaps: *const vk::MicromapEXT,
    query_type: vk::QueryType,
    query_pool: vk::QueryPool,
    first_query: u32,
) {
    unimplemented!("vkCmdWriteMicromapsPropertiesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWriteMicromapsPropertiesEXT.html>"]
extern "stdcall" fn vkWriteMicromapsPropertiesEXT(
    device: vk::Device,
    micromap_count: u32,
    p_micromaps: *const vk::MicromapEXT,
    query_type: vk::QueryType,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
    stride: isize,
) -> vk::Result {
    unimplemented!("vkWriteMicromapsPropertiesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMicromapCompatibilityEXT.html>"]
extern "stdcall" fn vkGetDeviceMicromapCompatibilityEXT(
    device: vk::Device,
    p_version_info: *const vk::MicromapVersionInfoEXT,
    p_compatibility: *mut vk::AccelerationStructureCompatibilityKHR,
) {
    unimplemented!("vkGetDeviceMicromapCompatibilityEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMicromapBuildSizesEXT.html>"]
extern "stdcall" fn vkGetMicromapBuildSizesEXT(
    device: vk::Device,
    build_type: vk::AccelerationStructureBuildTypeKHR,
    p_build_info: *const vk::MicromapBuildInfoEXT,
    p_size_info: *mut vk::MicromapBuildSizesInfoEXT,
) {
    unimplemented!("vkGetMicromapBuildSizesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderModuleIdentifierEXT.html>"]
extern "stdcall" fn vkGetShaderModuleIdentifierEXT(
    device: vk::Device,
    shader_module: vk::ShaderModule,
    p_identifier: *mut vk::ShaderModuleIdentifierEXT,
) {
    unimplemented!("vkGetShaderModuleIdentifierEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderModuleCreateInfoIdentifierEXT.html>"]
extern "stdcall" fn vkGetShaderModuleCreateInfoIdentifierEXT(
    device: vk::Device,
    p_create_info: *const vk::ShaderModuleCreateInfo,
    p_identifier: *mut vk::ShaderModuleIdentifierEXT,
) {
    unimplemented!("vkGetShaderModuleCreateInfoIdentifierEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSubresourceLayout2KHR.html>"]
extern "stdcall" fn vkGetImageSubresourceLayout2KHR(
    device: vk::Device,
    image: vk::Image,
    p_subresource: *const vk::ImageSubresource2KHR,
    p_layout: *mut vk::SubresourceLayout2KHR,
) {
    unimplemented!("vkGetImageSubresourceLayout2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelinePropertiesEXT.html>"]
extern "stdcall" fn vkGetPipelinePropertiesEXT(
    device: vk::Device,
    p_pipeline_info: *const vk::PipelineInfoEXT,
    p_pipeline_properties: *mut vk::BaseOutStructure,
) -> vk::Result {
    unimplemented!("vkGetPipelinePropertiesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkExportMetalObjectsEXT.html>"]
extern "stdcall" fn vkExportMetalObjectsEXT(
    device: vk::Device,
    p_metal_objects_info: *mut vk::ExportMetalObjectsInfoEXT,
) {
    unimplemented!("vkExportMetalObjectsEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFramebufferTilePropertiesQCOM.html>"]
extern "stdcall" fn vkGetFramebufferTilePropertiesQCOM(
    device: vk::Device,
    framebuffer: vk::Framebuffer,
    p_properties_count: *mut u32,
    p_properties: *mut vk::TilePropertiesQCOM,
) -> vk::Result {
    unimplemented!("vkGetFramebufferTilePropertiesQCOM");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDynamicRenderingTilePropertiesQCOM.html>"]
extern "stdcall" fn vkGetDynamicRenderingTilePropertiesQCOM(
    device: vk::Device,
    p_rendering_info: *const vk::RenderingInfo,
    p_properties: *mut vk::TilePropertiesQCOM,
) -> vk::Result {
    unimplemented!("vkGetDynamicRenderingTilePropertiesQCOM");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceOpticalFlowImageFormatsNV.html>"]
extern "stdcall" fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
    physical_device: vk::PhysicalDevice,
    p_optical_flow_image_format_info: *const vk::OpticalFlowImageFormatInfoNV,
    p_format_count: *mut u32,
    p_image_format_properties: *mut vk::OpticalFlowImageFormatPropertiesNV,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateOpticalFlowSessionNV.html>"]
extern "stdcall" fn vkCreateOpticalFlowSessionNV(
    device: vk::Device,
    p_create_info: *const vk::OpticalFlowSessionCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_session: *mut vk::OpticalFlowSessionNV,
) -> vk::Result {
    unimplemented!("vkCreateOpticalFlowSessionNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyOpticalFlowSessionNV.html>"]
extern "stdcall" fn vkDestroyOpticalFlowSessionNV(
    device: vk::Device,
    session: vk::OpticalFlowSessionNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyOpticalFlowSessionNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindOpticalFlowSessionImageNV.html>"]
extern "stdcall" fn vkBindOpticalFlowSessionImageNV(
    device: vk::Device,
    session: vk::OpticalFlowSessionNV,
    binding_point: vk::OpticalFlowSessionBindingPointNV,
    view: vk::ImageView,
    layout: vk::ImageLayout,
) -> vk::Result {
    unimplemented!("vkBindOpticalFlowSessionImageNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdOpticalFlowExecuteNV.html>"]
extern "stdcall" fn vkCmdOpticalFlowExecuteNV(
    command_buffer: vk::CommandBuffer,
    session: vk::OpticalFlowSessionNV,
    p_execute_info: *const vk::OpticalFlowExecuteInfoNV,
) {
    unimplemented!("vkCmdOpticalFlowExecuteNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceFaultInfoEXT.html>"]
extern "stdcall" fn vkGetDeviceFaultInfoEXT(
    device: vk::Device,
    p_fault_counts: *mut vk::DeviceFaultCountsEXT,
    p_fault_info: *mut vk::DeviceFaultInfoEXT,
) -> vk::Result {
    unimplemented!("vkGetDeviceFaultInfoEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBias2EXT.html>"]
extern "stdcall" fn vkCmdSetDepthBias2EXT(
    command_buffer: vk::CommandBuffer,
    p_depth_bias_info: *const vk::DepthBiasInfoEXT,
) {
    unimplemented!("vkCmdSetDepthBias2EXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseSwapchainImagesEXT.html>"]
extern "stdcall" fn vkReleaseSwapchainImagesEXT(
    device: vk::Device,
    p_release_info: *const vk::ReleaseSwapchainImagesInfoEXT,
) -> vk::Result {
    unimplemented!("vkReleaseSwapchainImagesEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageSubresourceLayoutKHR.html>"]
extern "stdcall" fn vkGetDeviceImageSubresourceLayoutKHR(
    device: vk::Device,
    p_info: *const vk::DeviceImageSubresourceInfoKHR,
    p_layout: *mut vk::SubresourceLayout2KHR,
) {
    unimplemented!("vkGetDeviceImageSubresourceLayoutKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMapMemory2KHR.html>"]
extern "stdcall" fn vkMapMemory2KHR(
    device: vk::Device,
    p_memory_map_info: *const vk::MemoryMapInfoKHR,
    pp_data: *mut *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkMapMemory2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUnmapMemory2KHR.html>"]
extern "stdcall" fn vkUnmapMemory2KHR(
    device: vk::Device,
    p_memory_unmap_info: *const vk::MemoryUnmapInfoKHR,
) -> vk::Result {
    unimplemented!("vkUnmapMemory2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateShadersEXT.html>"]
extern "stdcall" fn vkCreateShadersEXT(
    device: vk::Device,
    create_info_count: u32,
    p_create_infos: *const vk::ShaderCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_shaders: *mut vk::ShaderEXT,
) -> vk::Result {
    unimplemented!("vkCreateShadersEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyShaderEXT.html>"]
extern "stdcall" fn vkDestroyShaderEXT(
    device: vk::Device,
    shader: vk::ShaderEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    unimplemented!("vkDestroyShaderEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderBinaryDataEXT.html>"]
extern "stdcall" fn vkGetShaderBinaryDataEXT(
    device: vk::Device,
    shader: vk::ShaderEXT,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    unimplemented!("vkGetShaderBinaryDataEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindShadersEXT.html>"]
extern "stdcall" fn vkCmdBindShadersEXT(
    command_buffer: vk::CommandBuffer,
    stage_count: u32,
    p_stages: *const vk::ShaderStageFlags,
    p_shaders: *const vk::ShaderEXT,
) {
    unimplemented!("vkCmdBindShadersEXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetScreenBufferPropertiesQNX.html>"]
extern "stdcall" fn vkGetScreenBufferPropertiesQNX(
    device: vk::Device,
    buffer: *const vk::_screen_buffer,
    p_properties: *mut vk::ScreenBufferPropertiesQNX,
) -> vk::Result {
    unimplemented!("vkGetScreenBufferPropertiesQNX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.html>"]
extern "stdcall" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::CooperativeMatrixPropertiesKHR,
) -> vk::Result {
    unimplemented!("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetExecutionGraphPipelineScratchSizeAMDX.html>"]
extern "stdcall" fn vkGetExecutionGraphPipelineScratchSizeAMDX(
    device: vk::Device,
    execution_graph: vk::Pipeline,
    p_size_info: *mut vk::ExecutionGraphPipelineScratchSizeAMDX,
) -> vk::Result {
    unimplemented!("vkGetExecutionGraphPipelineScratchSizeAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetExecutionGraphPipelineNodeIndexAMDX.html>"]
extern "stdcall" fn vkGetExecutionGraphPipelineNodeIndexAMDX(
    device: vk::Device,
    execution_graph: vk::Pipeline,
    p_node_info: *const vk::PipelineShaderStageNodeCreateInfoAMDX,
    p_node_index: *mut u32,
) -> vk::Result {
    unimplemented!("vkGetExecutionGraphPipelineNodeIndexAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateExecutionGraphPipelinesAMDX.html>"]
extern "stdcall" fn vkCreateExecutionGraphPipelinesAMDX(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::ExecutionGraphPipelineCreateInfoAMDX,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    unimplemented!("vkCreateExecutionGraphPipelinesAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdInitializeGraphScratchMemoryAMDX.html>"]
extern "stdcall" fn vkCmdInitializeGraphScratchMemoryAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
) {
    unimplemented!("vkCmdInitializeGraphScratchMemoryAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphAMDX.html>"]
extern "stdcall" fn vkCmdDispatchGraphAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
    p_count_info: *const vk::DispatchGraphCountInfoAMDX,
) {
    unimplemented!("vkCmdDispatchGraphAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphIndirectAMDX.html>"]
extern "stdcall" fn vkCmdDispatchGraphIndirectAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
    p_count_info: *const vk::DispatchGraphCountInfoAMDX,
) {
    unimplemented!("vkCmdDispatchGraphIndirectAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphIndirectCountAMDX.html>"]
extern "stdcall" fn vkCmdDispatchGraphIndirectCountAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
    count_info: vk::DeviceAddress,
) {
    unimplemented!("vkCmdDispatchGraphIndirectCountAMDX");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorSets2KHR.html>"]
extern "stdcall" fn vkCmdBindDescriptorSets2KHR(
    command_buffer: vk::CommandBuffer,
    p_bind_descriptor_sets_info: *const vk::BindDescriptorSetsInfoKHR,
) {
    unimplemented!("vkCmdBindDescriptorSets2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants2KHR.html>"]
extern "stdcall" fn vkCmdPushConstants2KHR(
    command_buffer: vk::CommandBuffer,
    p_push_constants_info: *const vk::PushConstantsInfoKHR,
) {
    unimplemented!("vkCmdPushConstants2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSet2KHR.html>"]
extern "stdcall" fn vkCmdPushDescriptorSet2KHR(
    command_buffer: vk::CommandBuffer,
    p_push_descriptor_set_info: *const vk::PushDescriptorSetInfoKHR,
) {
    unimplemented!("vkCmdPushDescriptorSet2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetWithTemplate2KHR.html>"]
extern "stdcall" fn vkCmdPushDescriptorSetWithTemplate2KHR(
    command_buffer: vk::CommandBuffer,
    p_push_descriptor_set_with_template_info: *const vk::PushDescriptorSetWithTemplateInfoKHR,
) {
    unimplemented!("vkCmdPushDescriptorSetWithTemplate2KHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDescriptorBufferOffsets2EXT.html>"]
extern "stdcall" fn vkCmdSetDescriptorBufferOffsets2EXT(
    command_buffer: vk::CommandBuffer,
    p_set_descriptor_buffer_offsets_info: *const vk::SetDescriptorBufferOffsetsInfoEXT,
) {
    unimplemented!("vkCmdSetDescriptorBufferOffsets2EXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.html>"]
extern "stdcall" fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(
    command_buffer: vk::CommandBuffer,
    p_bind_descriptor_buffer_embedded_samplers_info: *const vk::BindDescriptorBufferEmbeddedSamplersInfoEXT,
) {
    unimplemented!("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLatencySleepModeNV.html>"]
extern "stdcall" fn vkSetLatencySleepModeNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_sleep_mode_info: *const vk::LatencySleepModeInfoNV,
) -> vk::Result {
    unimplemented!("vkSetLatencySleepModeNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkLatencySleepNV.html>"]
extern "stdcall" fn vkLatencySleepNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_sleep_info: *const vk::LatencySleepInfoNV,
) -> vk::Result {
    unimplemented!("vkLatencySleepNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLatencyMarkerNV.html>"]
extern "stdcall" fn vkSetLatencyMarkerNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_latency_marker_info: *const vk::SetLatencyMarkerInfoNV,
) {
    unimplemented!("vkSetLatencyMarkerNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetLatencyTimingsNV.html>"]
extern "stdcall" fn vkGetLatencyTimingsNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_latency_marker_info: *mut vk::GetLatencyMarkerInfoNV,
) {
    unimplemented!("vkGetLatencyTimingsNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueNotifyOutOfBandNV.html>"]
extern "stdcall" fn vkQueueNotifyOutOfBandNV(
    queue: vk::Queue,
    p_queue_type_info: *const vk::OutOfBandQueueTypeInfoNV,
) {
    unimplemented!("vkQueueNotifyOutOfBandNV");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRenderingAttachmentLocationsKHR.html>"]
extern "stdcall" fn vkCmdSetRenderingAttachmentLocationsKHR(
    command_buffer: vk::CommandBuffer,
    p_location_info: *const vk::RenderingAttachmentLocationInfoKHR,
) {
    unimplemented!("vkCmdSetRenderingAttachmentLocationsKHR");
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRenderingInputAttachmentIndicesKHR.html>"]
extern "stdcall" fn vkCmdSetRenderingInputAttachmentIndicesKHR(
    command_buffer: vk::CommandBuffer,
    p_location_info: *const vk::RenderingInputAttachmentIndexInfoKHR,
) {
    unimplemented!("vkCmdSetRenderingInputAttachmentIndicesKHR");
}
