//! THIS FILE IS GENERATED BY TOOL, DO NOT MODIFY.

use ash::vk;

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateInstance.html>"]
extern "C" fn vkCreateInstance(
    p_create_info: *const vk::InstanceCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_instance: *mut vk::Instance,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateInstance.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyInstance.html>"]
extern "C" fn vkDestroyInstance(
    instance: vk::Instance,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyInstance.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDevices.html>"]
extern "C" fn vkEnumeratePhysicalDevices(
    instance: vk::Instance,
    p_physical_device_count: *mut u32,
    p_physical_devices: *mut vk::PhysicalDevice,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumeratePhysicalDevices.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceProcAddr.html>"]
extern "C" fn vkGetDeviceProcAddr(
    device: vk::Device,
    p_name: *const char,
) -> vk::PFN_vkVoidFunction {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceProcAddr.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetInstanceProcAddr.html>"]
extern "C" fn vkGetInstanceProcAddr(
    instance: vk::Instance,
    p_name: *const char,
) -> vk::PFN_vkVoidFunction {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetInstanceProcAddr.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceProperties.html>"]
extern "C" fn vkGetPhysicalDeviceProperties(
    physical_device: vk::PhysicalDevice,
    p_properties: *mut vk::PhysicalDeviceProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html>"]
extern "C" fn vkGetPhysicalDeviceQueueFamilyProperties(
    physical_device: vk::PhysicalDevice,
    p_queue_family_property_count: *mut u32,
    p_queue_family_properties: *mut vk::QueueFamilyProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceQueueFamilyProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMemoryProperties.html>"]
extern "C" fn vkGetPhysicalDeviceMemoryProperties(
    physical_device: vk::PhysicalDevice,
    p_memory_properties: *mut vk::PhysicalDeviceMemoryProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceMemoryProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFeatures.html>"]
extern "C" fn vkGetPhysicalDeviceFeatures(
    physical_device: vk::PhysicalDevice,
    p_features: *mut vk::PhysicalDeviceFeatures,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceFeatures.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFormatProperties.html>"]
extern "C" fn vkGetPhysicalDeviceFormatProperties(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    p_format_properties: *mut vk::FormatProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceFormatProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties.html>"]
extern "C" fn vkGetPhysicalDeviceImageFormatProperties(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    r#type: vk::ImageType,
    tiling: vk::ImageTiling,
    usage: vk::ImageUsageFlags,
    flags: vk::ImageCreateFlags,
    p_image_format_properties: *mut vk::ImageFormatProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceImageFormatProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDevice.html>"]
extern "C" fn vkCreateDevice(
    physical_device: vk::PhysicalDevice,
    p_create_info: *const vk::DeviceCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_device: *mut vk::Device,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDevice.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDevice.html>"]
extern "C" fn vkDestroyDevice(
    device: vk::Device,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDevice.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceVersion.html>"]
extern "C" fn vkEnumerateInstanceVersion(
    p_api_version: *mut u32,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumerateInstanceVersion.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceLayerProperties.html>"]
extern "C" fn vkEnumerateInstanceLayerProperties(
    p_property_count: *mut u32,
    p_properties: *mut vk::LayerProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumerateInstanceLayerProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceExtensionProperties.html>"]
extern "C" fn vkEnumerateInstanceExtensionProperties(
    p_layer_name: *const char,
    p_property_count: *mut u32,
    p_properties: *mut vk::ExtensionProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumerateInstanceExtensionProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateDeviceLayerProperties.html>"]
extern "C" fn vkEnumerateDeviceLayerProperties(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::LayerProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumerateDeviceLayerProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateDeviceExtensionProperties.html>"]
extern "C" fn vkEnumerateDeviceExtensionProperties(
    physical_device: vk::PhysicalDevice,
    p_layer_name: *const char,
    p_property_count: *mut u32,
    p_properties: *mut vk::ExtensionProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumerateDeviceExtensionProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceQueue.html>"]
extern "C" fn vkGetDeviceQueue(
    device: vk::Device,
    queue_family_index: u32,
    queue_index: u32,
    p_queue: *mut vk::Queue,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceQueue.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit.html>"]
extern "C" fn vkQueueSubmit(
    queue: vk::Queue,
    submit_count: u32,
    p_submits: *const vk::SubmitInfo,
    fence: vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueSubmit.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueWaitIdle.html>"]
extern "C" fn vkQueueWaitIdle(
    queue: vk::Queue,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueWaitIdle.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDeviceWaitIdle.html>"]
extern "C" fn vkDeviceWaitIdle(
    device: vk::Device,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDeviceWaitIdle.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateMemory.html>"]
extern "C" fn vkAllocateMemory(
    device: vk::Device,
    p_allocate_info: *const vk::MemoryAllocateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_memory: *mut vk::DeviceMemory,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAllocateMemory.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeMemory.html>"]
extern "C" fn vkFreeMemory(
    device: vk::Device,
    memory: vk::DeviceMemory,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkFreeMemory.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMapMemory.html>"]
extern "C" fn vkMapMemory(
    device: vk::Device,
    memory: vk::DeviceMemory,
    offset: vk::DeviceSize,
    size: vk::DeviceSize,
    flags: vk::MemoryMapFlags,
    pp_data: *mut *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkMapMemory.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUnmapMemory.html>"]
extern "C" fn vkUnmapMemory(
    device: vk::Device,
    memory: vk::DeviceMemory,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkUnmapMemory.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFlushMappedMemoryRanges.html>"]
extern "C" fn vkFlushMappedMemoryRanges(
    device: vk::Device,
    memory_range_count: u32,
    p_memory_ranges: *const vk::MappedMemoryRange,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkFlushMappedMemoryRanges.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkInvalidateMappedMemoryRanges.html>"]
extern "C" fn vkInvalidateMappedMemoryRanges(
    device: vk::Device,
    memory_range_count: u32,
    p_memory_ranges: *const vk::MappedMemoryRange,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkInvalidateMappedMemoryRanges.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMemoryCommitment.html>"]
extern "C" fn vkGetDeviceMemoryCommitment(
    device: vk::Device,
    memory: vk::DeviceMemory,
    p_committed_memory_in_bytes: *mut vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceMemoryCommitment.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferMemoryRequirements.html>"]
extern "C" fn vkGetBufferMemoryRequirements(
    device: vk::Device,
    buffer: vk::Buffer,
    p_memory_requirements: *mut vk::MemoryRequirements,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetBufferMemoryRequirements.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindBufferMemory.html>"]
extern "C" fn vkBindBufferMemory(
    device: vk::Device,
    buffer: vk::Buffer,
    memory: vk::DeviceMemory,
    memory_offset: vk::DeviceSize,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindBufferMemory.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageMemoryRequirements.html>"]
extern "C" fn vkGetImageMemoryRequirements(
    device: vk::Device,
    image: vk::Image,
    p_memory_requirements: *mut vk::MemoryRequirements,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageMemoryRequirements.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindImageMemory.html>"]
extern "C" fn vkBindImageMemory(
    device: vk::Device,
    image: vk::Image,
    memory: vk::DeviceMemory,
    memory_offset: vk::DeviceSize,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindImageMemory.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSparseMemoryRequirements.html>"]
extern "C" fn vkGetImageSparseMemoryRequirements(
    device: vk::Device,
    image: vk::Image,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut vk::SparseImageMemoryRequirements,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageSparseMemoryRequirements.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html>"]
extern "C" fn vkGetPhysicalDeviceSparseImageFormatProperties(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    r#type: vk::ImageType,
    samples: vk::SampleCountFlags,
    usage: vk::ImageUsageFlags,
    tiling: vk::ImageTiling,
    p_property_count: *mut u32,
    p_properties: *mut vk::SparseImageFormatProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSparseImageFormatProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueBindSparse.html>"]
extern "C" fn vkQueueBindSparse(
    queue: vk::Queue,
    bind_info_count: u32,
    p_bind_info: *const vk::BindSparseInfo,
    fence: vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueBindSparse.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateFence.html>"]
extern "C" fn vkCreateFence(
    device: vk::Device,
    p_create_info: *const vk::FenceCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_fence: *mut vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateFence.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyFence.html>"]
extern "C" fn vkDestroyFence(
    device: vk::Device,
    fence: vk::Fence,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyFence.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetFences.html>"]
extern "C" fn vkResetFences(
    device: vk::Device,
    fence_count: u32,
    p_fences: *const vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkResetFences.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceStatus.html>"]
extern "C" fn vkGetFenceStatus(
    device: vk::Device,
    fence: vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetFenceStatus.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitForFences.html>"]
extern "C" fn vkWaitForFences(
    device: vk::Device,
    fence_count: u32,
    p_fences: *const vk::Fence,
    wait_all: vk::Bool32,
    timeout: u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkWaitForFences.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSemaphore.html>"]
extern "C" fn vkCreateSemaphore(
    device: vk::Device,
    p_create_info: *const vk::SemaphoreCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_semaphore: *mut vk::Semaphore,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateSemaphore.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySemaphore.html>"]
extern "C" fn vkDestroySemaphore(
    device: vk::Device,
    semaphore: vk::Semaphore,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroySemaphore.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateEvent.html>"]
extern "C" fn vkCreateEvent(
    device: vk::Device,
    p_create_info: *const vk::EventCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_event: *mut vk::Event,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateEvent.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyEvent.html>"]
extern "C" fn vkDestroyEvent(
    device: vk::Device,
    event: vk::Event,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyEvent.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetEventStatus.html>"]
extern "C" fn vkGetEventStatus(
    device: vk::Device,
    event: vk::Event,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetEventStatus.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetEvent.html>"]
extern "C" fn vkSetEvent(
    device: vk::Device,
    event: vk::Event,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetEvent.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetEvent.html>"]
extern "C" fn vkResetEvent(
    device: vk::Device,
    event: vk::Event,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkResetEvent.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateQueryPool.html>"]
extern "C" fn vkCreateQueryPool(
    device: vk::Device,
    p_create_info: *const vk::QueryPoolCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_query_pool: *mut vk::QueryPool,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateQueryPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyQueryPool.html>"]
extern "C" fn vkDestroyQueryPool(
    device: vk::Device,
    query_pool: vk::QueryPool,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyQueryPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueryPoolResults.html>"]
extern "C" fn vkGetQueryPoolResults(
    device: vk::Device,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
    stride: vk::DeviceSize,
    flags: vk::QueryResultFlags,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetQueryPoolResults.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetQueryPool.html>"]
extern "C" fn vkResetQueryPool(
    device: vk::Device,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkResetQueryPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBuffer.html>"]
extern "C" fn vkCreateBuffer(
    device: vk::Device,
    p_create_info: *const vk::BufferCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_buffer: *mut vk::Buffer,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBuffer.html>"]
extern "C" fn vkDestroyBuffer(
    device: vk::Device,
    buffer: vk::Buffer,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBufferView.html>"]
extern "C" fn vkCreateBufferView(
    device: vk::Device,
    p_create_info: *const vk::BufferViewCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_view: *mut vk::BufferView,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateBufferView.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBufferView.html>"]
extern "C" fn vkDestroyBufferView(
    device: vk::Device,
    buffer_view: vk::BufferView,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyBufferView.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImage.html>"]
extern "C" fn vkCreateImage(
    device: vk::Device,
    p_create_info: *const vk::ImageCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_image: *mut vk::Image,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyImage.html>"]
extern "C" fn vkDestroyImage(
    device: vk::Device,
    image: vk::Image,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSubresourceLayout.html>"]
extern "C" fn vkGetImageSubresourceLayout(
    device: vk::Device,
    image: vk::Image,
    p_subresource: *const vk::ImageSubresource,
    p_layout: *mut vk::SubresourceLayout,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageSubresourceLayout.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImageView.html>"]
extern "C" fn vkCreateImageView(
    device: vk::Device,
    p_create_info: *const vk::ImageViewCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_view: *mut vk::ImageView,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateImageView.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyImageView.html>"]
extern "C" fn vkDestroyImageView(
    device: vk::Device,
    image_view: vk::ImageView,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyImageView.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateShaderModule.html>"]
extern "C" fn vkCreateShaderModule(
    device: vk::Device,
    p_create_info: *const vk::ShaderModuleCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_shader_module: *mut vk::ShaderModule,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateShaderModule.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyShaderModule.html>"]
extern "C" fn vkDestroyShaderModule(
    device: vk::Device,
    shader_module: vk::ShaderModule,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyShaderModule.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePipelineCache.html>"]
extern "C" fn vkCreatePipelineCache(
    device: vk::Device,
    p_create_info: *const vk::PipelineCacheCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipeline_cache: *mut vk::PipelineCache,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreatePipelineCache.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipelineCache.html>"]
extern "C" fn vkDestroyPipelineCache(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyPipelineCache.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineCacheData.html>"]
extern "C" fn vkGetPipelineCacheData(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelineCacheData.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMergePipelineCaches.html>"]
extern "C" fn vkMergePipelineCaches(
    device: vk::Device,
    dst_cache: vk::PipelineCache,
    src_cache_count: u32,
    p_src_caches: *const vk::PipelineCache,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkMergePipelineCaches.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateGraphicsPipelines.html>"]
extern "C" fn vkCreateGraphicsPipelines(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::GraphicsPipelineCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateGraphicsPipelines.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateComputePipelines.html>"]
extern "C" fn vkCreateComputePipelines(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::ComputePipelineCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateComputePipelines.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.html>"]
extern "C" fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
    device: vk::Device,
    renderpass: vk::RenderPass,
    p_max_workgroup_size: *mut vk::Extent2D,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipeline.html>"]
extern "C" fn vkDestroyPipeline(
    device: vk::Device,
    pipeline: vk::Pipeline,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyPipeline.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePipelineLayout.html>"]
extern "C" fn vkCreatePipelineLayout(
    device: vk::Device,
    p_create_info: *const vk::PipelineLayoutCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipeline_layout: *mut vk::PipelineLayout,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreatePipelineLayout.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipelineLayout.html>"]
extern "C" fn vkDestroyPipelineLayout(
    device: vk::Device,
    pipeline_layout: vk::PipelineLayout,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyPipelineLayout.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSampler.html>"]
extern "C" fn vkCreateSampler(
    device: vk::Device,
    p_create_info: *const vk::SamplerCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_sampler: *mut vk::Sampler,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateSampler.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySampler.html>"]
extern "C" fn vkDestroySampler(
    device: vk::Device,
    sampler: vk::Sampler,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroySampler.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorSetLayout.html>"]
extern "C" fn vkCreateDescriptorSetLayout(
    device: vk::Device,
    p_create_info: *const vk::DescriptorSetLayoutCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_set_layout: *mut vk::DescriptorSetLayout,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDescriptorSetLayout.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorSetLayout.html>"]
extern "C" fn vkDestroyDescriptorSetLayout(
    device: vk::Device,
    descriptor_set_layout: vk::DescriptorSetLayout,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDescriptorSetLayout.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorPool.html>"]
extern "C" fn vkCreateDescriptorPool(
    device: vk::Device,
    p_create_info: *const vk::DescriptorPoolCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_descriptor_pool: *mut vk::DescriptorPool,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDescriptorPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorPool.html>"]
extern "C" fn vkDestroyDescriptorPool(
    device: vk::Device,
    descriptor_pool: vk::DescriptorPool,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDescriptorPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetDescriptorPool.html>"]
extern "C" fn vkResetDescriptorPool(
    device: vk::Device,
    descriptor_pool: vk::DescriptorPool,
    flags: vk::DescriptorPoolResetFlags,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkResetDescriptorPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateDescriptorSets.html>"]
extern "C" fn vkAllocateDescriptorSets(
    device: vk::Device,
    p_allocate_info: *const vk::DescriptorSetAllocateInfo,
    p_descriptor_sets: *mut vk::DescriptorSet,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAllocateDescriptorSets.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeDescriptorSets.html>"]
extern "C" fn vkFreeDescriptorSets(
    device: vk::Device,
    descriptor_pool: vk::DescriptorPool,
    descriptor_set_count: u32,
    p_descriptor_sets: *const vk::DescriptorSet,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkFreeDescriptorSets.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateDescriptorSets.html>"]
extern "C" fn vkUpdateDescriptorSets(
    device: vk::Device,
    descriptor_write_count: u32,
    p_descriptor_writes: *const vk::WriteDescriptorSet,
    descriptor_copy_count: u32,
    p_descriptor_copies: *const vk::CopyDescriptorSet,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkUpdateDescriptorSets.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateFramebuffer.html>"]
extern "C" fn vkCreateFramebuffer(
    device: vk::Device,
    p_create_info: *const vk::FramebufferCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_framebuffer: *mut vk::Framebuffer,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateFramebuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyFramebuffer.html>"]
extern "C" fn vkDestroyFramebuffer(
    device: vk::Device,
    framebuffer: vk::Framebuffer,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyFramebuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRenderPass.html>"]
extern "C" fn vkCreateRenderPass(
    device: vk::Device,
    p_create_info: *const vk::RenderPassCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_render_pass: *mut vk::RenderPass,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateRenderPass.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyRenderPass.html>"]
extern "C" fn vkDestroyRenderPass(
    device: vk::Device,
    render_pass: vk::RenderPass,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyRenderPass.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRenderAreaGranularity.html>"]
extern "C" fn vkGetRenderAreaGranularity(
    device: vk::Device,
    render_pass: vk::RenderPass,
    p_granularity: *mut vk::Extent2D,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRenderAreaGranularity.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRenderingAreaGranularityKHR.html>"]
extern "C" fn vkGetRenderingAreaGranularityKHR(
    device: vk::Device,
    p_rendering_area_info: *const vk::RenderingAreaInfoKHR,
    p_granularity: *mut vk::Extent2D,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRenderingAreaGranularityKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCommandPool.html>"]
extern "C" fn vkCreateCommandPool(
    device: vk::Device,
    p_create_info: *const vk::CommandPoolCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_command_pool: *mut vk::CommandPool,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateCommandPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCommandPool.html>"]
extern "C" fn vkDestroyCommandPool(
    device: vk::Device,
    command_pool: vk::CommandPool,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyCommandPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetCommandPool.html>"]
extern "C" fn vkResetCommandPool(
    device: vk::Device,
    command_pool: vk::CommandPool,
    flags: vk::CommandPoolResetFlags,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkResetCommandPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateCommandBuffers.html>"]
extern "C" fn vkAllocateCommandBuffers(
    device: vk::Device,
    p_allocate_info: *const vk::CommandBufferAllocateInfo,
    p_command_buffers: *mut vk::CommandBuffer,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAllocateCommandBuffers.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeCommandBuffers.html>"]
extern "C" fn vkFreeCommandBuffers(
    device: vk::Device,
    command_pool: vk::CommandPool,
    command_buffer_count: u32,
    p_command_buffers: *const vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkFreeCommandBuffers.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBeginCommandBuffer.html>"]
extern "C" fn vkBeginCommandBuffer(
    command_buffer: vk::CommandBuffer,
    p_begin_info: *const vk::CommandBufferBeginInfo,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBeginCommandBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEndCommandBuffer.html>"]
extern "C" fn vkEndCommandBuffer(
    command_buffer: vk::CommandBuffer,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEndCommandBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetCommandBuffer.html>"]
extern "C" fn vkResetCommandBuffer(
    command_buffer: vk::CommandBuffer,
    flags: vk::CommandBufferResetFlags,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkResetCommandBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipeline.html>"]
extern "C" fn vkCmdBindPipeline(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    pipeline: vk::Pipeline,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindPipeline.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAttachmentFeedbackLoopEnableEXT.html>"]
extern "C" fn vkCmdSetAttachmentFeedbackLoopEnableEXT(
    command_buffer: vk::CommandBuffer,
    aspect_mask: vk::ImageAspectFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetAttachmentFeedbackLoopEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewport.html>"]
extern "C" fn vkCmdSetViewport(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_viewports: *const vk::Viewport,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetViewport.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetScissor.html>"]
extern "C" fn vkCmdSetScissor(
    command_buffer: vk::CommandBuffer,
    first_scissor: u32,
    scissor_count: u32,
    p_scissors: *const vk::Rect2D,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetScissor.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineWidth.html>"]
extern "C" fn vkCmdSetLineWidth(
    command_buffer: vk::CommandBuffer,
    line_width: f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetLineWidth.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBias.html>"]
extern "C" fn vkCmdSetDepthBias(
    command_buffer: vk::CommandBuffer,
    depth_bias_constant_factor: f32,
    depth_bias_clamp: f32,
    depth_bias_slope_factor: f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthBias.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetBlendConstants.html>"]
extern "C" fn vkCmdSetBlendConstants(
    command_buffer: vk::CommandBuffer,
    blend_constants: f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetBlendConstants.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBounds.html>"]
extern "C" fn vkCmdSetDepthBounds(
    command_buffer: vk::CommandBuffer,
    min_depth_bounds: f32,
    max_depth_bounds: f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthBounds.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilCompareMask.html>"]
extern "C" fn vkCmdSetStencilCompareMask(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    compare_mask: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetStencilCompareMask.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilWriteMask.html>"]
extern "C" fn vkCmdSetStencilWriteMask(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    write_mask: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetStencilWriteMask.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilReference.html>"]
extern "C" fn vkCmdSetStencilReference(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    reference: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetStencilReference.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorSets.html>"]
extern "C" fn vkCmdBindDescriptorSets(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    first_set: u32,
    descriptor_set_count: u32,
    p_descriptor_sets: *const vk::DescriptorSet,
    dynamic_offset_count: u32,
    p_dynamic_offsets: *const u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindDescriptorSets.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindIndexBuffer.html>"]
extern "C" fn vkCmdBindIndexBuffer(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    index_type: vk::IndexType,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindIndexBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindVertexBuffers.html>"]
extern "C" fn vkCmdBindVertexBuffers(
    command_buffer: vk::CommandBuffer,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const vk::Buffer,
    p_offsets: *const vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindVertexBuffers.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDraw.html>"]
extern "C" fn vkCmdDraw(
    command_buffer: vk::CommandBuffer,
    vertex_count: u32,
    instance_count: u32,
    first_vertex: u32,
    first_instance: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDraw.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexed.html>"]
extern "C" fn vkCmdDrawIndexed(
    command_buffer: vk::CommandBuffer,
    index_count: u32,
    instance_count: u32,
    first_index: u32,
    vertex_offset: i32,
    first_instance: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawIndexed.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMultiEXT.html>"]
extern "C" fn vkCmdDrawMultiEXT(
    command_buffer: vk::CommandBuffer,
    draw_count: u32,
    p_vertex_info: *const vk::MultiDrawInfoEXT,
    instance_count: u32,
    first_instance: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMultiEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMultiIndexedEXT.html>"]
extern "C" fn vkCmdDrawMultiIndexedEXT(
    command_buffer: vk::CommandBuffer,
    draw_count: u32,
    p_index_info: *const vk::MultiDrawIndexedInfoEXT,
    instance_count: u32,
    first_instance: u32,
    stride: u32,
    p_vertex_offset: *const i32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMultiIndexedEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirect.html>"]
extern "C" fn vkCmdDrawIndirect(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawIndirect.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexedIndirect.html>"]
extern "C" fn vkCmdDrawIndexedIndirect(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawIndexedIndirect.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatch.html>"]
extern "C" fn vkCmdDispatch(
    command_buffer: vk::CommandBuffer,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDispatch.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchIndirect.html>"]
extern "C" fn vkCmdDispatchIndirect(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDispatchIndirect.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSubpassShadingHUAWEI.html>"]
extern "C" fn vkCmdSubpassShadingHUAWEI(
    command_buffer: vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSubpassShadingHUAWEI.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawClusterHUAWEI.html>"]
extern "C" fn vkCmdDrawClusterHUAWEI(
    command_buffer: vk::CommandBuffer,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawClusterHUAWEI.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawClusterIndirectHUAWEI.html>"]
extern "C" fn vkCmdDrawClusterIndirectHUAWEI(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawClusterIndirectHUAWEI.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdUpdatePipelineIndirectBufferNV.html>"]
extern "C" fn vkCmdUpdatePipelineIndirectBufferNV(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    pipeline: vk::Pipeline,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdUpdatePipelineIndirectBufferNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBuffer.html>"]
extern "C" fn vkCmdCopyBuffer(
    command_buffer: vk::CommandBuffer,
    src_buffer: vk::Buffer,
    dst_buffer: vk::Buffer,
    region_count: u32,
    p_regions: *const vk::BufferCopy,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImage.html>"]
extern "C" fn vkCmdCopyImage(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::ImageCopy,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBlitImage.html>"]
extern "C" fn vkCmdBlitImage(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::ImageBlit,
    filter: vk::Filter,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBlitImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBufferToImage.html>"]
extern "C" fn vkCmdCopyBufferToImage(
    command_buffer: vk::CommandBuffer,
    src_buffer: vk::Buffer,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::BufferImageCopy,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyBufferToImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImageToBuffer.html>"]
extern "C" fn vkCmdCopyImageToBuffer(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_buffer: vk::Buffer,
    region_count: u32,
    p_regions: *const vk::BufferImageCopy,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyImageToBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryIndirectNV.html>"]
extern "C" fn vkCmdCopyMemoryIndirectNV(
    command_buffer: vk::CommandBuffer,
    copy_buffer_address: vk::DeviceAddress,
    copy_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyMemoryIndirectNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToImageIndirectNV.html>"]
extern "C" fn vkCmdCopyMemoryToImageIndirectNV(
    command_buffer: vk::CommandBuffer,
    copy_buffer_address: vk::DeviceAddress,
    copy_count: u32,
    stride: u32,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    p_image_subresources: *const vk::ImageSubresourceLayers,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyMemoryToImageIndirectNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdUpdateBuffer.html>"]
extern "C" fn vkCmdUpdateBuffer(
    command_buffer: vk::CommandBuffer,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    data_size: vk::DeviceSize,
    p_data: *const std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdUpdateBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdFillBuffer.html>"]
extern "C" fn vkCmdFillBuffer(
    command_buffer: vk::CommandBuffer,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    size: vk::DeviceSize,
    data: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdFillBuffer.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearColorImage.html>"]
extern "C" fn vkCmdClearColorImage(
    command_buffer: vk::CommandBuffer,
    image: vk::Image,
    image_layout: vk::ImageLayout,
    p_color: *const vk::ClearColorValue,
    range_count: u32,
    p_ranges: *const vk::ImageSubresourceRange,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdClearColorImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearDepthStencilImage.html>"]
extern "C" fn vkCmdClearDepthStencilImage(
    command_buffer: vk::CommandBuffer,
    image: vk::Image,
    image_layout: vk::ImageLayout,
    p_depth_stencil: *const vk::ClearDepthStencilValue,
    range_count: u32,
    p_ranges: *const vk::ImageSubresourceRange,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdClearDepthStencilImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearAttachments.html>"]
extern "C" fn vkCmdClearAttachments(
    command_buffer: vk::CommandBuffer,
    attachment_count: u32,
    p_attachments: *const vk::ClearAttachment,
    rect_count: u32,
    p_rects: *const vk::ClearRect,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdClearAttachments.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResolveImage.html>"]
extern "C" fn vkCmdResolveImage(
    command_buffer: vk::CommandBuffer,
    src_image: vk::Image,
    src_image_layout: vk::ImageLayout,
    dst_image: vk::Image,
    dst_image_layout: vk::ImageLayout,
    region_count: u32,
    p_regions: *const vk::ImageResolve,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdResolveImage.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetEvent.html>"]
extern "C" fn vkCmdSetEvent(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    stage_mask: vk::PipelineStageFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetEvent.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetEvent.html>"]
extern "C" fn vkCmdResetEvent(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    stage_mask: vk::PipelineStageFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdResetEvent.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWaitEvents.html>"]
extern "C" fn vkCmdWaitEvents(
    command_buffer: vk::CommandBuffer,
    event_count: u32,
    p_events: *const vk::Event,
    src_stage_mask: vk::PipelineStageFlags,
    dst_stage_mask: vk::PipelineStageFlags,
    memory_barrier_count: u32,
    p_memory_barriers: *const vk::MemoryBarrier,
    buffer_memory_barrier_count: u32,
    p_buffer_memory_barriers: *const vk::BufferMemoryBarrier,
    image_memory_barrier_count: u32,
    p_image_memory_barriers: *const vk::ImageMemoryBarrier,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWaitEvents.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPipelineBarrier.html>"]
extern "C" fn vkCmdPipelineBarrier(
    command_buffer: vk::CommandBuffer,
    src_stage_mask: vk::PipelineStageFlags,
    dst_stage_mask: vk::PipelineStageFlags,
    dependency_flags: vk::DependencyFlags,
    memory_barrier_count: u32,
    p_memory_barriers: *const vk::MemoryBarrier,
    buffer_memory_barrier_count: u32,
    p_buffer_memory_barriers: *const vk::BufferMemoryBarrier,
    image_memory_barrier_count: u32,
    p_image_memory_barriers: *const vk::ImageMemoryBarrier,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPipelineBarrier.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginQuery.html>"]
extern "C" fn vkCmdBeginQuery(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
    flags: vk::QueryControlFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginQuery.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndQuery.html>"]
extern "C" fn vkCmdEndQuery(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndQuery.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginConditionalRenderingEXT.html>"]
extern "C" fn vkCmdBeginConditionalRenderingEXT(
    command_buffer: vk::CommandBuffer,
    p_conditional_rendering_begin: *const vk::ConditionalRenderingBeginInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginConditionalRenderingEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndConditionalRenderingEXT.html>"]
extern "C" fn vkCmdEndConditionalRenderingEXT(
    command_buffer: vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndConditionalRenderingEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetQueryPool.html>"]
extern "C" fn vkCmdResetQueryPool(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdResetQueryPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteTimestamp.html>"]
extern "C" fn vkCmdWriteTimestamp(
    command_buffer: vk::CommandBuffer,
    pipeline_stage: vk::PipelineStageFlags,
    query_pool: vk::QueryPool,
    query: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteTimestamp.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyQueryPoolResults.html>"]
extern "C" fn vkCmdCopyQueryPoolResults(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    first_query: u32,
    query_count: u32,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    stride: vk::DeviceSize,
    flags: vk::QueryResultFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyQueryPoolResults.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants.html>"]
extern "C" fn vkCmdPushConstants(
    command_buffer: vk::CommandBuffer,
    layout: vk::PipelineLayout,
    stage_flags: vk::ShaderStageFlags,
    offset: u32,
    size: u32,
    p_values: *const std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPushConstants.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass.html>"]
extern "C" fn vkCmdBeginRenderPass(
    command_buffer: vk::CommandBuffer,
    p_render_pass_begin: *const vk::RenderPassBeginInfo,
    contents: vk::SubpassContents,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginRenderPass.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdNextSubpass.html>"]
extern "C" fn vkCmdNextSubpass(
    command_buffer: vk::CommandBuffer,
    contents: vk::SubpassContents,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdNextSubpass.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderPass.html>"]
extern "C" fn vkCmdEndRenderPass(
    command_buffer: vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndRenderPass.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdExecuteCommands.html>"]
extern "C" fn vkCmdExecuteCommands(
    command_buffer: vk::CommandBuffer,
    command_buffer_count: u32,
    p_command_buffers: *const vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdExecuteCommands.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAndroidSurfaceKHR.html>"]
extern "C" fn vkCreateAndroidSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::AndroidSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateAndroidSurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPropertiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceDisplayPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayPropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceDisplayPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPlanePropertiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayPlanePropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceDisplayPlanePropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneSupportedDisplaysKHR.html>"]
extern "C" fn vkGetDisplayPlaneSupportedDisplaysKHR(
    physical_device: vk::PhysicalDevice,
    plane_index: u32,
    p_display_count: *mut u32,
    p_displays: *mut vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDisplayPlaneSupportedDisplaysKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayModePropertiesKHR.html>"]
extern "C" fn vkGetDisplayModePropertiesKHR(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayModePropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDisplayModePropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDisplayModeKHR.html>"]
extern "C" fn vkCreateDisplayModeKHR(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
    p_create_info: *const vk::DisplayModeCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_mode: *mut vk::DisplayModeKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDisplayModeKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneCapabilitiesKHR.html>"]
extern "C" fn vkGetDisplayPlaneCapabilitiesKHR(
    physical_device: vk::PhysicalDevice,
    mode: vk::DisplayModeKHR,
    plane_index: u32,
    p_capabilities: *mut vk::DisplayPlaneCapabilitiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDisplayPlaneCapabilitiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDisplayPlaneSurfaceKHR.html>"]
extern "C" fn vkCreateDisplayPlaneSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::DisplaySurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDisplayPlaneSurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSharedSwapchainsKHR.html>"]
extern "C" fn vkCreateSharedSwapchainsKHR(
    device: vk::Device,
    swapchain_count: u32,
    p_create_infos: *const vk::SwapchainCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_swapchains: *mut vk::SwapchainKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateSharedSwapchainsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySurfaceKHR.html>"]
extern "C" fn vkDestroySurfaceKHR(
    instance: vk::Instance,
    surface: vk::SurfaceKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroySurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html>"]
extern "C" fn vkGetPhysicalDeviceSurfaceSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    surface: vk::SurfaceKHR,
    p_supported: *mut vk::Bool32,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfaceSupportKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilitiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_surface_capabilities: *mut vk::SurfaceCapabilitiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfaceCapabilitiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceFormatsKHR.html>"]
extern "C" fn vkGetPhysicalDeviceSurfaceFormatsKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_surface_format_count: *mut u32,
    p_surface_formats: *mut vk::SurfaceFormatKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfaceFormatsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceSurfacePresentModesKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_present_mode_count: *mut u32,
    p_present_modes: *mut vk::PresentModeKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfacePresentModesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSwapchainKHR.html>"]
extern "C" fn vkCreateSwapchainKHR(
    device: vk::Device,
    p_create_info: *const vk::SwapchainCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_swapchain: *mut vk::SwapchainKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateSwapchainKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySwapchainKHR.html>"]
extern "C" fn vkDestroySwapchainKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroySwapchainKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainImagesKHR.html>"]
extern "C" fn vkGetSwapchainImagesKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_swapchain_image_count: *mut u32,
    p_swapchain_images: *mut vk::Image,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSwapchainImagesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireNextImageKHR.html>"]
extern "C" fn vkAcquireNextImageKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    timeout: u64,
    semaphore: vk::Semaphore,
    fence: vk::Fence,
    p_image_index: *mut u32,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireNextImageKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueuePresentKHR.html>"]
extern "C" fn vkQueuePresentKHR(
    queue: vk::Queue,
    p_present_info: *const vk::PresentInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueuePresentKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateViSurfaceNN.html>"]
extern "C" fn vkCreateViSurfaceNN(
    instance: vk::Instance,
    p_create_info: *const vk::ViSurfaceCreateInfoNN,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateViSurfaceNN.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateWaylandSurfaceKHR.html>"]
extern "C" fn vkCreateWaylandSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::WaylandSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateWaylandSurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceWaylandPresentationSupportKHR.html>"]
extern "C" fn vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    display: *mut vk::wl_display,
) -> vk::Bool32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceWaylandPresentationSupportKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateWin32SurfaceKHR.html>"]
extern "C" fn vkCreateWin32SurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::Win32SurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateWin32SurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceWin32PresentationSupportKHR.html>"]
extern "C" fn vkGetPhysicalDeviceWin32PresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
) -> vk::Bool32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceWin32PresentationSupportKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateXlibSurfaceKHR.html>"]
extern "C" fn vkCreateXlibSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::XlibSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateXlibSurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceXlibPresentationSupportKHR.html>"]
extern "C" fn vkGetPhysicalDeviceXlibPresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    dpy: *mut vk::Display,
    visual_i_d: vk::VisualID,
) -> vk::Bool32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceXlibPresentationSupportKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateXcbSurfaceKHR.html>"]
extern "C" fn vkCreateXcbSurfaceKHR(
    instance: vk::Instance,
    p_create_info: *const vk::XcbSurfaceCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateXcbSurfaceKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceXcbPresentationSupportKHR.html>"]
extern "C" fn vkGetPhysicalDeviceXcbPresentationSupportKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    connection: *mut vk::xcb_connection_t,
    visual_id: vk::xcb_visualid_t,
) -> vk::Bool32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceXcbPresentationSupportKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDirectFBSurfaceEXT.html>"]
extern "C" fn vkCreateDirectFBSurfaceEXT(
    instance: vk::Instance,
    p_create_info: *const vk::DirectFBSurfaceCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDirectFBSurfaceEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDirectFBPresentationSupportEXT.html>"]
extern "C" fn vkGetPhysicalDeviceDirectFBPresentationSupportEXT(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    dfb: *mut vk::IDirectFB,
) -> vk::Bool32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceDirectFBPresentationSupportEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImagePipeSurfaceFUCHSIA.html>"]
extern "C" fn vkCreateImagePipeSurfaceFUCHSIA(
    instance: vk::Instance,
    p_create_info: *const vk::ImagePipeSurfaceCreateInfoFUCHSIA,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateImagePipeSurfaceFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateStreamDescriptorSurfaceGGP.html>"]
extern "C" fn vkCreateStreamDescriptorSurfaceGGP(
    instance: vk::Instance,
    p_create_info: *const vk::StreamDescriptorSurfaceCreateInfoGGP,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateStreamDescriptorSurfaceGGP.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateScreenSurfaceQNX.html>"]
extern "C" fn vkCreateScreenSurfaceQNX(
    instance: vk::Instance,
    p_create_info: *const vk::ScreenSurfaceCreateInfoQNX,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateScreenSurfaceQNX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceScreenPresentationSupportQNX.html>"]
extern "C" fn vkGetPhysicalDeviceScreenPresentationSupportQNX(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    window: *mut vk::_screen_window,
) -> vk::Bool32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceScreenPresentationSupportQNX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDebugReportCallbackEXT.html>"]
extern "C" fn vkCreateDebugReportCallbackEXT(
    instance: vk::Instance,
    p_create_info: *const vk::DebugReportCallbackCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_callback: *mut vk::DebugReportCallbackEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDebugReportCallbackEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDebugReportCallbackEXT.html>"]
extern "C" fn vkDestroyDebugReportCallbackEXT(
    instance: vk::Instance,
    callback: vk::DebugReportCallbackEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDebugReportCallbackEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugReportMessageEXT.html>"]
extern "C" fn vkDebugReportMessageEXT(
    instance: vk::Instance,
    flags: vk::DebugReportFlagsEXT,
    object_type: vk::DebugReportObjectTypeEXT,
    object: u64,
    location: isize,
    message_code: i32,
    p_layer_prefix: *const char,
    p_message: *const char,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDebugReportMessageEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugMarkerSetObjectNameEXT.html>"]
extern "C" fn vkDebugMarkerSetObjectNameEXT(
    device: vk::Device,
    p_name_info: *const vk::DebugMarkerObjectNameInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDebugMarkerSetObjectNameEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugMarkerSetObjectTagEXT.html>"]
extern "C" fn vkDebugMarkerSetObjectTagEXT(
    device: vk::Device,
    p_tag_info: *const vk::DebugMarkerObjectTagInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDebugMarkerSetObjectTagEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerBeginEXT.html>"]
extern "C" fn vkCmdDebugMarkerBeginEXT(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::DebugMarkerMarkerInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDebugMarkerBeginEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerEndEXT.html>"]
extern "C" fn vkCmdDebugMarkerEndEXT(
    command_buffer: vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDebugMarkerEndEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerInsertEXT.html>"]
extern "C" fn vkCmdDebugMarkerInsertEXT(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::DebugMarkerMarkerInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDebugMarkerInsertEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalImageFormatPropertiesNV.html>"]
extern "C" fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    r#type: vk::ImageType,
    tiling: vk::ImageTiling,
    usage: vk::ImageUsageFlags,
    flags: vk::ImageCreateFlags,
    external_handle_type: vk::ExternalMemoryHandleTypeFlagsNV,
    p_external_image_format_properties: *mut vk::ExternalImageFormatPropertiesNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceExternalImageFormatPropertiesNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandleNV.html>"]
extern "C" fn vkGetMemoryWin32HandleNV(
    device: vk::Device,
    memory: vk::DeviceMemory,
    handle_type: vk::ExternalMemoryHandleTypeFlagsNV,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryWin32HandleNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdExecuteGeneratedCommandsNV.html>"]
extern "C" fn vkCmdExecuteGeneratedCommandsNV(
    command_buffer: vk::CommandBuffer,
    is_preprocessed: vk::Bool32,
    p_generated_commands_info: *const vk::GeneratedCommandsInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdExecuteGeneratedCommandsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPreprocessGeneratedCommandsNV.html>"]
extern "C" fn vkCmdPreprocessGeneratedCommandsNV(
    command_buffer: vk::CommandBuffer,
    p_generated_commands_info: *const vk::GeneratedCommandsInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPreprocessGeneratedCommandsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipelineShaderGroupNV.html>"]
extern "C" fn vkCmdBindPipelineShaderGroupNV(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    pipeline: vk::Pipeline,
    group_index: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindPipelineShaderGroupNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetGeneratedCommandsMemoryRequirementsNV.html>"]
extern "C" fn vkGetGeneratedCommandsMemoryRequirementsNV(
    device: vk::Device,
    p_info: *const vk::GeneratedCommandsMemoryRequirementsInfoNV,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetGeneratedCommandsMemoryRequirementsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateIndirectCommandsLayoutNV.html>"]
extern "C" fn vkCreateIndirectCommandsLayoutNV(
    device: vk::Device,
    p_create_info: *const vk::IndirectCommandsLayoutCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_indirect_commands_layout: *mut vk::IndirectCommandsLayoutNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateIndirectCommandsLayoutNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyIndirectCommandsLayoutNV.html>"]
extern "C" fn vkDestroyIndirectCommandsLayoutNV(
    device: vk::Device,
    indirect_commands_layout: vk::IndirectCommandsLayoutNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyIndirectCommandsLayoutNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFeatures2.html>"]
extern "C" fn vkGetPhysicalDeviceFeatures2(
    physical_device: vk::PhysicalDevice,
    p_features: *mut vk::PhysicalDeviceFeatures2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceFeatures2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceProperties2.html>"]
extern "C" fn vkGetPhysicalDeviceProperties2(
    physical_device: vk::PhysicalDevice,
    p_properties: *mut vk::PhysicalDeviceProperties2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceProperties2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFormatProperties2.html>"]
extern "C" fn vkGetPhysicalDeviceFormatProperties2(
    physical_device: vk::PhysicalDevice,
    format: vk::Format,
    p_format_properties: *mut vk::FormatProperties2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceFormatProperties2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties2.html>"]
extern "C" fn vkGetPhysicalDeviceImageFormatProperties2(
    physical_device: vk::PhysicalDevice,
    p_image_format_info: *const vk::PhysicalDeviceImageFormatInfo2,
    p_image_format_properties: *mut vk::ImageFormatProperties2,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceImageFormatProperties2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties2.html>"]
extern "C" fn vkGetPhysicalDeviceQueueFamilyProperties2(
    physical_device: vk::PhysicalDevice,
    p_queue_family_property_count: *mut u32,
    p_queue_family_properties: *mut vk::QueueFamilyProperties2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceQueueFamilyProperties2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMemoryProperties2.html>"]
extern "C" fn vkGetPhysicalDeviceMemoryProperties2(
    physical_device: vk::PhysicalDevice,
    p_memory_properties: *mut vk::PhysicalDeviceMemoryProperties2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceMemoryProperties2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties2.html>"]
extern "C" fn vkGetPhysicalDeviceSparseImageFormatProperties2(
    physical_device: vk::PhysicalDevice,
    p_format_info: *const vk::PhysicalDeviceSparseImageFormatInfo2,
    p_property_count: *mut u32,
    p_properties: *mut vk::SparseImageFormatProperties2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSparseImageFormatProperties2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetKHR.html>"]
extern "C" fn vkCmdPushDescriptorSetKHR(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    set: u32,
    descriptor_write_count: u32,
    p_descriptor_writes: *const vk::WriteDescriptorSet,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPushDescriptorSetKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkTrimCommandPool.html>"]
extern "C" fn vkTrimCommandPool(
    device: vk::Device,
    command_pool: vk::CommandPool,
    flags: vk::CommandPoolTrimFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkTrimCommandPool.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalBufferProperties.html>"]
extern "C" fn vkGetPhysicalDeviceExternalBufferProperties(
    physical_device: vk::PhysicalDevice,
    p_external_buffer_info: *const vk::PhysicalDeviceExternalBufferInfo,
    p_external_buffer_properties: *mut vk::ExternalBufferProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceExternalBufferProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandleKHR.html>"]
extern "C" fn vkGetMemoryWin32HandleKHR(
    device: vk::Device,
    p_get_win32_handle_info: *const vk::MemoryGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryWin32HandleKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandlePropertiesKHR.html>"]
extern "C" fn vkGetMemoryWin32HandlePropertiesKHR(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    handle: vk::HANDLE,
    p_memory_win32_handle_properties: *mut vk::MemoryWin32HandlePropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryWin32HandlePropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryFdKHR.html>"]
extern "C" fn vkGetMemoryFdKHR(
    device: vk::Device,
    p_get_fd_info: *const vk::MemoryGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryFdKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryFdPropertiesKHR.html>"]
extern "C" fn vkGetMemoryFdPropertiesKHR(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    fd: std::os::raw::c_int,
    p_memory_fd_properties: *mut vk::MemoryFdPropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryFdPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryZirconHandleFUCHSIA.html>"]
extern "C" fn vkGetMemoryZirconHandleFUCHSIA(
    device: vk::Device,
    p_get_zircon_handle_info: *const vk::MemoryGetZirconHandleInfoFUCHSIA,
    p_zircon_handle: *mut vk::zx_handle_t,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryZirconHandleFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryZirconHandlePropertiesFUCHSIA.html>"]
extern "C" fn vkGetMemoryZirconHandlePropertiesFUCHSIA(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    zircon_handle: vk::zx_handle_t,
    p_memory_zircon_handle_properties: *mut vk::MemoryZirconHandlePropertiesFUCHSIA,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryZirconHandlePropertiesFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryRemoteAddressNV.html>"]
extern "C" fn vkGetMemoryRemoteAddressNV(
    device: vk::Device,
    p_memory_get_remote_address_info: *const vk::MemoryGetRemoteAddressInfoNV,
    p_address: *mut vk::RemoteAddressNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryRemoteAddressNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalSemaphoreProperties.html>"]
extern "C" fn vkGetPhysicalDeviceExternalSemaphoreProperties(
    physical_device: vk::PhysicalDevice,
    p_external_semaphore_info: *const vk::PhysicalDeviceExternalSemaphoreInfo,
    p_external_semaphore_properties: *mut vk::ExternalSemaphoreProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceExternalSemaphoreProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreWin32HandleKHR.html>"]
extern "C" fn vkGetSemaphoreWin32HandleKHR(
    device: vk::Device,
    p_get_win32_handle_info: *const vk::SemaphoreGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSemaphoreWin32HandleKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreWin32HandleKHR.html>"]
extern "C" fn vkImportSemaphoreWin32HandleKHR(
    device: vk::Device,
    p_import_semaphore_win32_handle_info: *const vk::ImportSemaphoreWin32HandleInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkImportSemaphoreWin32HandleKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreFdKHR.html>"]
extern "C" fn vkGetSemaphoreFdKHR(
    device: vk::Device,
    p_get_fd_info: *const vk::SemaphoreGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSemaphoreFdKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreFdKHR.html>"]
extern "C" fn vkImportSemaphoreFdKHR(
    device: vk::Device,
    p_import_semaphore_fd_info: *const vk::ImportSemaphoreFdInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkImportSemaphoreFdKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreZirconHandleFUCHSIA.html>"]
extern "C" fn vkGetSemaphoreZirconHandleFUCHSIA(
    device: vk::Device,
    p_get_zircon_handle_info: *const vk::SemaphoreGetZirconHandleInfoFUCHSIA,
    p_zircon_handle: *mut vk::zx_handle_t,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSemaphoreZirconHandleFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreZirconHandleFUCHSIA.html>"]
extern "C" fn vkImportSemaphoreZirconHandleFUCHSIA(
    device: vk::Device,
    p_import_semaphore_zircon_handle_info: *const vk::ImportSemaphoreZirconHandleInfoFUCHSIA,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkImportSemaphoreZirconHandleFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalFenceProperties.html>"]
extern "C" fn vkGetPhysicalDeviceExternalFenceProperties(
    physical_device: vk::PhysicalDevice,
    p_external_fence_info: *const vk::PhysicalDeviceExternalFenceInfo,
    p_external_fence_properties: *mut vk::ExternalFenceProperties,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceExternalFenceProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceWin32HandleKHR.html>"]
extern "C" fn vkGetFenceWin32HandleKHR(
    device: vk::Device,
    p_get_win32_handle_info: *const vk::FenceGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetFenceWin32HandleKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportFenceWin32HandleKHR.html>"]
extern "C" fn vkImportFenceWin32HandleKHR(
    device: vk::Device,
    p_import_fence_win32_handle_info: *const vk::ImportFenceWin32HandleInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkImportFenceWin32HandleKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceFdKHR.html>"]
extern "C" fn vkGetFenceFdKHR(
    device: vk::Device,
    p_get_fd_info: *const vk::FenceGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetFenceFdKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportFenceFdKHR.html>"]
extern "C" fn vkImportFenceFdKHR(
    device: vk::Device,
    p_import_fence_fd_info: *const vk::ImportFenceFdInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkImportFenceFdKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseDisplayEXT.html>"]
extern "C" fn vkReleaseDisplayEXT(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkReleaseDisplayEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireXlibDisplayEXT.html>"]
extern "C" fn vkAcquireXlibDisplayEXT(
    physical_device: vk::PhysicalDevice,
    dpy: *mut vk::Display,
    display: vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireXlibDisplayEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRandROutputDisplayEXT.html>"]
extern "C" fn vkGetRandROutputDisplayEXT(
    physical_device: vk::PhysicalDevice,
    dpy: *mut vk::Display,
    rr_output: vk::RROutput,
    p_display: *mut vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRandROutputDisplayEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireWinrtDisplayNV.html>"]
extern "C" fn vkAcquireWinrtDisplayNV(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireWinrtDisplayNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetWinrtDisplayNV.html>"]
extern "C" fn vkGetWinrtDisplayNV(
    physical_device: vk::PhysicalDevice,
    device_relative_id: u32,
    p_display: *mut vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetWinrtDisplayNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDisplayPowerControlEXT.html>"]
extern "C" fn vkDisplayPowerControlEXT(
    device: vk::Device,
    display: vk::DisplayKHR,
    p_display_power_info: *const vk::DisplayPowerInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDisplayPowerControlEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkRegisterDeviceEventEXT.html>"]
extern "C" fn vkRegisterDeviceEventEXT(
    device: vk::Device,
    p_device_event_info: *const vk::DeviceEventInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_fence: *mut vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkRegisterDeviceEventEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkRegisterDisplayEventEXT.html>"]
extern "C" fn vkRegisterDisplayEventEXT(
    device: vk::Device,
    display: vk::DisplayKHR,
    p_display_event_info: *const vk::DisplayEventInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_fence: *mut vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkRegisterDisplayEventEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainCounterEXT.html>"]
extern "C" fn vkGetSwapchainCounterEXT(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    counter: vk::SurfaceCounterFlagsEXT,
    p_counter_value: *mut u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSwapchainCounterEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2EXT.html>"]
extern "C" fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_surface_capabilities: *mut vk::SurfaceCapabilities2EXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfaceCapabilities2EXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDeviceGroups.html>"]
extern "C" fn vkEnumeratePhysicalDeviceGroups(
    instance: vk::Instance,
    p_physical_device_group_count: *mut u32,
    p_physical_device_group_properties: *mut vk::PhysicalDeviceGroupProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumeratePhysicalDeviceGroups.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupPeerMemoryFeatures.html>"]
extern "C" fn vkGetDeviceGroupPeerMemoryFeatures(
    device: vk::Device,
    heap_index: u32,
    local_device_index: u32,
    remote_device_index: u32,
    p_peer_memory_features: *mut vk::PeerMemoryFeatureFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceGroupPeerMemoryFeatures.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindBufferMemory2.html>"]
extern "C" fn vkBindBufferMemory2(
    device: vk::Device,
    bind_info_count: u32,
    p_bind_infos: *const vk::BindBufferMemoryInfo,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindBufferMemory2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindImageMemory2.html>"]
extern "C" fn vkBindImageMemory2(
    device: vk::Device,
    bind_info_count: u32,
    p_bind_infos: *const vk::BindImageMemoryInfo,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindImageMemory2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDeviceMask.html>"]
extern "C" fn vkCmdSetDeviceMask(
    command_buffer: vk::CommandBuffer,
    device_mask: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDeviceMask.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupPresentCapabilitiesKHR.html>"]
extern "C" fn vkGetDeviceGroupPresentCapabilitiesKHR(
    device: vk::Device,
    p_device_group_present_capabilities: *mut vk::DeviceGroupPresentCapabilitiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceGroupPresentCapabilitiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupSurfacePresentModesKHR.html>"]
extern "C" fn vkGetDeviceGroupSurfacePresentModesKHR(
    device: vk::Device,
    surface: vk::SurfaceKHR,
    p_modes: *mut vk::DeviceGroupPresentModeFlagsKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceGroupSurfacePresentModesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireNextImage2KHR.html>"]
extern "C" fn vkAcquireNextImage2KHR(
    device: vk::Device,
    p_acquire_info: *const vk::AcquireNextImageInfoKHR,
    p_image_index: *mut u32,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireNextImage2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchBase.html>"]
extern "C" fn vkCmdDispatchBase(
    command_buffer: vk::CommandBuffer,
    base_group_x: u32,
    base_group_y: u32,
    base_group_z: u32,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDispatchBase.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDevicePresentRectanglesKHR.html>"]
extern "C" fn vkGetPhysicalDevicePresentRectanglesKHR(
    physical_device: vk::PhysicalDevice,
    surface: vk::SurfaceKHR,
    p_rect_count: *mut u32,
    p_rects: *mut vk::Rect2D,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDevicePresentRectanglesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorUpdateTemplate.html>"]
extern "C" fn vkCreateDescriptorUpdateTemplate(
    device: vk::Device,
    p_create_info: *const vk::DescriptorUpdateTemplateCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_descriptor_update_template: *mut vk::DescriptorUpdateTemplate,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDescriptorUpdateTemplate.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorUpdateTemplate.html>"]
extern "C" fn vkDestroyDescriptorUpdateTemplate(
    device: vk::Device,
    descriptor_update_template: vk::DescriptorUpdateTemplate,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDescriptorUpdateTemplate.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateDescriptorSetWithTemplate.html>"]
extern "C" fn vkUpdateDescriptorSetWithTemplate(
    device: vk::Device,
    descriptor_set: vk::DescriptorSet,
    descriptor_update_template: vk::DescriptorUpdateTemplate,
    p_data: *const std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkUpdateDescriptorSetWithTemplate.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetWithTemplateKHR.html>"]
extern "C" fn vkCmdPushDescriptorSetWithTemplateKHR(
    command_buffer: vk::CommandBuffer,
    descriptor_update_template: vk::DescriptorUpdateTemplate,
    layout: vk::PipelineLayout,
    set: u32,
    p_data: *const std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPushDescriptorSetWithTemplateKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetHdrMetadataEXT.html>"]
extern "C" fn vkSetHdrMetadataEXT(
    device: vk::Device,
    swapchain_count: u32,
    p_swapchains: *const vk::SwapchainKHR,
    p_metadata: *const vk::HdrMetadataEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetHdrMetadataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainStatusKHR.html>"]
extern "C" fn vkGetSwapchainStatusKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSwapchainStatusKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRefreshCycleDurationGOOGLE.html>"]
extern "C" fn vkGetRefreshCycleDurationGOOGLE(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_display_timing_properties: *mut vk::RefreshCycleDurationGOOGLE,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRefreshCycleDurationGOOGLE.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPastPresentationTimingGOOGLE.html>"]
extern "C" fn vkGetPastPresentationTimingGOOGLE(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_presentation_timing_count: *mut u32,
    p_presentation_timings: *mut vk::PastPresentationTimingGOOGLE,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPastPresentationTimingGOOGLE.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateIOSSurfaceMVK.html>"]
extern "C" fn vkCreateIOSSurfaceMVK(
    instance: vk::Instance,
    p_create_info: *const vk::IOSSurfaceCreateInfoMVK,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateIOSSurfaceMVK.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMacOSSurfaceMVK.html>"]
extern "C" fn vkCreateMacOSSurfaceMVK(
    instance: vk::Instance,
    p_create_info: *const vk::MacOSSurfaceCreateInfoMVK,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateMacOSSurfaceMVK.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMetalSurfaceEXT.html>"]
extern "C" fn vkCreateMetalSurfaceEXT(
    instance: vk::Instance,
    p_create_info: *const vk::MetalSurfaceCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateMetalSurfaceEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWScalingNV.html>"]
extern "C" fn vkCmdSetViewportWScalingNV(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_viewport_w_scalings: *const vk::ViewportWScalingNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetViewportWScalingNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleEXT.html>"]
extern "C" fn vkCmdSetDiscardRectangleEXT(
    command_buffer: vk::CommandBuffer,
    first_discard_rectangle: u32,
    discard_rectangle_count: u32,
    p_discard_rectangles: *const vk::Rect2D,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDiscardRectangleEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleEnableEXT.html>"]
extern "C" fn vkCmdSetDiscardRectangleEnableEXT(
    command_buffer: vk::CommandBuffer,
    discard_rectangle_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDiscardRectangleEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleModeEXT.html>"]
extern "C" fn vkCmdSetDiscardRectangleModeEXT(
    command_buffer: vk::CommandBuffer,
    discard_rectangle_mode: vk::DiscardRectangleModeEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDiscardRectangleModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleLocationsEXT.html>"]
extern "C" fn vkCmdSetSampleLocationsEXT(
    command_buffer: vk::CommandBuffer,
    p_sample_locations_info: *const vk::SampleLocationsInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetSampleLocationsEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMultisamplePropertiesEXT.html>"]
extern "C" fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
    physical_device: vk::PhysicalDevice,
    samples: vk::SampleCountFlags,
    p_multisample_properties: *mut vk::MultisamplePropertiesEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceMultisamplePropertiesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2KHR.html>"]
extern "C" fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    physical_device: vk::PhysicalDevice,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_surface_capabilities: *mut vk::SurfaceCapabilities2KHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfaceCapabilities2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceFormats2KHR.html>"]
extern "C" fn vkGetPhysicalDeviceSurfaceFormats2KHR(
    physical_device: vk::PhysicalDevice,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_surface_format_count: *mut u32,
    p_surface_formats: *mut vk::SurfaceFormat2KHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfaceFormats2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayProperties2KHR.html>"]
extern "C" fn vkGetPhysicalDeviceDisplayProperties2KHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayProperties2KHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceDisplayProperties2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPlaneProperties2KHR.html>"]
extern "C" fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayPlaneProperties2KHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceDisplayPlaneProperties2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayModeProperties2KHR.html>"]
extern "C" fn vkGetDisplayModeProperties2KHR(
    physical_device: vk::PhysicalDevice,
    display: vk::DisplayKHR,
    p_property_count: *mut u32,
    p_properties: *mut vk::DisplayModeProperties2KHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDisplayModeProperties2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneCapabilities2KHR.html>"]
extern "C" fn vkGetDisplayPlaneCapabilities2KHR(
    physical_device: vk::PhysicalDevice,
    p_display_plane_info: *const vk::DisplayPlaneInfo2KHR,
    p_capabilities: *mut vk::DisplayPlaneCapabilities2KHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDisplayPlaneCapabilities2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferMemoryRequirements2.html>"]
extern "C" fn vkGetBufferMemoryRequirements2(
    device: vk::Device,
    p_info: *const vk::BufferMemoryRequirementsInfo2,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetBufferMemoryRequirements2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageMemoryRequirements2.html>"]
extern "C" fn vkGetImageMemoryRequirements2(
    device: vk::Device,
    p_info: *const vk::ImageMemoryRequirementsInfo2,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageMemoryRequirements2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSparseMemoryRequirements2.html>"]
extern "C" fn vkGetImageSparseMemoryRequirements2(
    device: vk::Device,
    p_info: *const vk::ImageSparseMemoryRequirementsInfo2,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut vk::SparseImageMemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageSparseMemoryRequirements2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceBufferMemoryRequirements.html>"]
extern "C" fn vkGetDeviceBufferMemoryRequirements(
    device: vk::Device,
    p_info: *const vk::DeviceBufferMemoryRequirements,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceBufferMemoryRequirements.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageMemoryRequirements.html>"]
extern "C" fn vkGetDeviceImageMemoryRequirements(
    device: vk::Device,
    p_info: *const vk::DeviceImageMemoryRequirements,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceImageMemoryRequirements.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageSparseMemoryRequirements.html>"]
extern "C" fn vkGetDeviceImageSparseMemoryRequirements(
    device: vk::Device,
    p_info: *const vk::DeviceImageMemoryRequirements,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut vk::SparseImageMemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceImageSparseMemoryRequirements.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSamplerYcbcrConversion.html>"]
extern "C" fn vkCreateSamplerYcbcrConversion(
    device: vk::Device,
    p_create_info: *const vk::SamplerYcbcrConversionCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_ycbcr_conversion: *mut vk::SamplerYcbcrConversion,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateSamplerYcbcrConversion.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySamplerYcbcrConversion.html>"]
extern "C" fn vkDestroySamplerYcbcrConversion(
    device: vk::Device,
    ycbcr_conversion: vk::SamplerYcbcrConversion,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroySamplerYcbcrConversion.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceQueue2.html>"]
extern "C" fn vkGetDeviceQueue2(
    device: vk::Device,
    p_queue_info: *const vk::DeviceQueueInfo2,
    p_queue: *mut vk::Queue,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceQueue2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateValidationCacheEXT.html>"]
extern "C" fn vkCreateValidationCacheEXT(
    device: vk::Device,
    p_create_info: *const vk::ValidationCacheCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_validation_cache: *mut vk::ValidationCacheEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateValidationCacheEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyValidationCacheEXT.html>"]
extern "C" fn vkDestroyValidationCacheEXT(
    device: vk::Device,
    validation_cache: vk::ValidationCacheEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyValidationCacheEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetValidationCacheDataEXT.html>"]
extern "C" fn vkGetValidationCacheDataEXT(
    device: vk::Device,
    validation_cache: vk::ValidationCacheEXT,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetValidationCacheDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMergeValidationCachesEXT.html>"]
extern "C" fn vkMergeValidationCachesEXT(
    device: vk::Device,
    dst_cache: vk::ValidationCacheEXT,
    src_cache_count: u32,
    p_src_caches: *const vk::ValidationCacheEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkMergeValidationCachesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutSupport.html>"]
extern "C" fn vkGetDescriptorSetLayoutSupport(
    device: vk::Device,
    p_create_info: *const vk::DescriptorSetLayoutCreateInfo,
    p_support: *mut vk::DescriptorSetLayoutSupport,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDescriptorSetLayoutSupport.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainGrallocUsageANDROID.html>"]
extern "C" fn vkGetSwapchainGrallocUsageANDROID(
    device: vk::Device,
    format: vk::Format,
    image_usage: vk::ImageUsageFlags,
    gralloc_usage: *mut std::os::raw::c_int,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSwapchainGrallocUsageANDROID.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainGrallocUsage2ANDROID.html>"]
extern "C" fn vkGetSwapchainGrallocUsage2ANDROID(
    device: vk::Device,
    format: vk::Format,
    image_usage: vk::ImageUsageFlags,
    swapchain_image_usage: vk::SwapchainImageUsageFlagsANDROID,
    gralloc_consumer_usage: *mut u64,
    gralloc_producer_usage: *mut u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSwapchainGrallocUsage2ANDROID.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireImageANDROID.html>"]
extern "C" fn vkAcquireImageANDROID(
    device: vk::Device,
    image: vk::Image,
    native_fence_fd: std::os::raw::c_int,
    semaphore: vk::Semaphore,
    fence: vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireImageANDROID.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSignalReleaseImageANDROID.html>"]
extern "C" fn vkQueueSignalReleaseImageANDROID(
    queue: vk::Queue,
    wait_semaphore_count: u32,
    p_wait_semaphores: *const vk::Semaphore,
    image: vk::Image,
    p_native_fence_fd: *mut std::os::raw::c_int,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueSignalReleaseImageANDROID.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderInfoAMD.html>"]
extern "C" fn vkGetShaderInfoAMD(
    device: vk::Device,
    pipeline: vk::Pipeline,
    shader_stage: vk::ShaderStageFlags,
    info_type: vk::ShaderInfoTypeAMD,
    p_info_size: *mut isize,
    p_info: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetShaderInfoAMD.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLocalDimmingAMD.html>"]
extern "C" fn vkSetLocalDimmingAMD(
    device: vk::Device,
    swap_chain: vk::SwapchainKHR,
    local_dimming_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetLocalDimmingAMD.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.html>"]
extern "C" fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(
    physical_device: vk::PhysicalDevice,
    p_time_domain_count: *mut u32,
    p_time_domains: *mut vk::TimeDomainKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetCalibratedTimestampsKHR.html>"]
extern "C" fn vkGetCalibratedTimestampsKHR(
    device: vk::Device,
    timestamp_count: u32,
    p_timestamp_infos: *const vk::CalibratedTimestampInfoKHR,
    p_timestamps: *mut u64,
    p_max_deviation: *mut u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetCalibratedTimestampsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDebugUtilsObjectNameEXT.html>"]
extern "C" fn vkSetDebugUtilsObjectNameEXT(
    device: vk::Device,
    p_name_info: *const vk::DebugUtilsObjectNameInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetDebugUtilsObjectNameEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDebugUtilsObjectTagEXT.html>"]
extern "C" fn vkSetDebugUtilsObjectTagEXT(
    device: vk::Device,
    p_tag_info: *const vk::DebugUtilsObjectTagInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetDebugUtilsObjectTagEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueBeginDebugUtilsLabelEXT.html>"]
extern "C" fn vkQueueBeginDebugUtilsLabelEXT(
    queue: vk::Queue,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueBeginDebugUtilsLabelEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueEndDebugUtilsLabelEXT.html>"]
extern "C" fn vkQueueEndDebugUtilsLabelEXT(
    queue: vk::Queue,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueEndDebugUtilsLabelEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueInsertDebugUtilsLabelEXT.html>"]
extern "C" fn vkQueueInsertDebugUtilsLabelEXT(
    queue: vk::Queue,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueInsertDebugUtilsLabelEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginDebugUtilsLabelEXT.html>"]
extern "C" fn vkCmdBeginDebugUtilsLabelEXT(
    command_buffer: vk::CommandBuffer,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginDebugUtilsLabelEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndDebugUtilsLabelEXT.html>"]
extern "C" fn vkCmdEndDebugUtilsLabelEXT(
    command_buffer: vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndDebugUtilsLabelEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdInsertDebugUtilsLabelEXT.html>"]
extern "C" fn vkCmdInsertDebugUtilsLabelEXT(
    command_buffer: vk::CommandBuffer,
    p_label_info: *const vk::DebugUtilsLabelEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdInsertDebugUtilsLabelEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDebugUtilsMessengerEXT.html>"]
extern "C" fn vkCreateDebugUtilsMessengerEXT(
    instance: vk::Instance,
    p_create_info: *const vk::DebugUtilsMessengerCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_messenger: *mut vk::DebugUtilsMessengerEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDebugUtilsMessengerEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDebugUtilsMessengerEXT.html>"]
extern "C" fn vkDestroyDebugUtilsMessengerEXT(
    instance: vk::Instance,
    messenger: vk::DebugUtilsMessengerEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDebugUtilsMessengerEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSubmitDebugUtilsMessageEXT.html>"]
extern "C" fn vkSubmitDebugUtilsMessageEXT(
    instance: vk::Instance,
    message_severity: vk::DebugUtilsMessageSeverityFlagsEXT,
    message_types: vk::DebugUtilsMessageTypeFlagsEXT,
    p_callback_data: *const vk::DebugUtilsMessengerCallbackDataEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSubmitDebugUtilsMessageEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryHostPointerPropertiesEXT.html>"]
extern "C" fn vkGetMemoryHostPointerPropertiesEXT(
    device: vk::Device,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    p_host_pointer: *const std::ffi::c_void,
    p_memory_host_pointer_properties: *mut vk::MemoryHostPointerPropertiesEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryHostPointerPropertiesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteBufferMarkerAMD.html>"]
extern "C" fn vkCmdWriteBufferMarkerAMD(
    command_buffer: vk::CommandBuffer,
    pipeline_stage: vk::PipelineStageFlags,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    marker: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteBufferMarkerAMD.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRenderPass2.html>"]
extern "C" fn vkCreateRenderPass2(
    device: vk::Device,
    p_create_info: *const vk::RenderPassCreateInfo2,
    p_allocator: *const vk::AllocationCallbacks,
    p_render_pass: *mut vk::RenderPass,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateRenderPass2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass2.html>"]
extern "C" fn vkCmdBeginRenderPass2(
    command_buffer: vk::CommandBuffer,
    p_render_pass_begin: *const vk::RenderPassBeginInfo,
    p_subpass_begin_info: *const vk::SubpassBeginInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginRenderPass2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdNextSubpass2.html>"]
extern "C" fn vkCmdNextSubpass2(
    command_buffer: vk::CommandBuffer,
    p_subpass_begin_info: *const vk::SubpassBeginInfo,
    p_subpass_end_info: *const vk::SubpassEndInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdNextSubpass2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderPass2.html>"]
extern "C" fn vkCmdEndRenderPass2(
    command_buffer: vk::CommandBuffer,
    p_subpass_end_info: *const vk::SubpassEndInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndRenderPass2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreCounterValue.html>"]
extern "C" fn vkGetSemaphoreCounterValue(
    device: vk::Device,
    semaphore: vk::Semaphore,
    p_value: *mut u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSemaphoreCounterValue.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitSemaphores.html>"]
extern "C" fn vkWaitSemaphores(
    device: vk::Device,
    p_wait_info: *const vk::SemaphoreWaitInfo,
    timeout: u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkWaitSemaphores.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSignalSemaphore.html>"]
extern "C" fn vkSignalSemaphore(
    device: vk::Device,
    p_signal_info: *const vk::SemaphoreSignalInfo,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSignalSemaphore.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAndroidHardwareBufferPropertiesANDROID.html>"]
extern "C" fn vkGetAndroidHardwareBufferPropertiesANDROID(
    device: vk::Device,
    buffer: *const vk::AHardwareBuffer,
    p_properties: *mut vk::AndroidHardwareBufferPropertiesANDROID,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetAndroidHardwareBufferPropertiesANDROID.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryAndroidHardwareBufferANDROID.html>"]
extern "C" fn vkGetMemoryAndroidHardwareBufferANDROID(
    device: vk::Device,
    p_info: *const vk::MemoryGetAndroidHardwareBufferInfoANDROID,
    p_buffer: *mut *mut vk::AHardwareBuffer,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMemoryAndroidHardwareBufferANDROID.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirectCount.html>"]
extern "C" fn vkCmdDrawIndirectCount(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawIndirectCount.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexedIndirectCount.html>"]
extern "C" fn vkCmdDrawIndexedIndirectCount(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawIndexedIndirectCount.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCheckpointNV.html>"]
extern "C" fn vkCmdSetCheckpointNV(
    command_buffer: vk::CommandBuffer,
    p_checkpoint_marker: *const std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCheckpointNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueueCheckpointDataNV.html>"]
extern "C" fn vkGetQueueCheckpointDataNV(
    queue: vk::Queue,
    p_checkpoint_data_count: *mut u32,
    p_checkpoint_data: *mut vk::CheckpointDataNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetQueueCheckpointDataNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindTransformFeedbackBuffersEXT.html>"]
extern "C" fn vkCmdBindTransformFeedbackBuffersEXT(
    command_buffer: vk::CommandBuffer,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const vk::Buffer,
    p_offsets: *const vk::DeviceSize,
    p_sizes: *const vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindTransformFeedbackBuffersEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginTransformFeedbackEXT.html>"]
extern "C" fn vkCmdBeginTransformFeedbackEXT(
    command_buffer: vk::CommandBuffer,
    first_counter_buffer: u32,
    counter_buffer_count: u32,
    p_counter_buffers: *const vk::Buffer,
    p_counter_buffer_offsets: *const vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginTransformFeedbackEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndTransformFeedbackEXT.html>"]
extern "C" fn vkCmdEndTransformFeedbackEXT(
    command_buffer: vk::CommandBuffer,
    first_counter_buffer: u32,
    counter_buffer_count: u32,
    p_counter_buffers: *const vk::Buffer,
    p_counter_buffer_offsets: *const vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndTransformFeedbackEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginQueryIndexedEXT.html>"]
extern "C" fn vkCmdBeginQueryIndexedEXT(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
    flags: vk::QueryControlFlags,
    index: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginQueryIndexedEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndQueryIndexedEXT.html>"]
extern "C" fn vkCmdEndQueryIndexedEXT(
    command_buffer: vk::CommandBuffer,
    query_pool: vk::QueryPool,
    query: u32,
    index: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndQueryIndexedEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirectByteCountEXT.html>"]
extern "C" fn vkCmdDrawIndirectByteCountEXT(
    command_buffer: vk::CommandBuffer,
    instance_count: u32,
    first_instance: u32,
    counter_buffer: vk::Buffer,
    counter_buffer_offset: vk::DeviceSize,
    counter_offset: u32,
    vertex_stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawIndirectByteCountEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExclusiveScissorNV.html>"]
extern "C" fn vkCmdSetExclusiveScissorNV(
    command_buffer: vk::CommandBuffer,
    first_exclusive_scissor: u32,
    exclusive_scissor_count: u32,
    p_exclusive_scissors: *const vk::Rect2D,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetExclusiveScissorNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExclusiveScissorEnableNV.html>"]
extern "C" fn vkCmdSetExclusiveScissorEnableNV(
    command_buffer: vk::CommandBuffer,
    first_exclusive_scissor: u32,
    exclusive_scissor_count: u32,
    p_exclusive_scissor_enables: *const vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetExclusiveScissorEnableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindShadingRateImageNV.html>"]
extern "C" fn vkCmdBindShadingRateImageNV(
    command_buffer: vk::CommandBuffer,
    image_view: vk::ImageView,
    image_layout: vk::ImageLayout,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindShadingRateImageNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportShadingRatePaletteNV.html>"]
extern "C" fn vkCmdSetViewportShadingRatePaletteNV(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_shading_rate_palettes: *const vk::ShadingRatePaletteNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetViewportShadingRatePaletteNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoarseSampleOrderNV.html>"]
extern "C" fn vkCmdSetCoarseSampleOrderNV(
    command_buffer: vk::CommandBuffer,
    sample_order_type: vk::CoarseSampleOrderTypeNV,
    custom_sample_order_count: u32,
    p_custom_sample_orders: *const vk::CoarseSampleOrderCustomNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoarseSampleOrderNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksNV.html>"]
extern "C" fn vkCmdDrawMeshTasksNV(
    command_buffer: vk::CommandBuffer,
    task_count: u32,
    first_task: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMeshTasksNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectNV.html>"]
extern "C" fn vkCmdDrawMeshTasksIndirectNV(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMeshTasksIndirectNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectCountNV.html>"]
extern "C" fn vkCmdDrawMeshTasksIndirectCountNV(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMeshTasksIndirectCountNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksEXT.html>"]
extern "C" fn vkCmdDrawMeshTasksEXT(
    command_buffer: vk::CommandBuffer,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMeshTasksEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectEXT.html>"]
extern "C" fn vkCmdDrawMeshTasksIndirectEXT(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMeshTasksIndirectEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectCountEXT.html>"]
extern "C" fn vkCmdDrawMeshTasksIndirectCountEXT(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    count_buffer: vk::Buffer,
    count_buffer_offset: vk::DeviceSize,
    max_draw_count: u32,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDrawMeshTasksIndirectCountEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCompileDeferredNV.html>"]
extern "C" fn vkCompileDeferredNV(
    device: vk::Device,
    pipeline: vk::Pipeline,
    shader: u32,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCompileDeferredNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAccelerationStructureNV.html>"]
extern "C" fn vkCreateAccelerationStructureNV(
    device: vk::Device,
    p_create_info: *const vk::AccelerationStructureCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_acceleration_structure: *mut vk::AccelerationStructureNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateAccelerationStructureNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindInvocationMaskHUAWEI.html>"]
extern "C" fn vkCmdBindInvocationMaskHUAWEI(
    command_buffer: vk::CommandBuffer,
    image_view: vk::ImageView,
    image_layout: vk::ImageLayout,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindInvocationMaskHUAWEI.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyAccelerationStructureKHR.html>"]
extern "C" fn vkDestroyAccelerationStructureKHR(
    device: vk::Device,
    acceleration_structure: vk::AccelerationStructureKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyAccelerationStructureKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyAccelerationStructureNV.html>"]
extern "C" fn vkDestroyAccelerationStructureNV(
    device: vk::Device,
    acceleration_structure: vk::AccelerationStructureNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyAccelerationStructureNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureMemoryRequirementsNV.html>"]
extern "C" fn vkGetAccelerationStructureMemoryRequirementsNV(
    device: vk::Device,
    p_info: *const vk::AccelerationStructureMemoryRequirementsInfoNV,
    p_memory_requirements: *mut vk::MemoryRequirements2KHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetAccelerationStructureMemoryRequirementsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindAccelerationStructureMemoryNV.html>"]
extern "C" fn vkBindAccelerationStructureMemoryNV(
    device: vk::Device,
    bind_info_count: u32,
    p_bind_infos: *const vk::BindAccelerationStructureMemoryInfoNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindAccelerationStructureMemoryNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureNV.html>"]
extern "C" fn vkCmdCopyAccelerationStructureNV(
    command_buffer: vk::CommandBuffer,
    dst: vk::AccelerationStructureNV,
    src: vk::AccelerationStructureNV,
    mode: vk::CopyAccelerationStructureModeKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyAccelerationStructureNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureKHR.html>"]
extern "C" fn vkCmdCopyAccelerationStructureKHR(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyAccelerationStructureInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyAccelerationStructureKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyAccelerationStructureKHR.html>"]
extern "C" fn vkCopyAccelerationStructureKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyAccelerationStructureInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyAccelerationStructureKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureToMemoryKHR.html>"]
extern "C" fn vkCmdCopyAccelerationStructureToMemoryKHR(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyAccelerationStructureToMemoryInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyAccelerationStructureToMemoryKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyAccelerationStructureToMemoryKHR.html>"]
extern "C" fn vkCopyAccelerationStructureToMemoryKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyAccelerationStructureToMemoryInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyAccelerationStructureToMemoryKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToAccelerationStructureKHR.html>"]
extern "C" fn vkCmdCopyMemoryToAccelerationStructureKHR(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMemoryToAccelerationStructureInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyMemoryToAccelerationStructureKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToAccelerationStructureKHR.html>"]
extern "C" fn vkCopyMemoryToAccelerationStructureKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMemoryToAccelerationStructureInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyMemoryToAccelerationStructureKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesKHR.html>"]
extern "C" fn vkCmdWriteAccelerationStructuresPropertiesKHR(
    command_buffer: vk::CommandBuffer,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const vk::AccelerationStructureKHR,
    query_type: vk::QueryType,
    query_pool: vk::QueryPool,
    first_query: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteAccelerationStructuresPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesNV.html>"]
extern "C" fn vkCmdWriteAccelerationStructuresPropertiesNV(
    command_buffer: vk::CommandBuffer,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const vk::AccelerationStructureNV,
    query_type: vk::QueryType,
    query_pool: vk::QueryPool,
    first_query: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteAccelerationStructuresPropertiesNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructureNV.html>"]
extern "C" fn vkCmdBuildAccelerationStructureNV(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::AccelerationStructureInfoNV,
    instance_data: vk::Buffer,
    instance_offset: vk::DeviceSize,
    update: vk::Bool32,
    dst: vk::AccelerationStructureNV,
    src: vk::AccelerationStructureNV,
    scratch: vk::Buffer,
    scratch_offset: vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBuildAccelerationStructureNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWriteAccelerationStructuresPropertiesKHR.html>"]
extern "C" fn vkWriteAccelerationStructuresPropertiesKHR(
    device: vk::Device,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const vk::AccelerationStructureKHR,
    query_type: vk::QueryType,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
    stride: isize,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkWriteAccelerationStructuresPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysKHR.html>"]
extern "C" fn vkCmdTraceRaysKHR(
    command_buffer: vk::CommandBuffer,
    p_raygen_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_miss_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_hit_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_callable_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    width: u32,
    height: u32,
    depth: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdTraceRaysKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysNV.html>"]
extern "C" fn vkCmdTraceRaysNV(
    command_buffer: vk::CommandBuffer,
    raygen_shader_binding_table_buffer: vk::Buffer,
    raygen_shader_binding_offset: vk::DeviceSize,
    miss_shader_binding_table_buffer: vk::Buffer,
    miss_shader_binding_offset: vk::DeviceSize,
    miss_shader_binding_stride: vk::DeviceSize,
    hit_shader_binding_table_buffer: vk::Buffer,
    hit_shader_binding_offset: vk::DeviceSize,
    hit_shader_binding_stride: vk::DeviceSize,
    callable_shader_binding_table_buffer: vk::Buffer,
    callable_shader_binding_offset: vk::DeviceSize,
    callable_shader_binding_stride: vk::DeviceSize,
    width: u32,
    height: u32,
    depth: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdTraceRaysNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingShaderGroupHandlesKHR.html>"]
extern "C" fn vkGetRayTracingShaderGroupHandlesKHR(
    device: vk::Device,
    pipeline: vk::Pipeline,
    first_group: u32,
    group_count: u32,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRayTracingShaderGroupHandlesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.html>"]
extern "C" fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    device: vk::Device,
    pipeline: vk::Pipeline,
    first_group: u32,
    group_count: u32,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureHandleNV.html>"]
extern "C" fn vkGetAccelerationStructureHandleNV(
    device: vk::Device,
    acceleration_structure: vk::AccelerationStructureNV,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetAccelerationStructureHandleNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRayTracingPipelinesNV.html>"]
extern "C" fn vkCreateRayTracingPipelinesNV(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::RayTracingPipelineCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateRayTracingPipelinesNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRayTracingPipelinesKHR.html>"]
extern "C" fn vkCreateRayTracingPipelinesKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::RayTracingPipelineCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateRayTracingPipelinesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.html>"]
extern "C" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::CooperativeMatrixPropertiesNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysIndirectKHR.html>"]
extern "C" fn vkCmdTraceRaysIndirectKHR(
    command_buffer: vk::CommandBuffer,
    p_raygen_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_miss_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_hit_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    p_callable_shader_binding_table: *const vk::StridedDeviceAddressRegionKHR,
    indirect_device_address: vk::DeviceAddress,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdTraceRaysIndirectKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysIndirect2KHR.html>"]
extern "C" fn vkCmdTraceRaysIndirect2KHR(
    command_buffer: vk::CommandBuffer,
    indirect_device_address: vk::DeviceAddress,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdTraceRaysIndirect2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceAccelerationStructureCompatibilityKHR.html>"]
extern "C" fn vkGetDeviceAccelerationStructureCompatibilityKHR(
    device: vk::Device,
    p_version_info: *const vk::AccelerationStructureVersionInfoKHR,
    p_compatibility: *mut vk::AccelerationStructureCompatibilityKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceAccelerationStructureCompatibilityKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingShaderGroupStackSizeKHR.html>"]
extern "C" fn vkGetRayTracingShaderGroupStackSizeKHR(
    device: vk::Device,
    pipeline: vk::Pipeline,
    group: u32,
    group_shader: vk::ShaderGroupShaderKHR,
) -> vk::DeviceSize {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetRayTracingShaderGroupStackSizeKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRayTracingPipelineStackSizeKHR.html>"]
extern "C" fn vkCmdSetRayTracingPipelineStackSizeKHR(
    command_buffer: vk::CommandBuffer,
    pipeline_stack_size: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRayTracingPipelineStackSizeKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewHandleNVX.html>"]
extern "C" fn vkGetImageViewHandleNVX(
    device: vk::Device,
    p_info: *const vk::ImageViewHandleInfoNVX,
) -> u32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageViewHandleNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewAddressNVX.html>"]
extern "C" fn vkGetImageViewAddressNVX(
    device: vk::Device,
    image_view: vk::ImageView,
    p_properties: *mut vk::ImageViewAddressPropertiesNVX,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageViewAddressNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModes2EXT.html>"]
extern "C" fn vkGetPhysicalDeviceSurfacePresentModes2EXT(
    physical_device: vk::PhysicalDevice,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_present_mode_count: *mut u32,
    p_present_modes: *mut vk::PresentModeKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSurfacePresentModes2EXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupSurfacePresentModes2EXT.html>"]
extern "C" fn vkGetDeviceGroupSurfacePresentModes2EXT(
    device: vk::Device,
    p_surface_info: *const vk::PhysicalDeviceSurfaceInfo2KHR,
    p_modes: *mut vk::DeviceGroupPresentModeFlagsKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceGroupSurfacePresentModes2EXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireFullScreenExclusiveModeEXT.html>"]
extern "C" fn vkAcquireFullScreenExclusiveModeEXT(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireFullScreenExclusiveModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseFullScreenExclusiveModeEXT.html>"]
extern "C" fn vkReleaseFullScreenExclusiveModeEXT(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkReleaseFullScreenExclusiveModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.html>"]
extern "C" fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    p_counter_count: *mut u32,
    p_counters: *mut vk::PerformanceCounterKHR,
    p_counter_descriptions: *mut vk::PerformanceCounterDescriptionKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    physical_device: vk::PhysicalDevice,
    p_performance_query_create_info: *const vk::QueryPoolPerformanceCreateInfoKHR,
    p_num_passes: *mut u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireProfilingLockKHR.html>"]
extern "C" fn vkAcquireProfilingLockKHR(
    device: vk::Device,
    p_info: *const vk::AcquireProfilingLockInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireProfilingLockKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseProfilingLockKHR.html>"]
extern "C" fn vkReleaseProfilingLockKHR(
    device: vk::Device,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkReleaseProfilingLockKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageDrmFormatModifierPropertiesEXT.html>"]
extern "C" fn vkGetImageDrmFormatModifierPropertiesEXT(
    device: vk::Device,
    image: vk::Image,
    p_properties: *mut vk::ImageDrmFormatModifierPropertiesEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageDrmFormatModifierPropertiesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferOpaqueCaptureAddress.html>"]
extern "C" fn vkGetBufferOpaqueCaptureAddress(
    device: vk::Device,
    p_info: *const vk::BufferDeviceAddressInfo,
) -> u64 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetBufferOpaqueCaptureAddress.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferDeviceAddress.html>"]
extern "C" fn vkGetBufferDeviceAddress(
    device: vk::Device,
    p_info: *const vk::BufferDeviceAddressInfo,
) -> vk::DeviceAddress {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetBufferDeviceAddress.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateHeadlessSurfaceEXT.html>"]
extern "C" fn vkCreateHeadlessSurfaceEXT(
    instance: vk::Instance,
    p_create_info: *const vk::HeadlessSurfaceCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_surface: *mut vk::SurfaceKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateHeadlessSurfaceEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.html>"]
extern "C" fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    physical_device: vk::PhysicalDevice,
    p_combination_count: *mut u32,
    p_combinations: *mut vk::FramebufferMixedSamplesCombinationNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkInitializePerformanceApiINTEL.html>"]
extern "C" fn vkInitializePerformanceApiINTEL(
    device: vk::Device,
    p_initialize_info: *const vk::InitializePerformanceApiInfoINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkInitializePerformanceApiINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUninitializePerformanceApiINTEL.html>"]
extern "C" fn vkUninitializePerformanceApiINTEL(
    device: vk::Device,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkUninitializePerformanceApiINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceMarkerINTEL.html>"]
extern "C" fn vkCmdSetPerformanceMarkerINTEL(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::PerformanceMarkerInfoINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPerformanceMarkerINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceStreamMarkerINTEL.html>"]
extern "C" fn vkCmdSetPerformanceStreamMarkerINTEL(
    command_buffer: vk::CommandBuffer,
    p_marker_info: *const vk::PerformanceStreamMarkerInfoINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPerformanceStreamMarkerINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceOverrideINTEL.html>"]
extern "C" fn vkCmdSetPerformanceOverrideINTEL(
    command_buffer: vk::CommandBuffer,
    p_override_info: *const vk::PerformanceOverrideInfoINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPerformanceOverrideINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquirePerformanceConfigurationINTEL.html>"]
extern "C" fn vkAcquirePerformanceConfigurationINTEL(
    device: vk::Device,
    p_acquire_info: *const vk::PerformanceConfigurationAcquireInfoINTEL,
    p_configuration: *mut vk::PerformanceConfigurationINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquirePerformanceConfigurationINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleasePerformanceConfigurationINTEL.html>"]
extern "C" fn vkReleasePerformanceConfigurationINTEL(
    device: vk::Device,
    configuration: vk::PerformanceConfigurationINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkReleasePerformanceConfigurationINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSetPerformanceConfigurationINTEL.html>"]
extern "C" fn vkQueueSetPerformanceConfigurationINTEL(
    queue: vk::Queue,
    configuration: vk::PerformanceConfigurationINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueSetPerformanceConfigurationINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPerformanceParameterINTEL.html>"]
extern "C" fn vkGetPerformanceParameterINTEL(
    device: vk::Device,
    parameter: vk::PerformanceParameterTypeINTEL,
    p_value: *mut vk::PerformanceValueINTEL,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPerformanceParameterINTEL.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMemoryOpaqueCaptureAddress.html>"]
extern "C" fn vkGetDeviceMemoryOpaqueCaptureAddress(
    device: vk::Device,
    p_info: *const vk::DeviceMemoryOpaqueCaptureAddressInfo,
) -> u64 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceMemoryOpaqueCaptureAddress.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutablePropertiesKHR.html>"]
extern "C" fn vkGetPipelineExecutablePropertiesKHR(
    device: vk::Device,
    p_pipeline_info: *const vk::PipelineInfoKHR,
    p_executable_count: *mut u32,
    p_properties: *mut vk::PipelineExecutablePropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelineExecutablePropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutableStatisticsKHR.html>"]
extern "C" fn vkGetPipelineExecutableStatisticsKHR(
    device: vk::Device,
    p_executable_info: *const vk::PipelineExecutableInfoKHR,
    p_statistic_count: *mut u32,
    p_statistics: *mut vk::PipelineExecutableStatisticKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelineExecutableStatisticsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutableInternalRepresentationsKHR.html>"]
extern "C" fn vkGetPipelineExecutableInternalRepresentationsKHR(
    device: vk::Device,
    p_executable_info: *const vk::PipelineExecutableInfoKHR,
    p_internal_representation_count: *mut u32,
    p_internal_representations: *mut vk::PipelineExecutableInternalRepresentationKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelineExecutableInternalRepresentationsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleKHR.html>"]
extern "C" fn vkCmdSetLineStippleKHR(
    command_buffer: vk::CommandBuffer,
    line_stipple_factor: u32,
    line_stipple_pattern: u16,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetLineStippleKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceToolProperties.html>"]
extern "C" fn vkGetPhysicalDeviceToolProperties(
    physical_device: vk::PhysicalDevice,
    p_tool_count: *mut u32,
    p_tool_properties: *mut vk::PhysicalDeviceToolProperties,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceToolProperties.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAccelerationStructureKHR.html>"]
extern "C" fn vkCreateAccelerationStructureKHR(
    device: vk::Device,
    p_create_info: *const vk::AccelerationStructureCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_acceleration_structure: *mut vk::AccelerationStructureKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateAccelerationStructureKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructuresKHR.html>"]
extern "C" fn vkCmdBuildAccelerationStructuresKHR(
    command_buffer: vk::CommandBuffer,
    info_count: u32,
    p_infos: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    pp_build_range_infos: *mut *const vk::AccelerationStructureBuildRangeInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBuildAccelerationStructuresKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructuresIndirectKHR.html>"]
extern "C" fn vkCmdBuildAccelerationStructuresIndirectKHR(
    command_buffer: vk::CommandBuffer,
    info_count: u32,
    p_infos: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    p_indirect_device_addresses: *const vk::DeviceAddress,
    p_indirect_strides: *const u32,
    pp_max_primitive_counts: *mut *const u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBuildAccelerationStructuresIndirectKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBuildAccelerationStructuresKHR.html>"]
extern "C" fn vkBuildAccelerationStructuresKHR(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    info_count: u32,
    p_infos: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    pp_build_range_infos: *mut *const vk::AccelerationStructureBuildRangeInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBuildAccelerationStructuresKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureDeviceAddressKHR.html>"]
extern "C" fn vkGetAccelerationStructureDeviceAddressKHR(
    device: vk::Device,
    p_info: *const vk::AccelerationStructureDeviceAddressInfoKHR,
) -> vk::DeviceAddress {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetAccelerationStructureDeviceAddressKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDeferredOperationKHR.html>"]
extern "C" fn vkCreateDeferredOperationKHR(
    device: vk::Device,
    p_allocator: *const vk::AllocationCallbacks,
    p_deferred_operation: *mut vk::DeferredOperationKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateDeferredOperationKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDeferredOperationKHR.html>"]
extern "C" fn vkDestroyDeferredOperationKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyDeferredOperationKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeferredOperationMaxConcurrencyKHR.html>"]
extern "C" fn vkGetDeferredOperationMaxConcurrencyKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
) -> u32 {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeferredOperationMaxConcurrencyKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeferredOperationResultKHR.html>"]
extern "C" fn vkGetDeferredOperationResultKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeferredOperationResultKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDeferredOperationJoinKHR.html>"]
extern "C" fn vkDeferredOperationJoinKHR(
    device: vk::Device,
    operation: vk::DeferredOperationKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDeferredOperationJoinKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineIndirectMemoryRequirementsNV.html>"]
extern "C" fn vkGetPipelineIndirectMemoryRequirementsNV(
    device: vk::Device,
    p_create_info: *const vk::ComputePipelineCreateInfo,
    p_memory_requirements: *mut vk::MemoryRequirements2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelineIndirectMemoryRequirementsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineIndirectDeviceAddressNV.html>"]
extern "C" fn vkGetPipelineIndirectDeviceAddressNV(
    device: vk::Device,
    p_info: *const vk::PipelineIndirectDeviceAddressInfoNV,
) -> vk::DeviceAddress {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelineIndirectDeviceAddressNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCullMode.html>"]
extern "C" fn vkCmdSetCullMode(
    command_buffer: vk::CommandBuffer,
    cull_mode: vk::CullModeFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCullMode.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFrontFace.html>"]
extern "C" fn vkCmdSetFrontFace(
    command_buffer: vk::CommandBuffer,
    front_face: vk::FrontFace,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetFrontFace.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPrimitiveTopology.html>"]
extern "C" fn vkCmdSetPrimitiveTopology(
    command_buffer: vk::CommandBuffer,
    primitive_topology: vk::PrimitiveTopology,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPrimitiveTopology.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWithCount.html>"]
extern "C" fn vkCmdSetViewportWithCount(
    command_buffer: vk::CommandBuffer,
    viewport_count: u32,
    p_viewports: *const vk::Viewport,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetViewportWithCount.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetScissorWithCount.html>"]
extern "C" fn vkCmdSetScissorWithCount(
    command_buffer: vk::CommandBuffer,
    scissor_count: u32,
    p_scissors: *const vk::Rect2D,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetScissorWithCount.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindIndexBuffer2KHR.html>"]
extern "C" fn vkCmdBindIndexBuffer2KHR(
    command_buffer: vk::CommandBuffer,
    buffer: vk::Buffer,
    offset: vk::DeviceSize,
    size: vk::DeviceSize,
    index_type: vk::IndexType,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindIndexBuffer2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindVertexBuffers2.html>"]
extern "C" fn vkCmdBindVertexBuffers2(
    command_buffer: vk::CommandBuffer,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const vk::Buffer,
    p_offsets: *const vk::DeviceSize,
    p_sizes: *const vk::DeviceSize,
    p_strides: *const vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindVertexBuffers2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthTestEnable.html>"]
extern "C" fn vkCmdSetDepthTestEnable(
    command_buffer: vk::CommandBuffer,
    depth_test_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthTestEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthWriteEnable.html>"]
extern "C" fn vkCmdSetDepthWriteEnable(
    command_buffer: vk::CommandBuffer,
    depth_write_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthWriteEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthCompareOp.html>"]
extern "C" fn vkCmdSetDepthCompareOp(
    command_buffer: vk::CommandBuffer,
    depth_compare_op: vk::CompareOp,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthCompareOp.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBoundsTestEnable.html>"]
extern "C" fn vkCmdSetDepthBoundsTestEnable(
    command_buffer: vk::CommandBuffer,
    depth_bounds_test_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthBoundsTestEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilTestEnable.html>"]
extern "C" fn vkCmdSetStencilTestEnable(
    command_buffer: vk::CommandBuffer,
    stencil_test_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetStencilTestEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilOp.html>"]
extern "C" fn vkCmdSetStencilOp(
    command_buffer: vk::CommandBuffer,
    face_mask: vk::StencilFaceFlags,
    fail_op: vk::StencilOp,
    pass_op: vk::StencilOp,
    depth_fail_op: vk::StencilOp,
    compare_op: vk::CompareOp,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetStencilOp.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPatchControlPointsEXT.html>"]
extern "C" fn vkCmdSetPatchControlPointsEXT(
    command_buffer: vk::CommandBuffer,
    patch_control_points: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPatchControlPointsEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizerDiscardEnable.html>"]
extern "C" fn vkCmdSetRasterizerDiscardEnable(
    command_buffer: vk::CommandBuffer,
    rasterizer_discard_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRasterizerDiscardEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBiasEnable.html>"]
extern "C" fn vkCmdSetDepthBiasEnable(
    command_buffer: vk::CommandBuffer,
    depth_bias_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthBiasEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLogicOpEXT.html>"]
extern "C" fn vkCmdSetLogicOpEXT(
    command_buffer: vk::CommandBuffer,
    logic_op: vk::LogicOp,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetLogicOpEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPrimitiveRestartEnable.html>"]
extern "C" fn vkCmdSetPrimitiveRestartEnable(
    command_buffer: vk::CommandBuffer,
    primitive_restart_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPrimitiveRestartEnable.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetTessellationDomainOriginEXT.html>"]
extern "C" fn vkCmdSetTessellationDomainOriginEXT(
    command_buffer: vk::CommandBuffer,
    domain_origin: vk::TessellationDomainOrigin,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetTessellationDomainOriginEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClampEnableEXT.html>"]
extern "C" fn vkCmdSetDepthClampEnableEXT(
    command_buffer: vk::CommandBuffer,
    depth_clamp_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthClampEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPolygonModeEXT.html>"]
extern "C" fn vkCmdSetPolygonModeEXT(
    command_buffer: vk::CommandBuffer,
    polygon_mode: vk::PolygonMode,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetPolygonModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizationSamplesEXT.html>"]
extern "C" fn vkCmdSetRasterizationSamplesEXT(
    command_buffer: vk::CommandBuffer,
    rasterization_samples: vk::SampleCountFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRasterizationSamplesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleMaskEXT.html>"]
extern "C" fn vkCmdSetSampleMaskEXT(
    command_buffer: vk::CommandBuffer,
    samples: vk::SampleCountFlags,
    p_sample_mask: *const vk::SampleMask,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetSampleMaskEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAlphaToCoverageEnableEXT.html>"]
extern "C" fn vkCmdSetAlphaToCoverageEnableEXT(
    command_buffer: vk::CommandBuffer,
    alpha_to_coverage_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetAlphaToCoverageEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAlphaToOneEnableEXT.html>"]
extern "C" fn vkCmdSetAlphaToOneEnableEXT(
    command_buffer: vk::CommandBuffer,
    alpha_to_one_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetAlphaToOneEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLogicOpEnableEXT.html>"]
extern "C" fn vkCmdSetLogicOpEnableEXT(
    command_buffer: vk::CommandBuffer,
    logic_op_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetLogicOpEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEnableEXT.html>"]
extern "C" fn vkCmdSetColorBlendEnableEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_enables: *const vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetColorBlendEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEquationEXT.html>"]
extern "C" fn vkCmdSetColorBlendEquationEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_equations: *const vk::ColorBlendEquationEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetColorBlendEquationEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteMaskEXT.html>"]
extern "C" fn vkCmdSetColorWriteMaskEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_write_masks: *const vk::ColorComponentFlags,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetColorWriteMaskEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizationStreamEXT.html>"]
extern "C" fn vkCmdSetRasterizationStreamEXT(
    command_buffer: vk::CommandBuffer,
    rasterization_stream: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRasterizationStreamEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetConservativeRasterizationModeEXT.html>"]
extern "C" fn vkCmdSetConservativeRasterizationModeEXT(
    command_buffer: vk::CommandBuffer,
    conservative_rasterization_mode: vk::ConservativeRasterizationModeEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetConservativeRasterizationModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExtraPrimitiveOverestimationSizeEXT.html>"]
extern "C" fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(
    command_buffer: vk::CommandBuffer,
    extra_primitive_overestimation_size: f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetExtraPrimitiveOverestimationSizeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClipEnableEXT.html>"]
extern "C" fn vkCmdSetDepthClipEnableEXT(
    command_buffer: vk::CommandBuffer,
    depth_clip_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthClipEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleLocationsEnableEXT.html>"]
extern "C" fn vkCmdSetSampleLocationsEnableEXT(
    command_buffer: vk::CommandBuffer,
    sample_locations_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetSampleLocationsEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendAdvancedEXT.html>"]
extern "C" fn vkCmdSetColorBlendAdvancedEXT(
    command_buffer: vk::CommandBuffer,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_advanced: *const vk::ColorBlendAdvancedEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetColorBlendAdvancedEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetProvokingVertexModeEXT.html>"]
extern "C" fn vkCmdSetProvokingVertexModeEXT(
    command_buffer: vk::CommandBuffer,
    provoking_vertex_mode: vk::ProvokingVertexModeEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetProvokingVertexModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineRasterizationModeEXT.html>"]
extern "C" fn vkCmdSetLineRasterizationModeEXT(
    command_buffer: vk::CommandBuffer,
    line_rasterization_mode: vk::LineRasterizationModeEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetLineRasterizationModeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleEnableEXT.html>"]
extern "C" fn vkCmdSetLineStippleEnableEXT(
    command_buffer: vk::CommandBuffer,
    stippled_line_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetLineStippleEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClipNegativeOneToOneEXT.html>"]
extern "C" fn vkCmdSetDepthClipNegativeOneToOneEXT(
    command_buffer: vk::CommandBuffer,
    negative_one_to_one: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthClipNegativeOneToOneEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWScalingEnableNV.html>"]
extern "C" fn vkCmdSetViewportWScalingEnableNV(
    command_buffer: vk::CommandBuffer,
    viewport_w_scaling_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetViewportWScalingEnableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportSwizzleNV.html>"]
extern "C" fn vkCmdSetViewportSwizzleNV(
    command_buffer: vk::CommandBuffer,
    first_viewport: u32,
    viewport_count: u32,
    p_viewport_swizzles: *const vk::ViewportSwizzleNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetViewportSwizzleNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageToColorEnableNV.html>"]
extern "C" fn vkCmdSetCoverageToColorEnableNV(
    command_buffer: vk::CommandBuffer,
    coverage_to_color_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoverageToColorEnableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageToColorLocationNV.html>"]
extern "C" fn vkCmdSetCoverageToColorLocationNV(
    command_buffer: vk::CommandBuffer,
    coverage_to_color_location: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoverageToColorLocationNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationModeNV.html>"]
extern "C" fn vkCmdSetCoverageModulationModeNV(
    command_buffer: vk::CommandBuffer,
    coverage_modulation_mode: vk::CoverageModulationModeNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoverageModulationModeNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationTableEnableNV.html>"]
extern "C" fn vkCmdSetCoverageModulationTableEnableNV(
    command_buffer: vk::CommandBuffer,
    coverage_modulation_table_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoverageModulationTableEnableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationTableNV.html>"]
extern "C" fn vkCmdSetCoverageModulationTableNV(
    command_buffer: vk::CommandBuffer,
    coverage_modulation_table_count: u32,
    p_coverage_modulation_table: *const f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoverageModulationTableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetShadingRateImageEnableNV.html>"]
extern "C" fn vkCmdSetShadingRateImageEnableNV(
    command_buffer: vk::CommandBuffer,
    shading_rate_image_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetShadingRateImageEnableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageReductionModeNV.html>"]
extern "C" fn vkCmdSetCoverageReductionModeNV(
    command_buffer: vk::CommandBuffer,
    coverage_reduction_mode: vk::CoverageReductionModeNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetCoverageReductionModeNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRepresentativeFragmentTestEnableNV.html>"]
extern "C" fn vkCmdSetRepresentativeFragmentTestEnableNV(
    command_buffer: vk::CommandBuffer,
    representative_fragment_test_enable: vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRepresentativeFragmentTestEnableNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePrivateDataSlot.html>"]
extern "C" fn vkCreatePrivateDataSlot(
    device: vk::Device,
    p_create_info: *const vk::PrivateDataSlotCreateInfo,
    p_allocator: *const vk::AllocationCallbacks,
    p_private_data_slot: *mut vk::PrivateDataSlot,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreatePrivateDataSlot.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPrivateDataSlot.html>"]
extern "C" fn vkDestroyPrivateDataSlot(
    device: vk::Device,
    private_data_slot: vk::PrivateDataSlot,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyPrivateDataSlot.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetPrivateData.html>"]
extern "C" fn vkSetPrivateData(
    device: vk::Device,
    object_type: vk::ObjectType,
    object_handle: u64,
    private_data_slot: vk::PrivateDataSlot,
    data: u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetPrivateData.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPrivateData.html>"]
extern "C" fn vkGetPrivateData(
    device: vk::Device,
    object_type: vk::ObjectType,
    object_handle: u64,
    private_data_slot: vk::PrivateDataSlot,
    p_data: *mut u64,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPrivateData.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBuffer2.html>"]
extern "C" fn vkCmdCopyBuffer2(
    command_buffer: vk::CommandBuffer,
    p_copy_buffer_info: *const vk::CopyBufferInfo2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyBuffer2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImage2.html>"]
extern "C" fn vkCmdCopyImage2(
    command_buffer: vk::CommandBuffer,
    p_copy_image_info: *const vk::CopyImageInfo2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyImage2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBlitImage2.html>"]
extern "C" fn vkCmdBlitImage2(
    command_buffer: vk::CommandBuffer,
    p_blit_image_info: *const vk::BlitImageInfo2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBlitImage2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBufferToImage2.html>"]
extern "C" fn vkCmdCopyBufferToImage2(
    command_buffer: vk::CommandBuffer,
    p_copy_buffer_to_image_info: *const vk::CopyBufferToImageInfo2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyBufferToImage2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImageToBuffer2.html>"]
extern "C" fn vkCmdCopyImageToBuffer2(
    command_buffer: vk::CommandBuffer,
    p_copy_image_to_buffer_info: *const vk::CopyImageToBufferInfo2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyImageToBuffer2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResolveImage2.html>"]
extern "C" fn vkCmdResolveImage2(
    command_buffer: vk::CommandBuffer,
    p_resolve_image_info: *const vk::ResolveImageInfo2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdResolveImage2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFragmentShadingRateKHR.html>"]
extern "C" fn vkCmdSetFragmentShadingRateKHR(
    command_buffer: vk::CommandBuffer,
    p_fragment_size: *const vk::Extent2D,
    combiner_ops: vk::FragmentShadingRateCombinerOpKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetFragmentShadingRateKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFragmentShadingRatesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceFragmentShadingRatesKHR(
    physical_device: vk::PhysicalDevice,
    p_fragment_shading_rate_count: *mut u32,
    p_fragment_shading_rates: *mut vk::PhysicalDeviceFragmentShadingRateKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceFragmentShadingRatesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFragmentShadingRateEnumNV.html>"]
extern "C" fn vkCmdSetFragmentShadingRateEnumNV(
    command_buffer: vk::CommandBuffer,
    shading_rate: vk::FragmentShadingRateNV,
    combiner_ops: vk::FragmentShadingRateCombinerOpKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetFragmentShadingRateEnumNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureBuildSizesKHR.html>"]
extern "C" fn vkGetAccelerationStructureBuildSizesKHR(
    device: vk::Device,
    build_type: vk::AccelerationStructureBuildTypeKHR,
    p_build_info: *const vk::AccelerationStructureBuildGeometryInfoKHR,
    p_max_primitive_counts: *const u32,
    p_size_info: *mut vk::AccelerationStructureBuildSizesInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetAccelerationStructureBuildSizesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetVertexInputEXT.html>"]
extern "C" fn vkCmdSetVertexInputEXT(
    command_buffer: vk::CommandBuffer,
    vertex_binding_description_count: u32,
    p_vertex_binding_descriptions: *const vk::VertexInputBindingDescription2EXT,
    vertex_attribute_description_count: u32,
    p_vertex_attribute_descriptions: *const vk::VertexInputAttributeDescription2EXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetVertexInputEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteEnableEXT.html>"]
extern "C" fn vkCmdSetColorWriteEnableEXT(
    command_buffer: vk::CommandBuffer,
    attachment_count: u32,
    p_color_write_enables: *const vk::Bool32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetColorWriteEnableEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetEvent2.html>"]
extern "C" fn vkCmdSetEvent2(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    p_dependency_info: *const vk::DependencyInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetEvent2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetEvent2.html>"]
extern "C" fn vkCmdResetEvent2(
    command_buffer: vk::CommandBuffer,
    event: vk::Event,
    stage_mask: vk::PipelineStageFlags2,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdResetEvent2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWaitEvents2.html>"]
extern "C" fn vkCmdWaitEvents2(
    command_buffer: vk::CommandBuffer,
    event_count: u32,
    p_events: *const vk::Event,
    p_dependency_infos: *const vk::DependencyInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWaitEvents2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPipelineBarrier2.html>"]
extern "C" fn vkCmdPipelineBarrier2(
    command_buffer: vk::CommandBuffer,
    p_dependency_info: *const vk::DependencyInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPipelineBarrier2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit2.html>"]
extern "C" fn vkQueueSubmit2(
    queue: vk::Queue,
    submit_count: u32,
    p_submits: *const vk::SubmitInfo2,
    fence: vk::Fence,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueSubmit2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteTimestamp2.html>"]
extern "C" fn vkCmdWriteTimestamp2(
    command_buffer: vk::CommandBuffer,
    stage: vk::PipelineStageFlags2,
    query_pool: vk::QueryPool,
    query: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteTimestamp2.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteBufferMarker2AMD.html>"]
extern "C" fn vkCmdWriteBufferMarker2AMD(
    command_buffer: vk::CommandBuffer,
    stage: vk::PipelineStageFlags2,
    dst_buffer: vk::Buffer,
    dst_offset: vk::DeviceSize,
    marker: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteBufferMarker2AMD.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueueCheckpointData2NV.html>"]
extern "C" fn vkGetQueueCheckpointData2NV(
    queue: vk::Queue,
    p_checkpoint_data_count: *mut u32,
    p_checkpoint_data: *mut vk::CheckpointData2NV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetQueueCheckpointData2NV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToImageEXT.html>"]
extern "C" fn vkCopyMemoryToImageEXT(
    device: vk::Device,
    p_copy_memory_to_image_info: *const vk::CopyMemoryToImageInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyMemoryToImageEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyImageToMemoryEXT.html>"]
extern "C" fn vkCopyImageToMemoryEXT(
    device: vk::Device,
    p_copy_image_to_memory_info: *const vk::CopyImageToMemoryInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyImageToMemoryEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyImageToImageEXT.html>"]
extern "C" fn vkCopyImageToImageEXT(
    device: vk::Device,
    p_copy_image_to_image_info: *const vk::CopyImageToImageInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyImageToImageEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkTransitionImageLayoutEXT.html>"]
extern "C" fn vkTransitionImageLayoutEXT(
    device: vk::Device,
    transition_count: u32,
    p_transitions: *const vk::HostImageLayoutTransitionInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkTransitionImageLayoutEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoCapabilitiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceVideoCapabilitiesKHR(
    physical_device: vk::PhysicalDevice,
    p_video_profile: *const vk::VideoProfileInfoKHR,
    p_capabilities: *mut vk::VideoCapabilitiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceVideoCapabilitiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoFormatPropertiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_video_format_info: *const vk::PhysicalDeviceVideoFormatInfoKHR,
    p_video_format_property_count: *mut u32,
    p_video_format_properties: *mut vk::VideoFormatPropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceVideoFormatPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_quality_level_info: *const vk::PhysicalDeviceVideoEncodeQualityLevelInfoKHR,
    p_quality_level_properties: *mut vk::VideoEncodeQualityLevelPropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateVideoSessionKHR.html>"]
extern "C" fn vkCreateVideoSessionKHR(
    device: vk::Device,
    p_create_info: *const vk::VideoSessionCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_video_session: *mut vk::VideoSessionKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateVideoSessionKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyVideoSessionKHR.html>"]
extern "C" fn vkDestroyVideoSessionKHR(
    device: vk::Device,
    video_session: vk::VideoSessionKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyVideoSessionKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateVideoSessionParametersKHR.html>"]
extern "C" fn vkCreateVideoSessionParametersKHR(
    device: vk::Device,
    p_create_info: *const vk::VideoSessionParametersCreateInfoKHR,
    p_allocator: *const vk::AllocationCallbacks,
    p_video_session_parameters: *mut vk::VideoSessionParametersKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateVideoSessionParametersKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateVideoSessionParametersKHR.html>"]
extern "C" fn vkUpdateVideoSessionParametersKHR(
    device: vk::Device,
    video_session_parameters: vk::VideoSessionParametersKHR,
    p_update_info: *const vk::VideoSessionParametersUpdateInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkUpdateVideoSessionParametersKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetEncodedVideoSessionParametersKHR.html>"]
extern "C" fn vkGetEncodedVideoSessionParametersKHR(
    device: vk::Device,
    p_video_session_parameters_info: *const vk::VideoEncodeSessionParametersGetInfoKHR,
    p_feedback_info: *mut vk::VideoEncodeSessionParametersFeedbackInfoKHR,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetEncodedVideoSessionParametersKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyVideoSessionParametersKHR.html>"]
extern "C" fn vkDestroyVideoSessionParametersKHR(
    device: vk::Device,
    video_session_parameters: vk::VideoSessionParametersKHR,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyVideoSessionParametersKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetVideoSessionMemoryRequirementsKHR.html>"]
extern "C" fn vkGetVideoSessionMemoryRequirementsKHR(
    device: vk::Device,
    video_session: vk::VideoSessionKHR,
    p_memory_requirements_count: *mut u32,
    p_memory_requirements: *mut vk::VideoSessionMemoryRequirementsKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetVideoSessionMemoryRequirementsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindVideoSessionMemoryKHR.html>"]
extern "C" fn vkBindVideoSessionMemoryKHR(
    device: vk::Device,
    video_session: vk::VideoSessionKHR,
    bind_session_memory_info_count: u32,
    p_bind_session_memory_infos: *const vk::BindVideoSessionMemoryInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindVideoSessionMemoryKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecodeVideoKHR.html>"]
extern "C" fn vkCmdDecodeVideoKHR(
    command_buffer: vk::CommandBuffer,
    p_decode_info: *const vk::VideoDecodeInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDecodeVideoKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginVideoCodingKHR.html>"]
extern "C" fn vkCmdBeginVideoCodingKHR(
    command_buffer: vk::CommandBuffer,
    p_begin_info: *const vk::VideoBeginCodingInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginVideoCodingKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdControlVideoCodingKHR.html>"]
extern "C" fn vkCmdControlVideoCodingKHR(
    command_buffer: vk::CommandBuffer,
    p_coding_control_info: *const vk::VideoCodingControlInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdControlVideoCodingKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndVideoCodingKHR.html>"]
extern "C" fn vkCmdEndVideoCodingKHR(
    command_buffer: vk::CommandBuffer,
    p_end_coding_info: *const vk::VideoEndCodingInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndVideoCodingKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEncodeVideoKHR.html>"]
extern "C" fn vkCmdEncodeVideoKHR(
    command_buffer: vk::CommandBuffer,
    p_encode_info: *const vk::VideoEncodeInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEncodeVideoKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecompressMemoryNV.html>"]
extern "C" fn vkCmdDecompressMemoryNV(
    command_buffer: vk::CommandBuffer,
    decompress_region_count: u32,
    p_decompress_memory_regions: *const vk::DecompressMemoryRegionNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDecompressMemoryNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecompressMemoryIndirectCountNV.html>"]
extern "C" fn vkCmdDecompressMemoryIndirectCountNV(
    command_buffer: vk::CommandBuffer,
    indirect_commands_address: vk::DeviceAddress,
    indirect_commands_count_address: vk::DeviceAddress,
    stride: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDecompressMemoryIndirectCountNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCuModuleNVX.html>"]
extern "C" fn vkCreateCuModuleNVX(
    device: vk::Device,
    p_create_info: *const vk::CuModuleCreateInfoNVX,
    p_allocator: *const vk::AllocationCallbacks,
    p_module: *mut vk::CuModuleNVX,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateCuModuleNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCuFunctionNVX.html>"]
extern "C" fn vkCreateCuFunctionNVX(
    device: vk::Device,
    p_create_info: *const vk::CuFunctionCreateInfoNVX,
    p_allocator: *const vk::AllocationCallbacks,
    p_function: *mut vk::CuFunctionNVX,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateCuFunctionNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCuModuleNVX.html>"]
extern "C" fn vkDestroyCuModuleNVX(
    device: vk::Device,
    module: vk::CuModuleNVX,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyCuModuleNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCuFunctionNVX.html>"]
extern "C" fn vkDestroyCuFunctionNVX(
    device: vk::Device,
    function: vk::CuFunctionNVX,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyCuFunctionNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCuLaunchKernelNVX.html>"]
extern "C" fn vkCmdCuLaunchKernelNVX(
    command_buffer: vk::CommandBuffer,
    p_launch_info: *const vk::CuLaunchInfoNVX,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCuLaunchKernelNVX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutSizeEXT.html>"]
extern "C" fn vkGetDescriptorSetLayoutSizeEXT(
    device: vk::Device,
    layout: vk::DescriptorSetLayout,
    p_layout_size_in_bytes: *mut vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDescriptorSetLayoutSizeEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutBindingOffsetEXT.html>"]
extern "C" fn vkGetDescriptorSetLayoutBindingOffsetEXT(
    device: vk::Device,
    layout: vk::DescriptorSetLayout,
    binding: u32,
    p_offset: *mut vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDescriptorSetLayoutBindingOffsetEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorEXT.html>"]
extern "C" fn vkGetDescriptorEXT(
    device: vk::Device,
    p_descriptor_info: *const vk::DescriptorGetInfoEXT,
    data_size: isize,
    p_descriptor: *mut std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDescriptorEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBuffersEXT.html>"]
extern "C" fn vkCmdBindDescriptorBuffersEXT(
    command_buffer: vk::CommandBuffer,
    buffer_count: u32,
    p_binding_infos: *const vk::DescriptorBufferBindingInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindDescriptorBuffersEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDescriptorBufferOffsetsEXT.html>"]
extern "C" fn vkCmdSetDescriptorBufferOffsetsEXT(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    first_set: u32,
    set_count: u32,
    p_buffer_indices: *const u32,
    p_offsets: *const vk::DeviceSize,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDescriptorBufferOffsetsEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBufferEmbeddedSamplersEXT.html>"]
extern "C" fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
    command_buffer: vk::CommandBuffer,
    pipeline_bind_point: vk::PipelineBindPoint,
    layout: vk::PipelineLayout,
    set: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindDescriptorBufferEmbeddedSamplersEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferOpaqueCaptureDescriptorDataEXT.html>"]
extern "C" fn vkGetBufferOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::BufferCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetBufferOpaqueCaptureDescriptorDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageOpaqueCaptureDescriptorDataEXT.html>"]
extern "C" fn vkGetImageOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::ImageCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageOpaqueCaptureDescriptorDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewOpaqueCaptureDescriptorDataEXT.html>"]
extern "C" fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::ImageViewCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageViewOpaqueCaptureDescriptorDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSamplerOpaqueCaptureDescriptorDataEXT.html>"]
extern "C" fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::SamplerCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetSamplerOpaqueCaptureDescriptorDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.html>"]
extern "C" fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
    device: vk::Device,
    p_info: *const vk::AccelerationStructureCaptureDescriptorDataInfoEXT,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDeviceMemoryPriorityEXT.html>"]
extern "C" fn vkSetDeviceMemoryPriorityEXT(
    device: vk::Device,
    memory: vk::DeviceMemory,
    priority: f32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetDeviceMemoryPriorityEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireDrmDisplayEXT.html>"]
extern "C" fn vkAcquireDrmDisplayEXT(
    physical_device: vk::PhysicalDevice,
    drm_fd: i32,
    display: vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkAcquireDrmDisplayEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDrmDisplayEXT.html>"]
extern "C" fn vkGetDrmDisplayEXT(
    physical_device: vk::PhysicalDevice,
    drm_fd: i32,
    connector_id: u32,
    display: *mut vk::DisplayKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDrmDisplayEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitForPresentKHR.html>"]
extern "C" fn vkWaitForPresentKHR(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    present_id: u64,
    timeout: u64,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkWaitForPresentKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBufferCollectionFUCHSIA.html>"]
extern "C" fn vkCreateBufferCollectionFUCHSIA(
    device: vk::Device,
    p_create_info: *const vk::BufferCollectionCreateInfoFUCHSIA,
    p_allocator: *const vk::AllocationCallbacks,
    p_collection: *mut vk::BufferCollectionFUCHSIA,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateBufferCollectionFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetBufferCollectionBufferConstraintsFUCHSIA.html>"]
extern "C" fn vkSetBufferCollectionBufferConstraintsFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_buffer_constraints_info: *const vk::BufferConstraintsInfoFUCHSIA,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetBufferCollectionBufferConstraintsFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetBufferCollectionImageConstraintsFUCHSIA.html>"]
extern "C" fn vkSetBufferCollectionImageConstraintsFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_image_constraints_info: *const vk::ImageConstraintsInfoFUCHSIA,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetBufferCollectionImageConstraintsFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBufferCollectionFUCHSIA.html>"]
extern "C" fn vkDestroyBufferCollectionFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyBufferCollectionFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferCollectionPropertiesFUCHSIA.html>"]
extern "C" fn vkGetBufferCollectionPropertiesFUCHSIA(
    device: vk::Device,
    collection: vk::BufferCollectionFUCHSIA,
    p_properties: *mut vk::BufferCollectionPropertiesFUCHSIA,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetBufferCollectionPropertiesFUCHSIA.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCudaModuleNV.html>"]
extern "C" fn vkCreateCudaModuleNV(
    device: vk::Device,
    p_create_info: *const vk::CudaModuleCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_module: *mut vk::CudaModuleNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateCudaModuleNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetCudaModuleCacheNV.html>"]
extern "C" fn vkGetCudaModuleCacheNV(
    device: vk::Device,
    module: vk::CudaModuleNV,
    p_cache_size: *mut isize,
    p_cache_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetCudaModuleCacheNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCudaFunctionNV.html>"]
extern "C" fn vkCreateCudaFunctionNV(
    device: vk::Device,
    p_create_info: *const vk::CudaFunctionCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_function: *mut vk::CudaFunctionNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateCudaFunctionNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCudaModuleNV.html>"]
extern "C" fn vkDestroyCudaModuleNV(
    device: vk::Device,
    module: vk::CudaModuleNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyCudaModuleNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCudaFunctionNV.html>"]
extern "C" fn vkDestroyCudaFunctionNV(
    device: vk::Device,
    function: vk::CudaFunctionNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyCudaFunctionNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCudaLaunchKernelNV.html>"]
extern "C" fn vkCmdCudaLaunchKernelNV(
    command_buffer: vk::CommandBuffer,
    p_launch_info: *const vk::CudaLaunchInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCudaLaunchKernelNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRendering.html>"]
extern "C" fn vkCmdBeginRendering(
    command_buffer: vk::CommandBuffer,
    p_rendering_info: *const vk::RenderingInfo,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBeginRendering.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRendering.html>"]
extern "C" fn vkCmdEndRendering(
    command_buffer: vk::CommandBuffer,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdEndRendering.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutHostMappingInfoVALVE.html>"]
extern "C" fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(
    device: vk::Device,
    p_binding_reference: *const vk::DescriptorSetBindingReferenceVALVE,
    p_host_mapping: *mut vk::DescriptorSetLayoutHostMappingInfoVALVE,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDescriptorSetLayoutHostMappingInfoVALVE.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetHostMappingVALVE.html>"]
extern "C" fn vkGetDescriptorSetHostMappingVALVE(
    device: vk::Device,
    descriptor_set: vk::DescriptorSet,
    pp_data: *mut *mut std::ffi::c_void,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDescriptorSetHostMappingVALVE.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMicromapEXT.html>"]
extern "C" fn vkCreateMicromapEXT(
    device: vk::Device,
    p_create_info: *const vk::MicromapCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_micromap: *mut vk::MicromapEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateMicromapEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildMicromapsEXT.html>"]
extern "C" fn vkCmdBuildMicromapsEXT(
    command_buffer: vk::CommandBuffer,
    info_count: u32,
    p_infos: *const vk::MicromapBuildInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBuildMicromapsEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBuildMicromapsEXT.html>"]
extern "C" fn vkBuildMicromapsEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    info_count: u32,
    p_infos: *const vk::MicromapBuildInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBuildMicromapsEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyMicromapEXT.html>"]
extern "C" fn vkDestroyMicromapEXT(
    device: vk::Device,
    micromap: vk::MicromapEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyMicromapEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMicromapEXT.html>"]
extern "C" fn vkCmdCopyMicromapEXT(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMicromapInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyMicromapEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMicromapEXT.html>"]
extern "C" fn vkCopyMicromapEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMicromapInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyMicromapEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMicromapToMemoryEXT.html>"]
extern "C" fn vkCmdCopyMicromapToMemoryEXT(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMicromapToMemoryInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyMicromapToMemoryEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMicromapToMemoryEXT.html>"]
extern "C" fn vkCopyMicromapToMemoryEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMicromapToMemoryInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyMicromapToMemoryEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToMicromapEXT.html>"]
extern "C" fn vkCmdCopyMemoryToMicromapEXT(
    command_buffer: vk::CommandBuffer,
    p_info: *const vk::CopyMemoryToMicromapInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdCopyMemoryToMicromapEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToMicromapEXT.html>"]
extern "C" fn vkCopyMemoryToMicromapEXT(
    device: vk::Device,
    deferred_operation: vk::DeferredOperationKHR,
    p_info: *const vk::CopyMemoryToMicromapInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCopyMemoryToMicromapEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteMicromapsPropertiesEXT.html>"]
extern "C" fn vkCmdWriteMicromapsPropertiesEXT(
    command_buffer: vk::CommandBuffer,
    micromap_count: u32,
    p_micromaps: *const vk::MicromapEXT,
    query_type: vk::QueryType,
    query_pool: vk::QueryPool,
    first_query: u32,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdWriteMicromapsPropertiesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWriteMicromapsPropertiesEXT.html>"]
extern "C" fn vkWriteMicromapsPropertiesEXT(
    device: vk::Device,
    micromap_count: u32,
    p_micromaps: *const vk::MicromapEXT,
    query_type: vk::QueryType,
    data_size: isize,
    p_data: *mut std::ffi::c_void,
    stride: isize,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkWriteMicromapsPropertiesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMicromapCompatibilityEXT.html>"]
extern "C" fn vkGetDeviceMicromapCompatibilityEXT(
    device: vk::Device,
    p_version_info: *const vk::MicromapVersionInfoEXT,
    p_compatibility: *mut vk::AccelerationStructureCompatibilityKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceMicromapCompatibilityEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMicromapBuildSizesEXT.html>"]
extern "C" fn vkGetMicromapBuildSizesEXT(
    device: vk::Device,
    build_type: vk::AccelerationStructureBuildTypeKHR,
    p_build_info: *const vk::MicromapBuildInfoEXT,
    p_size_info: *mut vk::MicromapBuildSizesInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetMicromapBuildSizesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderModuleIdentifierEXT.html>"]
extern "C" fn vkGetShaderModuleIdentifierEXT(
    device: vk::Device,
    shader_module: vk::ShaderModule,
    p_identifier: *mut vk::ShaderModuleIdentifierEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetShaderModuleIdentifierEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderModuleCreateInfoIdentifierEXT.html>"]
extern "C" fn vkGetShaderModuleCreateInfoIdentifierEXT(
    device: vk::Device,
    p_create_info: *const vk::ShaderModuleCreateInfo,
    p_identifier: *mut vk::ShaderModuleIdentifierEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetShaderModuleCreateInfoIdentifierEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSubresourceLayout2KHR.html>"]
extern "C" fn vkGetImageSubresourceLayout2KHR(
    device: vk::Device,
    image: vk::Image,
    p_subresource: *const vk::ImageSubresource2KHR,
    p_layout: *mut vk::SubresourceLayout2KHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetImageSubresourceLayout2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelinePropertiesEXT.html>"]
extern "C" fn vkGetPipelinePropertiesEXT(
    device: vk::Device,
    p_pipeline_info: *const vk::PipelineInfoEXT,
    p_pipeline_properties: *mut vk::BaseOutStructure,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPipelinePropertiesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkExportMetalObjectsEXT.html>"]
extern "C" fn vkExportMetalObjectsEXT(
    device: vk::Device,
    p_metal_objects_info: *mut vk::ExportMetalObjectsInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkExportMetalObjectsEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFramebufferTilePropertiesQCOM.html>"]
extern "C" fn vkGetFramebufferTilePropertiesQCOM(
    device: vk::Device,
    framebuffer: vk::Framebuffer,
    p_properties_count: *mut u32,
    p_properties: *mut vk::TilePropertiesQCOM,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetFramebufferTilePropertiesQCOM.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDynamicRenderingTilePropertiesQCOM.html>"]
extern "C" fn vkGetDynamicRenderingTilePropertiesQCOM(
    device: vk::Device,
    p_rendering_info: *const vk::RenderingInfo,
    p_properties: *mut vk::TilePropertiesQCOM,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDynamicRenderingTilePropertiesQCOM.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceOpticalFlowImageFormatsNV.html>"]
extern "C" fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
    physical_device: vk::PhysicalDevice,
    p_optical_flow_image_format_info: *const vk::OpticalFlowImageFormatInfoNV,
    p_format_count: *mut u32,
    p_image_format_properties: *mut vk::OpticalFlowImageFormatPropertiesNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceOpticalFlowImageFormatsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateOpticalFlowSessionNV.html>"]
extern "C" fn vkCreateOpticalFlowSessionNV(
    device: vk::Device,
    p_create_info: *const vk::OpticalFlowSessionCreateInfoNV,
    p_allocator: *const vk::AllocationCallbacks,
    p_session: *mut vk::OpticalFlowSessionNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateOpticalFlowSessionNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyOpticalFlowSessionNV.html>"]
extern "C" fn vkDestroyOpticalFlowSessionNV(
    device: vk::Device,
    session: vk::OpticalFlowSessionNV,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyOpticalFlowSessionNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindOpticalFlowSessionImageNV.html>"]
extern "C" fn vkBindOpticalFlowSessionImageNV(
    device: vk::Device,
    session: vk::OpticalFlowSessionNV,
    binding_point: vk::OpticalFlowSessionBindingPointNV,
    view: vk::ImageView,
    layout: vk::ImageLayout,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkBindOpticalFlowSessionImageNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdOpticalFlowExecuteNV.html>"]
extern "C" fn vkCmdOpticalFlowExecuteNV(
    command_buffer: vk::CommandBuffer,
    session: vk::OpticalFlowSessionNV,
    p_execute_info: *const vk::OpticalFlowExecuteInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdOpticalFlowExecuteNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceFaultInfoEXT.html>"]
extern "C" fn vkGetDeviceFaultInfoEXT(
    device: vk::Device,
    p_fault_counts: *mut vk::DeviceFaultCountsEXT,
    p_fault_info: *mut vk::DeviceFaultInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceFaultInfoEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBias2EXT.html>"]
extern "C" fn vkCmdSetDepthBias2EXT(
    command_buffer: vk::CommandBuffer,
    p_depth_bias_info: *const vk::DepthBiasInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDepthBias2EXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseSwapchainImagesEXT.html>"]
extern "C" fn vkReleaseSwapchainImagesEXT(
    device: vk::Device,
    p_release_info: *const vk::ReleaseSwapchainImagesInfoEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkReleaseSwapchainImagesEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageSubresourceLayoutKHR.html>"]
extern "C" fn vkGetDeviceImageSubresourceLayoutKHR(
    device: vk::Device,
    p_info: *const vk::DeviceImageSubresourceInfoKHR,
    p_layout: *mut vk::SubresourceLayout2KHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetDeviceImageSubresourceLayoutKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMapMemory2KHR.html>"]
extern "C" fn vkMapMemory2KHR(
    device: vk::Device,
    p_memory_map_info: *const vk::MemoryMapInfoKHR,
    pp_data: *mut *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkMapMemory2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUnmapMemory2KHR.html>"]
extern "C" fn vkUnmapMemory2KHR(
    device: vk::Device,
    p_memory_unmap_info: *const vk::MemoryUnmapInfoKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkUnmapMemory2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateShadersEXT.html>"]
extern "C" fn vkCreateShadersEXT(
    device: vk::Device,
    create_info_count: u32,
    p_create_infos: *const vk::ShaderCreateInfoEXT,
    p_allocator: *const vk::AllocationCallbacks,
    p_shaders: *mut vk::ShaderEXT,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateShadersEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyShaderEXT.html>"]
extern "C" fn vkDestroyShaderEXT(
    device: vk::Device,
    shader: vk::ShaderEXT,
    p_allocator: *const vk::AllocationCallbacks,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkDestroyShaderEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderBinaryDataEXT.html>"]
extern "C" fn vkGetShaderBinaryDataEXT(
    device: vk::Device,
    shader: vk::ShaderEXT,
    p_data_size: *mut isize,
    p_data: *mut std::ffi::c_void,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetShaderBinaryDataEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindShadersEXT.html>"]
extern "C" fn vkCmdBindShadersEXT(
    command_buffer: vk::CommandBuffer,
    stage_count: u32,
    p_stages: *const vk::ShaderStageFlags,
    p_shaders: *const vk::ShaderEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindShadersEXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetScreenBufferPropertiesQNX.html>"]
extern "C" fn vkGetScreenBufferPropertiesQNX(
    device: vk::Device,
    buffer: *const vk::_screen_buffer,
    p_properties: *mut vk::ScreenBufferPropertiesQNX,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetScreenBufferPropertiesQNX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.html>"]
extern "C" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(
    physical_device: vk::PhysicalDevice,
    p_property_count: *mut u32,
    p_properties: *mut vk::CooperativeMatrixPropertiesKHR,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetExecutionGraphPipelineScratchSizeAMDX.html>"]
extern "C" fn vkGetExecutionGraphPipelineScratchSizeAMDX(
    device: vk::Device,
    execution_graph: vk::Pipeline,
    p_size_info: *mut vk::ExecutionGraphPipelineScratchSizeAMDX,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetExecutionGraphPipelineScratchSizeAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetExecutionGraphPipelineNodeIndexAMDX.html>"]
extern "C" fn vkGetExecutionGraphPipelineNodeIndexAMDX(
    device: vk::Device,
    execution_graph: vk::Pipeline,
    p_node_info: *const vk::PipelineShaderStageNodeCreateInfoAMDX,
    p_node_index: *mut u32,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetExecutionGraphPipelineNodeIndexAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateExecutionGraphPipelinesAMDX.html>"]
extern "C" fn vkCreateExecutionGraphPipelinesAMDX(
    device: vk::Device,
    pipeline_cache: vk::PipelineCache,
    create_info_count: u32,
    p_create_infos: *const vk::ExecutionGraphPipelineCreateInfoAMDX,
    p_allocator: *const vk::AllocationCallbacks,
    p_pipelines: *mut vk::Pipeline,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCreateExecutionGraphPipelinesAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdInitializeGraphScratchMemoryAMDX.html>"]
extern "C" fn vkCmdInitializeGraphScratchMemoryAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdInitializeGraphScratchMemoryAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphAMDX.html>"]
extern "C" fn vkCmdDispatchGraphAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
    p_count_info: *const vk::DispatchGraphCountInfoAMDX,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDispatchGraphAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphIndirectAMDX.html>"]
extern "C" fn vkCmdDispatchGraphIndirectAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
    p_count_info: *const vk::DispatchGraphCountInfoAMDX,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDispatchGraphIndirectAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphIndirectCountAMDX.html>"]
extern "C" fn vkCmdDispatchGraphIndirectCountAMDX(
    command_buffer: vk::CommandBuffer,
    scratch: vk::DeviceAddress,
    count_info: vk::DeviceAddress,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdDispatchGraphIndirectCountAMDX.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorSets2KHR.html>"]
extern "C" fn vkCmdBindDescriptorSets2KHR(
    command_buffer: vk::CommandBuffer,
    p_bind_descriptor_sets_info: *const vk::BindDescriptorSetsInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindDescriptorSets2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants2KHR.html>"]
extern "C" fn vkCmdPushConstants2KHR(
    command_buffer: vk::CommandBuffer,
    p_push_constants_info: *const vk::PushConstantsInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPushConstants2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSet2KHR.html>"]
extern "C" fn vkCmdPushDescriptorSet2KHR(
    command_buffer: vk::CommandBuffer,
    p_push_descriptor_set_info: *const vk::PushDescriptorSetInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPushDescriptorSet2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetWithTemplate2KHR.html>"]
extern "C" fn vkCmdPushDescriptorSetWithTemplate2KHR(
    command_buffer: vk::CommandBuffer,
    p_push_descriptor_set_with_template_info: *const vk::PushDescriptorSetWithTemplateInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdPushDescriptorSetWithTemplate2KHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDescriptorBufferOffsets2EXT.html>"]
extern "C" fn vkCmdSetDescriptorBufferOffsets2EXT(
    command_buffer: vk::CommandBuffer,
    p_set_descriptor_buffer_offsets_info: *const vk::SetDescriptorBufferOffsetsInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetDescriptorBufferOffsets2EXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.html>"]
extern "C" fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(
    command_buffer: vk::CommandBuffer,
    p_bind_descriptor_buffer_embedded_samplers_info: *const vk::BindDescriptorBufferEmbeddedSamplersInfoEXT,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLatencySleepModeNV.html>"]
extern "C" fn vkSetLatencySleepModeNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_sleep_mode_info: *const vk::LatencySleepModeInfoNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetLatencySleepModeNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkLatencySleepNV.html>"]
extern "C" fn vkLatencySleepNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_sleep_info: *const vk::LatencySleepInfoNV,
) -> vk::Result {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkLatencySleepNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLatencyMarkerNV.html>"]
extern "C" fn vkSetLatencyMarkerNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_latency_marker_info: *const vk::SetLatencyMarkerInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkSetLatencyMarkerNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetLatencyTimingsNV.html>"]
extern "C" fn vkGetLatencyTimingsNV(
    device: vk::Device,
    swapchain: vk::SwapchainKHR,
    p_latency_marker_info: *mut vk::GetLatencyMarkerInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkGetLatencyTimingsNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueNotifyOutOfBandNV.html>"]
extern "C" fn vkQueueNotifyOutOfBandNV(
    queue: vk::Queue,
    p_queue_type_info: *const vk::OutOfBandQueueTypeInfoNV,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkQueueNotifyOutOfBandNV.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRenderingAttachmentLocationsKHR.html>"]
extern "C" fn vkCmdSetRenderingAttachmentLocationsKHR(
    command_buffer: vk::CommandBuffer,
    p_location_info: *const vk::RenderingAttachmentLocationInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRenderingAttachmentLocationsKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRenderingInputAttachmentIndicesKHR.html>"]
extern "C" fn vkCmdSetRenderingInputAttachmentIndicesKHR(
    command_buffer: vk::CommandBuffer,
    p_location_info: *const vk::RenderingInputAttachmentIndexInfoKHR,
) {
    std::fs::write("C:\\Users\\Vixen\\Desktop\\wie-logs\\vkCmdSetRenderingInputAttachmentIndicesKHR.txt", "whoa").unwrap();
    std::thread::sleep(std::time::Duration::from_millis(1000));
    unimplemented!();
}
