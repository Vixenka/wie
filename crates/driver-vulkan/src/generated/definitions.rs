//! THIS FILE IS GENERATED BY TOOL, DO NOT MODIFY.

use ash::vk;
use wie_driver_common_vulkan::{generated::vulkan_types::*, generated::vulkan_pfn_functions::*, *};
use std::ffi::{c_char, c_void};
use wie_transport_guest::new_packet;

pub(crate) fn get_function_address(name: &str) -> *const c_void {
    match name {
        "vkCreateInstance" => vkCreateInstance as *const c_void,
        "vkDestroyInstance" => vkDestroyInstance as *const c_void,
        "vkEnumeratePhysicalDevices" => vkEnumeratePhysicalDevices as *const c_void,
        "vkGetDeviceProcAddr" => vkGetDeviceProcAddr as *const c_void,
        "vkGetInstanceProcAddr" => vkGetInstanceProcAddr as *const c_void,
        "vkGetPhysicalDeviceProperties" => vkGetPhysicalDeviceProperties as *const c_void,
        "vkGetPhysicalDeviceQueueFamilyProperties" => vkGetPhysicalDeviceQueueFamilyProperties as *const c_void,
        "vkGetPhysicalDeviceMemoryProperties" => vkGetPhysicalDeviceMemoryProperties as *const c_void,
        "vkGetPhysicalDeviceFeatures" => vkGetPhysicalDeviceFeatures as *const c_void,
        "vkGetPhysicalDeviceFormatProperties" => vkGetPhysicalDeviceFormatProperties as *const c_void,
        "vkGetPhysicalDeviceImageFormatProperties" => vkGetPhysicalDeviceImageFormatProperties as *const c_void,
        "vkCreateDevice" => vkCreateDevice as *const c_void,
        "vkDestroyDevice" => vkDestroyDevice as *const c_void,
        "vkEnumerateInstanceVersion" => vkEnumerateInstanceVersion as *const c_void,
        "vkEnumerateInstanceLayerProperties" => vkEnumerateInstanceLayerProperties as *const c_void,
        "vkEnumerateInstanceExtensionProperties" => vkEnumerateInstanceExtensionProperties as *const c_void,
        "vkEnumerateDeviceLayerProperties" => vkEnumerateDeviceLayerProperties as *const c_void,
        "vkEnumerateDeviceExtensionProperties" => vkEnumerateDeviceExtensionProperties as *const c_void,
        "vkGetDeviceQueue" => vkGetDeviceQueue as *const c_void,
        "vkQueueSubmit" => vkQueueSubmit as *const c_void,
        "vkQueueWaitIdle" => vkQueueWaitIdle as *const c_void,
        "vkDeviceWaitIdle" => vkDeviceWaitIdle as *const c_void,
        "vkAllocateMemory" => vkAllocateMemory as *const c_void,
        "vkFreeMemory" => vkFreeMemory as *const c_void,
        "vkMapMemory" => vkMapMemory as *const c_void,
        "vkUnmapMemory" => vkUnmapMemory as *const c_void,
        "vkFlushMappedMemoryRanges" => vkFlushMappedMemoryRanges as *const c_void,
        "vkInvalidateMappedMemoryRanges" => vkInvalidateMappedMemoryRanges as *const c_void,
        "vkGetDeviceMemoryCommitment" => vkGetDeviceMemoryCommitment as *const c_void,
        "vkGetBufferMemoryRequirements" => vkGetBufferMemoryRequirements as *const c_void,
        "vkBindBufferMemory" => vkBindBufferMemory as *const c_void,
        "vkGetImageMemoryRequirements" => vkGetImageMemoryRequirements as *const c_void,
        "vkBindImageMemory" => vkBindImageMemory as *const c_void,
        "vkGetImageSparseMemoryRequirements" => vkGetImageSparseMemoryRequirements as *const c_void,
        "vkGetPhysicalDeviceSparseImageFormatProperties" => vkGetPhysicalDeviceSparseImageFormatProperties as *const c_void,
        "vkQueueBindSparse" => vkQueueBindSparse as *const c_void,
        "vkCreateFence" => vkCreateFence as *const c_void,
        "vkDestroyFence" => vkDestroyFence as *const c_void,
        "vkResetFences" => vkResetFences as *const c_void,
        "vkGetFenceStatus" => vkGetFenceStatus as *const c_void,
        "vkWaitForFences" => vkWaitForFences as *const c_void,
        "vkCreateSemaphore" => vkCreateSemaphore as *const c_void,
        "vkDestroySemaphore" => vkDestroySemaphore as *const c_void,
        "vkCreateEvent" => vkCreateEvent as *const c_void,
        "vkDestroyEvent" => vkDestroyEvent as *const c_void,
        "vkGetEventStatus" => vkGetEventStatus as *const c_void,
        "vkSetEvent" => vkSetEvent as *const c_void,
        "vkResetEvent" => vkResetEvent as *const c_void,
        "vkCreateQueryPool" => vkCreateQueryPool as *const c_void,
        "vkDestroyQueryPool" => vkDestroyQueryPool as *const c_void,
        "vkGetQueryPoolResults" => vkGetQueryPoolResults as *const c_void,
        "vkResetQueryPool" => vkResetQueryPool as *const c_void,
        "vkCreateBuffer" => vkCreateBuffer as *const c_void,
        "vkDestroyBuffer" => vkDestroyBuffer as *const c_void,
        "vkCreateBufferView" => vkCreateBufferView as *const c_void,
        "vkDestroyBufferView" => vkDestroyBufferView as *const c_void,
        "vkCreateImage" => vkCreateImage as *const c_void,
        "vkDestroyImage" => vkDestroyImage as *const c_void,
        "vkGetImageSubresourceLayout" => vkGetImageSubresourceLayout as *const c_void,
        "vkCreateImageView" => vkCreateImageView as *const c_void,
        "vkDestroyImageView" => vkDestroyImageView as *const c_void,
        "vkCreateShaderModule" => vkCreateShaderModule as *const c_void,
        "vkDestroyShaderModule" => vkDestroyShaderModule as *const c_void,
        "vkCreatePipelineCache" => vkCreatePipelineCache as *const c_void,
        "vkDestroyPipelineCache" => vkDestroyPipelineCache as *const c_void,
        "vkGetPipelineCacheData" => vkGetPipelineCacheData as *const c_void,
        "vkMergePipelineCaches" => vkMergePipelineCaches as *const c_void,
        "vkCreateGraphicsPipelines" => vkCreateGraphicsPipelines as *const c_void,
        "vkCreateComputePipelines" => vkCreateComputePipelines as *const c_void,
        "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" => vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI as *const c_void,
        "vkDestroyPipeline" => vkDestroyPipeline as *const c_void,
        "vkCreatePipelineLayout" => vkCreatePipelineLayout as *const c_void,
        "vkDestroyPipelineLayout" => vkDestroyPipelineLayout as *const c_void,
        "vkCreateSampler" => vkCreateSampler as *const c_void,
        "vkDestroySampler" => vkDestroySampler as *const c_void,
        "vkCreateDescriptorSetLayout" => vkCreateDescriptorSetLayout as *const c_void,
        "vkDestroyDescriptorSetLayout" => vkDestroyDescriptorSetLayout as *const c_void,
        "vkCreateDescriptorPool" => vkCreateDescriptorPool as *const c_void,
        "vkDestroyDescriptorPool" => vkDestroyDescriptorPool as *const c_void,
        "vkResetDescriptorPool" => vkResetDescriptorPool as *const c_void,
        "vkAllocateDescriptorSets" => vkAllocateDescriptorSets as *const c_void,
        "vkFreeDescriptorSets" => vkFreeDescriptorSets as *const c_void,
        "vkUpdateDescriptorSets" => vkUpdateDescriptorSets as *const c_void,
        "vkCreateFramebuffer" => vkCreateFramebuffer as *const c_void,
        "vkDestroyFramebuffer" => vkDestroyFramebuffer as *const c_void,
        "vkCreateRenderPass" => vkCreateRenderPass as *const c_void,
        "vkDestroyRenderPass" => vkDestroyRenderPass as *const c_void,
        "vkGetRenderAreaGranularity" => vkGetRenderAreaGranularity as *const c_void,
        "vkGetRenderingAreaGranularityKHR" => vkGetRenderingAreaGranularityKHR as *const c_void,
        "vkCreateCommandPool" => vkCreateCommandPool as *const c_void,
        "vkDestroyCommandPool" => vkDestroyCommandPool as *const c_void,
        "vkResetCommandPool" => vkResetCommandPool as *const c_void,
        "vkAllocateCommandBuffers" => vkAllocateCommandBuffers as *const c_void,
        "vkFreeCommandBuffers" => vkFreeCommandBuffers as *const c_void,
        "vkBeginCommandBuffer" => vkBeginCommandBuffer as *const c_void,
        "vkEndCommandBuffer" => vkEndCommandBuffer as *const c_void,
        "vkResetCommandBuffer" => vkResetCommandBuffer as *const c_void,
        "vkCmdBindPipeline" => vkCmdBindPipeline as *const c_void,
        "vkCmdSetAttachmentFeedbackLoopEnableEXT" => vkCmdSetAttachmentFeedbackLoopEnableEXT as *const c_void,
        "vkCmdSetViewport" => vkCmdSetViewport as *const c_void,
        "vkCmdSetScissor" => vkCmdSetScissor as *const c_void,
        "vkCmdSetLineWidth" => vkCmdSetLineWidth as *const c_void,
        "vkCmdSetDepthBias" => vkCmdSetDepthBias as *const c_void,
        "vkCmdSetBlendConstants" => vkCmdSetBlendConstants as *const c_void,
        "vkCmdSetDepthBounds" => vkCmdSetDepthBounds as *const c_void,
        "vkCmdSetStencilCompareMask" => vkCmdSetStencilCompareMask as *const c_void,
        "vkCmdSetStencilWriteMask" => vkCmdSetStencilWriteMask as *const c_void,
        "vkCmdSetStencilReference" => vkCmdSetStencilReference as *const c_void,
        "vkCmdBindDescriptorSets" => vkCmdBindDescriptorSets as *const c_void,
        "vkCmdBindIndexBuffer" => vkCmdBindIndexBuffer as *const c_void,
        "vkCmdBindVertexBuffers" => vkCmdBindVertexBuffers as *const c_void,
        "vkCmdDraw" => vkCmdDraw as *const c_void,
        "vkCmdDrawIndexed" => vkCmdDrawIndexed as *const c_void,
        "vkCmdDrawMultiEXT" => vkCmdDrawMultiEXT as *const c_void,
        "vkCmdDrawMultiIndexedEXT" => vkCmdDrawMultiIndexedEXT as *const c_void,
        "vkCmdDrawIndirect" => vkCmdDrawIndirect as *const c_void,
        "vkCmdDrawIndexedIndirect" => vkCmdDrawIndexedIndirect as *const c_void,
        "vkCmdDispatch" => vkCmdDispatch as *const c_void,
        "vkCmdDispatchIndirect" => vkCmdDispatchIndirect as *const c_void,
        "vkCmdSubpassShadingHUAWEI" => vkCmdSubpassShadingHUAWEI as *const c_void,
        "vkCmdDrawClusterHUAWEI" => vkCmdDrawClusterHUAWEI as *const c_void,
        "vkCmdDrawClusterIndirectHUAWEI" => vkCmdDrawClusterIndirectHUAWEI as *const c_void,
        "vkCmdUpdatePipelineIndirectBufferNV" => vkCmdUpdatePipelineIndirectBufferNV as *const c_void,
        "vkCmdCopyBuffer" => vkCmdCopyBuffer as *const c_void,
        "vkCmdCopyImage" => vkCmdCopyImage as *const c_void,
        "vkCmdBlitImage" => vkCmdBlitImage as *const c_void,
        "vkCmdCopyBufferToImage" => vkCmdCopyBufferToImage as *const c_void,
        "vkCmdCopyImageToBuffer" => vkCmdCopyImageToBuffer as *const c_void,
        "vkCmdCopyMemoryIndirectNV" => vkCmdCopyMemoryIndirectNV as *const c_void,
        "vkCmdCopyMemoryToImageIndirectNV" => vkCmdCopyMemoryToImageIndirectNV as *const c_void,
        "vkCmdUpdateBuffer" => vkCmdUpdateBuffer as *const c_void,
        "vkCmdFillBuffer" => vkCmdFillBuffer as *const c_void,
        "vkCmdClearColorImage" => vkCmdClearColorImage as *const c_void,
        "vkCmdClearDepthStencilImage" => vkCmdClearDepthStencilImage as *const c_void,
        "vkCmdClearAttachments" => vkCmdClearAttachments as *const c_void,
        "vkCmdResolveImage" => vkCmdResolveImage as *const c_void,
        "vkCmdSetEvent" => vkCmdSetEvent as *const c_void,
        "vkCmdResetEvent" => vkCmdResetEvent as *const c_void,
        "vkCmdWaitEvents" => vkCmdWaitEvents as *const c_void,
        "vkCmdPipelineBarrier" => vkCmdPipelineBarrier as *const c_void,
        "vkCmdBeginQuery" => vkCmdBeginQuery as *const c_void,
        "vkCmdEndQuery" => vkCmdEndQuery as *const c_void,
        "vkCmdBeginConditionalRenderingEXT" => vkCmdBeginConditionalRenderingEXT as *const c_void,
        "vkCmdEndConditionalRenderingEXT" => vkCmdEndConditionalRenderingEXT as *const c_void,
        "vkCmdResetQueryPool" => vkCmdResetQueryPool as *const c_void,
        "vkCmdWriteTimestamp" => vkCmdWriteTimestamp as *const c_void,
        "vkCmdCopyQueryPoolResults" => vkCmdCopyQueryPoolResults as *const c_void,
        "vkCmdPushConstants" => vkCmdPushConstants as *const c_void,
        "vkCmdBeginRenderPass" => vkCmdBeginRenderPass as *const c_void,
        "vkCmdNextSubpass" => vkCmdNextSubpass as *const c_void,
        "vkCmdEndRenderPass" => vkCmdEndRenderPass as *const c_void,
        "vkCmdExecuteCommands" => vkCmdExecuteCommands as *const c_void,
        "vkCreateAndroidSurfaceKHR" => vkCreateAndroidSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceDisplayPropertiesKHR" => vkGetPhysicalDeviceDisplayPropertiesKHR as *const c_void,
        "vkGetPhysicalDeviceDisplayPlanePropertiesKHR" => vkGetPhysicalDeviceDisplayPlanePropertiesKHR as *const c_void,
        "vkGetDisplayPlaneSupportedDisplaysKHR" => vkGetDisplayPlaneSupportedDisplaysKHR as *const c_void,
        "vkGetDisplayModePropertiesKHR" => vkGetDisplayModePropertiesKHR as *const c_void,
        "vkCreateDisplayModeKHR" => vkCreateDisplayModeKHR as *const c_void,
        "vkGetDisplayPlaneCapabilitiesKHR" => vkGetDisplayPlaneCapabilitiesKHR as *const c_void,
        "vkCreateDisplayPlaneSurfaceKHR" => vkCreateDisplayPlaneSurfaceKHR as *const c_void,
        "vkCreateSharedSwapchainsKHR" => vkCreateSharedSwapchainsKHR as *const c_void,
        "vkDestroySurfaceKHR" => vkDestroySurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceSurfaceSupportKHR" => vkGetPhysicalDeviceSurfaceSupportKHR as *const c_void,
        "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" => vkGetPhysicalDeviceSurfaceCapabilitiesKHR as *const c_void,
        "vkGetPhysicalDeviceSurfaceFormatsKHR" => vkGetPhysicalDeviceSurfaceFormatsKHR as *const c_void,
        "vkGetPhysicalDeviceSurfacePresentModesKHR" => vkGetPhysicalDeviceSurfacePresentModesKHR as *const c_void,
        "vkCreateSwapchainKHR" => vkCreateSwapchainKHR as *const c_void,
        "vkDestroySwapchainKHR" => vkDestroySwapchainKHR as *const c_void,
        "vkGetSwapchainImagesKHR" => vkGetSwapchainImagesKHR as *const c_void,
        "vkAcquireNextImageKHR" => vkAcquireNextImageKHR as *const c_void,
        "vkQueuePresentKHR" => vkQueuePresentKHR as *const c_void,
        "vkCreateViSurfaceNN" => vkCreateViSurfaceNN as *const c_void,
        "vkCreateWaylandSurfaceKHR" => vkCreateWaylandSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceWaylandPresentationSupportKHR" => vkGetPhysicalDeviceWaylandPresentationSupportKHR as *const c_void,
        "vkCreateWin32SurfaceKHR" => vkCreateWin32SurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceWin32PresentationSupportKHR" => vkGetPhysicalDeviceWin32PresentationSupportKHR as *const c_void,
        "vkCreateXlibSurfaceKHR" => vkCreateXlibSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceXlibPresentationSupportKHR" => vkGetPhysicalDeviceXlibPresentationSupportKHR as *const c_void,
        "vkCreateXcbSurfaceKHR" => vkCreateXcbSurfaceKHR as *const c_void,
        "vkGetPhysicalDeviceXcbPresentationSupportKHR" => vkGetPhysicalDeviceXcbPresentationSupportKHR as *const c_void,
        "vkCreateDirectFBSurfaceEXT" => vkCreateDirectFBSurfaceEXT as *const c_void,
        "vkGetPhysicalDeviceDirectFBPresentationSupportEXT" => vkGetPhysicalDeviceDirectFBPresentationSupportEXT as *const c_void,
        "vkCreateImagePipeSurfaceFUCHSIA" => vkCreateImagePipeSurfaceFUCHSIA as *const c_void,
        "vkCreateStreamDescriptorSurfaceGGP" => vkCreateStreamDescriptorSurfaceGGP as *const c_void,
        "vkCreateScreenSurfaceQNX" => vkCreateScreenSurfaceQNX as *const c_void,
        "vkGetPhysicalDeviceScreenPresentationSupportQNX" => vkGetPhysicalDeviceScreenPresentationSupportQNX as *const c_void,
        "vkCreateDebugReportCallbackEXT" => vkCreateDebugReportCallbackEXT as *const c_void,
        "vkDestroyDebugReportCallbackEXT" => vkDestroyDebugReportCallbackEXT as *const c_void,
        "vkDebugReportMessageEXT" => vkDebugReportMessageEXT as *const c_void,
        "vkDebugMarkerSetObjectNameEXT" => vkDebugMarkerSetObjectNameEXT as *const c_void,
        "vkDebugMarkerSetObjectTagEXT" => vkDebugMarkerSetObjectTagEXT as *const c_void,
        "vkCmdDebugMarkerBeginEXT" => vkCmdDebugMarkerBeginEXT as *const c_void,
        "vkCmdDebugMarkerEndEXT" => vkCmdDebugMarkerEndEXT as *const c_void,
        "vkCmdDebugMarkerInsertEXT" => vkCmdDebugMarkerInsertEXT as *const c_void,
        "vkGetPhysicalDeviceExternalImageFormatPropertiesNV" => vkGetPhysicalDeviceExternalImageFormatPropertiesNV as *const c_void,
        "vkGetMemoryWin32HandleNV" => vkGetMemoryWin32HandleNV as *const c_void,
        "vkCmdExecuteGeneratedCommandsNV" => vkCmdExecuteGeneratedCommandsNV as *const c_void,
        "vkCmdPreprocessGeneratedCommandsNV" => vkCmdPreprocessGeneratedCommandsNV as *const c_void,
        "vkCmdBindPipelineShaderGroupNV" => vkCmdBindPipelineShaderGroupNV as *const c_void,
        "vkGetGeneratedCommandsMemoryRequirementsNV" => vkGetGeneratedCommandsMemoryRequirementsNV as *const c_void,
        "vkCreateIndirectCommandsLayoutNV" => vkCreateIndirectCommandsLayoutNV as *const c_void,
        "vkDestroyIndirectCommandsLayoutNV" => vkDestroyIndirectCommandsLayoutNV as *const c_void,
        "vkGetPhysicalDeviceFeatures2" => vkGetPhysicalDeviceFeatures2 as *const c_void,
        "vkGetPhysicalDeviceProperties2" => vkGetPhysicalDeviceProperties2 as *const c_void,
        "vkGetPhysicalDeviceFormatProperties2" => vkGetPhysicalDeviceFormatProperties2 as *const c_void,
        "vkGetPhysicalDeviceImageFormatProperties2" => vkGetPhysicalDeviceImageFormatProperties2 as *const c_void,
        "vkGetPhysicalDeviceQueueFamilyProperties2" => vkGetPhysicalDeviceQueueFamilyProperties2 as *const c_void,
        "vkGetPhysicalDeviceMemoryProperties2" => vkGetPhysicalDeviceMemoryProperties2 as *const c_void,
        "vkGetPhysicalDeviceSparseImageFormatProperties2" => vkGetPhysicalDeviceSparseImageFormatProperties2 as *const c_void,
        "vkCmdPushDescriptorSetKHR" => vkCmdPushDescriptorSetKHR as *const c_void,
        "vkTrimCommandPool" => vkTrimCommandPool as *const c_void,
        "vkGetPhysicalDeviceExternalBufferProperties" => vkGetPhysicalDeviceExternalBufferProperties as *const c_void,
        "vkGetMemoryWin32HandleKHR" => vkGetMemoryWin32HandleKHR as *const c_void,
        "vkGetMemoryWin32HandlePropertiesKHR" => vkGetMemoryWin32HandlePropertiesKHR as *const c_void,
        "vkGetMemoryFdKHR" => vkGetMemoryFdKHR as *const c_void,
        "vkGetMemoryFdPropertiesKHR" => vkGetMemoryFdPropertiesKHR as *const c_void,
        "vkGetMemoryZirconHandleFUCHSIA" => vkGetMemoryZirconHandleFUCHSIA as *const c_void,
        "vkGetMemoryZirconHandlePropertiesFUCHSIA" => vkGetMemoryZirconHandlePropertiesFUCHSIA as *const c_void,
        "vkGetMemoryRemoteAddressNV" => vkGetMemoryRemoteAddressNV as *const c_void,
        "vkGetPhysicalDeviceExternalSemaphoreProperties" => vkGetPhysicalDeviceExternalSemaphoreProperties as *const c_void,
        "vkGetSemaphoreWin32HandleKHR" => vkGetSemaphoreWin32HandleKHR as *const c_void,
        "vkImportSemaphoreWin32HandleKHR" => vkImportSemaphoreWin32HandleKHR as *const c_void,
        "vkGetSemaphoreFdKHR" => vkGetSemaphoreFdKHR as *const c_void,
        "vkImportSemaphoreFdKHR" => vkImportSemaphoreFdKHR as *const c_void,
        "vkGetSemaphoreZirconHandleFUCHSIA" => vkGetSemaphoreZirconHandleFUCHSIA as *const c_void,
        "vkImportSemaphoreZirconHandleFUCHSIA" => vkImportSemaphoreZirconHandleFUCHSIA as *const c_void,
        "vkGetPhysicalDeviceExternalFenceProperties" => vkGetPhysicalDeviceExternalFenceProperties as *const c_void,
        "vkGetFenceWin32HandleKHR" => vkGetFenceWin32HandleKHR as *const c_void,
        "vkImportFenceWin32HandleKHR" => vkImportFenceWin32HandleKHR as *const c_void,
        "vkGetFenceFdKHR" => vkGetFenceFdKHR as *const c_void,
        "vkImportFenceFdKHR" => vkImportFenceFdKHR as *const c_void,
        "vkReleaseDisplayEXT" => vkReleaseDisplayEXT as *const c_void,
        "vkAcquireXlibDisplayEXT" => vkAcquireXlibDisplayEXT as *const c_void,
        "vkGetRandROutputDisplayEXT" => vkGetRandROutputDisplayEXT as *const c_void,
        "vkAcquireWinrtDisplayNV" => vkAcquireWinrtDisplayNV as *const c_void,
        "vkGetWinrtDisplayNV" => vkGetWinrtDisplayNV as *const c_void,
        "vkDisplayPowerControlEXT" => vkDisplayPowerControlEXT as *const c_void,
        "vkRegisterDeviceEventEXT" => vkRegisterDeviceEventEXT as *const c_void,
        "vkRegisterDisplayEventEXT" => vkRegisterDisplayEventEXT as *const c_void,
        "vkGetSwapchainCounterEXT" => vkGetSwapchainCounterEXT as *const c_void,
        "vkGetPhysicalDeviceSurfaceCapabilities2EXT" => vkGetPhysicalDeviceSurfaceCapabilities2EXT as *const c_void,
        "vkEnumeratePhysicalDeviceGroups" => vkEnumeratePhysicalDeviceGroups as *const c_void,
        "vkGetDeviceGroupPeerMemoryFeatures" => vkGetDeviceGroupPeerMemoryFeatures as *const c_void,
        "vkBindBufferMemory2" => vkBindBufferMemory2 as *const c_void,
        "vkBindImageMemory2" => vkBindImageMemory2 as *const c_void,
        "vkCmdSetDeviceMask" => vkCmdSetDeviceMask as *const c_void,
        "vkGetDeviceGroupPresentCapabilitiesKHR" => vkGetDeviceGroupPresentCapabilitiesKHR as *const c_void,
        "vkGetDeviceGroupSurfacePresentModesKHR" => vkGetDeviceGroupSurfacePresentModesKHR as *const c_void,
        "vkAcquireNextImage2KHR" => vkAcquireNextImage2KHR as *const c_void,
        "vkCmdDispatchBase" => vkCmdDispatchBase as *const c_void,
        "vkGetPhysicalDevicePresentRectanglesKHR" => vkGetPhysicalDevicePresentRectanglesKHR as *const c_void,
        "vkCreateDescriptorUpdateTemplate" => vkCreateDescriptorUpdateTemplate as *const c_void,
        "vkDestroyDescriptorUpdateTemplate" => vkDestroyDescriptorUpdateTemplate as *const c_void,
        "vkUpdateDescriptorSetWithTemplate" => vkUpdateDescriptorSetWithTemplate as *const c_void,
        "vkCmdPushDescriptorSetWithTemplateKHR" => vkCmdPushDescriptorSetWithTemplateKHR as *const c_void,
        "vkSetHdrMetadataEXT" => vkSetHdrMetadataEXT as *const c_void,
        "vkGetSwapchainStatusKHR" => vkGetSwapchainStatusKHR as *const c_void,
        "vkGetRefreshCycleDurationGOOGLE" => vkGetRefreshCycleDurationGOOGLE as *const c_void,
        "vkGetPastPresentationTimingGOOGLE" => vkGetPastPresentationTimingGOOGLE as *const c_void,
        "vkCreateIOSSurfaceMVK" => vkCreateIOSSurfaceMVK as *const c_void,
        "vkCreateMacOSSurfaceMVK" => vkCreateMacOSSurfaceMVK as *const c_void,
        "vkCreateMetalSurfaceEXT" => vkCreateMetalSurfaceEXT as *const c_void,
        "vkCmdSetViewportWScalingNV" => vkCmdSetViewportWScalingNV as *const c_void,
        "vkCmdSetDiscardRectangleEXT" => vkCmdSetDiscardRectangleEXT as *const c_void,
        "vkCmdSetDiscardRectangleEnableEXT" => vkCmdSetDiscardRectangleEnableEXT as *const c_void,
        "vkCmdSetDiscardRectangleModeEXT" => vkCmdSetDiscardRectangleModeEXT as *const c_void,
        "vkCmdSetSampleLocationsEXT" => vkCmdSetSampleLocationsEXT as *const c_void,
        "vkGetPhysicalDeviceMultisamplePropertiesEXT" => vkGetPhysicalDeviceMultisamplePropertiesEXT as *const c_void,
        "vkGetPhysicalDeviceSurfaceCapabilities2KHR" => vkGetPhysicalDeviceSurfaceCapabilities2KHR as *const c_void,
        "vkGetPhysicalDeviceSurfaceFormats2KHR" => vkGetPhysicalDeviceSurfaceFormats2KHR as *const c_void,
        "vkGetPhysicalDeviceDisplayProperties2KHR" => vkGetPhysicalDeviceDisplayProperties2KHR as *const c_void,
        "vkGetPhysicalDeviceDisplayPlaneProperties2KHR" => vkGetPhysicalDeviceDisplayPlaneProperties2KHR as *const c_void,
        "vkGetDisplayModeProperties2KHR" => vkGetDisplayModeProperties2KHR as *const c_void,
        "vkGetDisplayPlaneCapabilities2KHR" => vkGetDisplayPlaneCapabilities2KHR as *const c_void,
        "vkGetBufferMemoryRequirements2" => vkGetBufferMemoryRequirements2 as *const c_void,
        "vkGetImageMemoryRequirements2" => vkGetImageMemoryRequirements2 as *const c_void,
        "vkGetImageSparseMemoryRequirements2" => vkGetImageSparseMemoryRequirements2 as *const c_void,
        "vkGetDeviceBufferMemoryRequirements" => vkGetDeviceBufferMemoryRequirements as *const c_void,
        "vkGetDeviceImageMemoryRequirements" => vkGetDeviceImageMemoryRequirements as *const c_void,
        "vkGetDeviceImageSparseMemoryRequirements" => vkGetDeviceImageSparseMemoryRequirements as *const c_void,
        "vkCreateSamplerYcbcrConversion" => vkCreateSamplerYcbcrConversion as *const c_void,
        "vkDestroySamplerYcbcrConversion" => vkDestroySamplerYcbcrConversion as *const c_void,
        "vkGetDeviceQueue2" => vkGetDeviceQueue2 as *const c_void,
        "vkCreateValidationCacheEXT" => vkCreateValidationCacheEXT as *const c_void,
        "vkDestroyValidationCacheEXT" => vkDestroyValidationCacheEXT as *const c_void,
        "vkGetValidationCacheDataEXT" => vkGetValidationCacheDataEXT as *const c_void,
        "vkMergeValidationCachesEXT" => vkMergeValidationCachesEXT as *const c_void,
        "vkGetDescriptorSetLayoutSupport" => vkGetDescriptorSetLayoutSupport as *const c_void,
        "vkGetSwapchainGrallocUsageANDROID" => vkGetSwapchainGrallocUsageANDROID as *const c_void,
        "vkGetSwapchainGrallocUsage2ANDROID" => vkGetSwapchainGrallocUsage2ANDROID as *const c_void,
        "vkAcquireImageANDROID" => vkAcquireImageANDROID as *const c_void,
        "vkQueueSignalReleaseImageANDROID" => vkQueueSignalReleaseImageANDROID as *const c_void,
        "vkGetShaderInfoAMD" => vkGetShaderInfoAMD as *const c_void,
        "vkSetLocalDimmingAMD" => vkSetLocalDimmingAMD as *const c_void,
        "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR" => vkGetPhysicalDeviceCalibrateableTimeDomainsKHR as *const c_void,
        "vkGetCalibratedTimestampsKHR" => vkGetCalibratedTimestampsKHR as *const c_void,
        "vkSetDebugUtilsObjectNameEXT" => vkSetDebugUtilsObjectNameEXT as *const c_void,
        "vkSetDebugUtilsObjectTagEXT" => vkSetDebugUtilsObjectTagEXT as *const c_void,
        "vkQueueBeginDebugUtilsLabelEXT" => vkQueueBeginDebugUtilsLabelEXT as *const c_void,
        "vkQueueEndDebugUtilsLabelEXT" => vkQueueEndDebugUtilsLabelEXT as *const c_void,
        "vkQueueInsertDebugUtilsLabelEXT" => vkQueueInsertDebugUtilsLabelEXT as *const c_void,
        "vkCmdBeginDebugUtilsLabelEXT" => vkCmdBeginDebugUtilsLabelEXT as *const c_void,
        "vkCmdEndDebugUtilsLabelEXT" => vkCmdEndDebugUtilsLabelEXT as *const c_void,
        "vkCmdInsertDebugUtilsLabelEXT" => vkCmdInsertDebugUtilsLabelEXT as *const c_void,
        "vkCreateDebugUtilsMessengerEXT" => vkCreateDebugUtilsMessengerEXT as *const c_void,
        "vkDestroyDebugUtilsMessengerEXT" => vkDestroyDebugUtilsMessengerEXT as *const c_void,
        "vkSubmitDebugUtilsMessageEXT" => vkSubmitDebugUtilsMessageEXT as *const c_void,
        "vkGetMemoryHostPointerPropertiesEXT" => vkGetMemoryHostPointerPropertiesEXT as *const c_void,
        "vkCmdWriteBufferMarkerAMD" => vkCmdWriteBufferMarkerAMD as *const c_void,
        "vkCreateRenderPass2" => vkCreateRenderPass2 as *const c_void,
        "vkCmdBeginRenderPass2" => vkCmdBeginRenderPass2 as *const c_void,
        "vkCmdNextSubpass2" => vkCmdNextSubpass2 as *const c_void,
        "vkCmdEndRenderPass2" => vkCmdEndRenderPass2 as *const c_void,
        "vkGetSemaphoreCounterValue" => vkGetSemaphoreCounterValue as *const c_void,
        "vkWaitSemaphores" => vkWaitSemaphores as *const c_void,
        "vkSignalSemaphore" => vkSignalSemaphore as *const c_void,
        "vkGetAndroidHardwareBufferPropertiesANDROID" => vkGetAndroidHardwareBufferPropertiesANDROID as *const c_void,
        "vkGetMemoryAndroidHardwareBufferANDROID" => vkGetMemoryAndroidHardwareBufferANDROID as *const c_void,
        "vkCmdDrawIndirectCount" => vkCmdDrawIndirectCount as *const c_void,
        "vkCmdDrawIndexedIndirectCount" => vkCmdDrawIndexedIndirectCount as *const c_void,
        "vkCmdSetCheckpointNV" => vkCmdSetCheckpointNV as *const c_void,
        "vkGetQueueCheckpointDataNV" => vkGetQueueCheckpointDataNV as *const c_void,
        "vkCmdBindTransformFeedbackBuffersEXT" => vkCmdBindTransformFeedbackBuffersEXT as *const c_void,
        "vkCmdBeginTransformFeedbackEXT" => vkCmdBeginTransformFeedbackEXT as *const c_void,
        "vkCmdEndTransformFeedbackEXT" => vkCmdEndTransformFeedbackEXT as *const c_void,
        "vkCmdBeginQueryIndexedEXT" => vkCmdBeginQueryIndexedEXT as *const c_void,
        "vkCmdEndQueryIndexedEXT" => vkCmdEndQueryIndexedEXT as *const c_void,
        "vkCmdDrawIndirectByteCountEXT" => vkCmdDrawIndirectByteCountEXT as *const c_void,
        "vkCmdSetExclusiveScissorNV" => vkCmdSetExclusiveScissorNV as *const c_void,
        "vkCmdSetExclusiveScissorEnableNV" => vkCmdSetExclusiveScissorEnableNV as *const c_void,
        "vkCmdBindShadingRateImageNV" => vkCmdBindShadingRateImageNV as *const c_void,
        "vkCmdSetViewportShadingRatePaletteNV" => vkCmdSetViewportShadingRatePaletteNV as *const c_void,
        "vkCmdSetCoarseSampleOrderNV" => vkCmdSetCoarseSampleOrderNV as *const c_void,
        "vkCmdDrawMeshTasksNV" => vkCmdDrawMeshTasksNV as *const c_void,
        "vkCmdDrawMeshTasksIndirectNV" => vkCmdDrawMeshTasksIndirectNV as *const c_void,
        "vkCmdDrawMeshTasksIndirectCountNV" => vkCmdDrawMeshTasksIndirectCountNV as *const c_void,
        "vkCmdDrawMeshTasksEXT" => vkCmdDrawMeshTasksEXT as *const c_void,
        "vkCmdDrawMeshTasksIndirectEXT" => vkCmdDrawMeshTasksIndirectEXT as *const c_void,
        "vkCmdDrawMeshTasksIndirectCountEXT" => vkCmdDrawMeshTasksIndirectCountEXT as *const c_void,
        "vkCompileDeferredNV" => vkCompileDeferredNV as *const c_void,
        "vkCreateAccelerationStructureNV" => vkCreateAccelerationStructureNV as *const c_void,
        "vkCmdBindInvocationMaskHUAWEI" => vkCmdBindInvocationMaskHUAWEI as *const c_void,
        "vkDestroyAccelerationStructureKHR" => vkDestroyAccelerationStructureKHR as *const c_void,
        "vkDestroyAccelerationStructureNV" => vkDestroyAccelerationStructureNV as *const c_void,
        "vkGetAccelerationStructureMemoryRequirementsNV" => vkGetAccelerationStructureMemoryRequirementsNV as *const c_void,
        "vkBindAccelerationStructureMemoryNV" => vkBindAccelerationStructureMemoryNV as *const c_void,
        "vkCmdCopyAccelerationStructureNV" => vkCmdCopyAccelerationStructureNV as *const c_void,
        "vkCmdCopyAccelerationStructureKHR" => vkCmdCopyAccelerationStructureKHR as *const c_void,
        "vkCopyAccelerationStructureKHR" => vkCopyAccelerationStructureKHR as *const c_void,
        "vkCmdCopyAccelerationStructureToMemoryKHR" => vkCmdCopyAccelerationStructureToMemoryKHR as *const c_void,
        "vkCopyAccelerationStructureToMemoryKHR" => vkCopyAccelerationStructureToMemoryKHR as *const c_void,
        "vkCmdCopyMemoryToAccelerationStructureKHR" => vkCmdCopyMemoryToAccelerationStructureKHR as *const c_void,
        "vkCopyMemoryToAccelerationStructureKHR" => vkCopyMemoryToAccelerationStructureKHR as *const c_void,
        "vkCmdWriteAccelerationStructuresPropertiesKHR" => vkCmdWriteAccelerationStructuresPropertiesKHR as *const c_void,
        "vkCmdWriteAccelerationStructuresPropertiesNV" => vkCmdWriteAccelerationStructuresPropertiesNV as *const c_void,
        "vkCmdBuildAccelerationStructureNV" => vkCmdBuildAccelerationStructureNV as *const c_void,
        "vkWriteAccelerationStructuresPropertiesKHR" => vkWriteAccelerationStructuresPropertiesKHR as *const c_void,
        "vkCmdTraceRaysKHR" => vkCmdTraceRaysKHR as *const c_void,
        "vkCmdTraceRaysNV" => vkCmdTraceRaysNV as *const c_void,
        "vkGetRayTracingShaderGroupHandlesKHR" => vkGetRayTracingShaderGroupHandlesKHR as *const c_void,
        "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" => vkGetRayTracingCaptureReplayShaderGroupHandlesKHR as *const c_void,
        "vkGetAccelerationStructureHandleNV" => vkGetAccelerationStructureHandleNV as *const c_void,
        "vkCreateRayTracingPipelinesNV" => vkCreateRayTracingPipelinesNV as *const c_void,
        "vkCreateRayTracingPipelinesKHR" => vkCreateRayTracingPipelinesKHR as *const c_void,
        "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV as *const c_void,
        "vkCmdTraceRaysIndirectKHR" => vkCmdTraceRaysIndirectKHR as *const c_void,
        "vkCmdTraceRaysIndirect2KHR" => vkCmdTraceRaysIndirect2KHR as *const c_void,
        "vkGetDeviceAccelerationStructureCompatibilityKHR" => vkGetDeviceAccelerationStructureCompatibilityKHR as *const c_void,
        "vkGetRayTracingShaderGroupStackSizeKHR" => vkGetRayTracingShaderGroupStackSizeKHR as *const c_void,
        "vkCmdSetRayTracingPipelineStackSizeKHR" => vkCmdSetRayTracingPipelineStackSizeKHR as *const c_void,
        "vkGetImageViewHandleNVX" => vkGetImageViewHandleNVX as *const c_void,
        "vkGetImageViewAddressNVX" => vkGetImageViewAddressNVX as *const c_void,
        "vkGetPhysicalDeviceSurfacePresentModes2EXT" => vkGetPhysicalDeviceSurfacePresentModes2EXT as *const c_void,
        "vkGetDeviceGroupSurfacePresentModes2EXT" => vkGetDeviceGroupSurfacePresentModes2EXT as *const c_void,
        "vkAcquireFullScreenExclusiveModeEXT" => vkAcquireFullScreenExclusiveModeEXT as *const c_void,
        "vkReleaseFullScreenExclusiveModeEXT" => vkReleaseFullScreenExclusiveModeEXT as *const c_void,
        "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR as *const c_void,
        "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR as *const c_void,
        "vkAcquireProfilingLockKHR" => vkAcquireProfilingLockKHR as *const c_void,
        "vkReleaseProfilingLockKHR" => vkReleaseProfilingLockKHR as *const c_void,
        "vkGetImageDrmFormatModifierPropertiesEXT" => vkGetImageDrmFormatModifierPropertiesEXT as *const c_void,
        "vkGetBufferOpaqueCaptureAddress" => vkGetBufferOpaqueCaptureAddress as *const c_void,
        "vkGetBufferDeviceAddress" => vkGetBufferDeviceAddress as *const c_void,
        "vkCreateHeadlessSurfaceEXT" => vkCreateHeadlessSurfaceEXT as *const c_void,
        "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV as *const c_void,
        "vkInitializePerformanceApiINTEL" => vkInitializePerformanceApiINTEL as *const c_void,
        "vkUninitializePerformanceApiINTEL" => vkUninitializePerformanceApiINTEL as *const c_void,
        "vkCmdSetPerformanceMarkerINTEL" => vkCmdSetPerformanceMarkerINTEL as *const c_void,
        "vkCmdSetPerformanceStreamMarkerINTEL" => vkCmdSetPerformanceStreamMarkerINTEL as *const c_void,
        "vkCmdSetPerformanceOverrideINTEL" => vkCmdSetPerformanceOverrideINTEL as *const c_void,
        "vkAcquirePerformanceConfigurationINTEL" => vkAcquirePerformanceConfigurationINTEL as *const c_void,
        "vkReleasePerformanceConfigurationINTEL" => vkReleasePerformanceConfigurationINTEL as *const c_void,
        "vkQueueSetPerformanceConfigurationINTEL" => vkQueueSetPerformanceConfigurationINTEL as *const c_void,
        "vkGetPerformanceParameterINTEL" => vkGetPerformanceParameterINTEL as *const c_void,
        "vkGetDeviceMemoryOpaqueCaptureAddress" => vkGetDeviceMemoryOpaqueCaptureAddress as *const c_void,
        "vkGetPipelineExecutablePropertiesKHR" => vkGetPipelineExecutablePropertiesKHR as *const c_void,
        "vkGetPipelineExecutableStatisticsKHR" => vkGetPipelineExecutableStatisticsKHR as *const c_void,
        "vkGetPipelineExecutableInternalRepresentationsKHR" => vkGetPipelineExecutableInternalRepresentationsKHR as *const c_void,
        "vkCmdSetLineStippleKHR" => vkCmdSetLineStippleKHR as *const c_void,
        "vkGetPhysicalDeviceToolProperties" => vkGetPhysicalDeviceToolProperties as *const c_void,
        "vkCreateAccelerationStructureKHR" => vkCreateAccelerationStructureKHR as *const c_void,
        "vkCmdBuildAccelerationStructuresKHR" => vkCmdBuildAccelerationStructuresKHR as *const c_void,
        "vkCmdBuildAccelerationStructuresIndirectKHR" => vkCmdBuildAccelerationStructuresIndirectKHR as *const c_void,
        "vkBuildAccelerationStructuresKHR" => vkBuildAccelerationStructuresKHR as *const c_void,
        "vkGetAccelerationStructureDeviceAddressKHR" => vkGetAccelerationStructureDeviceAddressKHR as *const c_void,
        "vkCreateDeferredOperationKHR" => vkCreateDeferredOperationKHR as *const c_void,
        "vkDestroyDeferredOperationKHR" => vkDestroyDeferredOperationKHR as *const c_void,
        "vkGetDeferredOperationMaxConcurrencyKHR" => vkGetDeferredOperationMaxConcurrencyKHR as *const c_void,
        "vkGetDeferredOperationResultKHR" => vkGetDeferredOperationResultKHR as *const c_void,
        "vkDeferredOperationJoinKHR" => vkDeferredOperationJoinKHR as *const c_void,
        "vkGetPipelineIndirectMemoryRequirementsNV" => vkGetPipelineIndirectMemoryRequirementsNV as *const c_void,
        "vkGetPipelineIndirectDeviceAddressNV" => vkGetPipelineIndirectDeviceAddressNV as *const c_void,
        "vkCmdSetCullMode" => vkCmdSetCullMode as *const c_void,
        "vkCmdSetFrontFace" => vkCmdSetFrontFace as *const c_void,
        "vkCmdSetPrimitiveTopology" => vkCmdSetPrimitiveTopology as *const c_void,
        "vkCmdSetViewportWithCount" => vkCmdSetViewportWithCount as *const c_void,
        "vkCmdSetScissorWithCount" => vkCmdSetScissorWithCount as *const c_void,
        "vkCmdBindIndexBuffer2KHR" => vkCmdBindIndexBuffer2KHR as *const c_void,
        "vkCmdBindVertexBuffers2" => vkCmdBindVertexBuffers2 as *const c_void,
        "vkCmdSetDepthTestEnable" => vkCmdSetDepthTestEnable as *const c_void,
        "vkCmdSetDepthWriteEnable" => vkCmdSetDepthWriteEnable as *const c_void,
        "vkCmdSetDepthCompareOp" => vkCmdSetDepthCompareOp as *const c_void,
        "vkCmdSetDepthBoundsTestEnable" => vkCmdSetDepthBoundsTestEnable as *const c_void,
        "vkCmdSetStencilTestEnable" => vkCmdSetStencilTestEnable as *const c_void,
        "vkCmdSetStencilOp" => vkCmdSetStencilOp as *const c_void,
        "vkCmdSetPatchControlPointsEXT" => vkCmdSetPatchControlPointsEXT as *const c_void,
        "vkCmdSetRasterizerDiscardEnable" => vkCmdSetRasterizerDiscardEnable as *const c_void,
        "vkCmdSetDepthBiasEnable" => vkCmdSetDepthBiasEnable as *const c_void,
        "vkCmdSetLogicOpEXT" => vkCmdSetLogicOpEXT as *const c_void,
        "vkCmdSetPrimitiveRestartEnable" => vkCmdSetPrimitiveRestartEnable as *const c_void,
        "vkCmdSetTessellationDomainOriginEXT" => vkCmdSetTessellationDomainOriginEXT as *const c_void,
        "vkCmdSetDepthClampEnableEXT" => vkCmdSetDepthClampEnableEXT as *const c_void,
        "vkCmdSetPolygonModeEXT" => vkCmdSetPolygonModeEXT as *const c_void,
        "vkCmdSetRasterizationSamplesEXT" => vkCmdSetRasterizationSamplesEXT as *const c_void,
        "vkCmdSetSampleMaskEXT" => vkCmdSetSampleMaskEXT as *const c_void,
        "vkCmdSetAlphaToCoverageEnableEXT" => vkCmdSetAlphaToCoverageEnableEXT as *const c_void,
        "vkCmdSetAlphaToOneEnableEXT" => vkCmdSetAlphaToOneEnableEXT as *const c_void,
        "vkCmdSetLogicOpEnableEXT" => vkCmdSetLogicOpEnableEXT as *const c_void,
        "vkCmdSetColorBlendEnableEXT" => vkCmdSetColorBlendEnableEXT as *const c_void,
        "vkCmdSetColorBlendEquationEXT" => vkCmdSetColorBlendEquationEXT as *const c_void,
        "vkCmdSetColorWriteMaskEXT" => vkCmdSetColorWriteMaskEXT as *const c_void,
        "vkCmdSetRasterizationStreamEXT" => vkCmdSetRasterizationStreamEXT as *const c_void,
        "vkCmdSetConservativeRasterizationModeEXT" => vkCmdSetConservativeRasterizationModeEXT as *const c_void,
        "vkCmdSetExtraPrimitiveOverestimationSizeEXT" => vkCmdSetExtraPrimitiveOverestimationSizeEXT as *const c_void,
        "vkCmdSetDepthClipEnableEXT" => vkCmdSetDepthClipEnableEXT as *const c_void,
        "vkCmdSetSampleLocationsEnableEXT" => vkCmdSetSampleLocationsEnableEXT as *const c_void,
        "vkCmdSetColorBlendAdvancedEXT" => vkCmdSetColorBlendAdvancedEXT as *const c_void,
        "vkCmdSetProvokingVertexModeEXT" => vkCmdSetProvokingVertexModeEXT as *const c_void,
        "vkCmdSetLineRasterizationModeEXT" => vkCmdSetLineRasterizationModeEXT as *const c_void,
        "vkCmdSetLineStippleEnableEXT" => vkCmdSetLineStippleEnableEXT as *const c_void,
        "vkCmdSetDepthClipNegativeOneToOneEXT" => vkCmdSetDepthClipNegativeOneToOneEXT as *const c_void,
        "vkCmdSetViewportWScalingEnableNV" => vkCmdSetViewportWScalingEnableNV as *const c_void,
        "vkCmdSetViewportSwizzleNV" => vkCmdSetViewportSwizzleNV as *const c_void,
        "vkCmdSetCoverageToColorEnableNV" => vkCmdSetCoverageToColorEnableNV as *const c_void,
        "vkCmdSetCoverageToColorLocationNV" => vkCmdSetCoverageToColorLocationNV as *const c_void,
        "vkCmdSetCoverageModulationModeNV" => vkCmdSetCoverageModulationModeNV as *const c_void,
        "vkCmdSetCoverageModulationTableEnableNV" => vkCmdSetCoverageModulationTableEnableNV as *const c_void,
        "vkCmdSetCoverageModulationTableNV" => vkCmdSetCoverageModulationTableNV as *const c_void,
        "vkCmdSetShadingRateImageEnableNV" => vkCmdSetShadingRateImageEnableNV as *const c_void,
        "vkCmdSetCoverageReductionModeNV" => vkCmdSetCoverageReductionModeNV as *const c_void,
        "vkCmdSetRepresentativeFragmentTestEnableNV" => vkCmdSetRepresentativeFragmentTestEnableNV as *const c_void,
        "vkCreatePrivateDataSlot" => vkCreatePrivateDataSlot as *const c_void,
        "vkDestroyPrivateDataSlot" => vkDestroyPrivateDataSlot as *const c_void,
        "vkSetPrivateData" => vkSetPrivateData as *const c_void,
        "vkGetPrivateData" => vkGetPrivateData as *const c_void,
        "vkCmdCopyBuffer2" => vkCmdCopyBuffer2 as *const c_void,
        "vkCmdCopyImage2" => vkCmdCopyImage2 as *const c_void,
        "vkCmdBlitImage2" => vkCmdBlitImage2 as *const c_void,
        "vkCmdCopyBufferToImage2" => vkCmdCopyBufferToImage2 as *const c_void,
        "vkCmdCopyImageToBuffer2" => vkCmdCopyImageToBuffer2 as *const c_void,
        "vkCmdResolveImage2" => vkCmdResolveImage2 as *const c_void,
        "vkCmdSetFragmentShadingRateKHR" => vkCmdSetFragmentShadingRateKHR as *const c_void,
        "vkGetPhysicalDeviceFragmentShadingRatesKHR" => vkGetPhysicalDeviceFragmentShadingRatesKHR as *const c_void,
        "vkCmdSetFragmentShadingRateEnumNV" => vkCmdSetFragmentShadingRateEnumNV as *const c_void,
        "vkGetAccelerationStructureBuildSizesKHR" => vkGetAccelerationStructureBuildSizesKHR as *const c_void,
        "vkCmdSetVertexInputEXT" => vkCmdSetVertexInputEXT as *const c_void,
        "vkCmdSetColorWriteEnableEXT" => vkCmdSetColorWriteEnableEXT as *const c_void,
        "vkCmdSetEvent2" => vkCmdSetEvent2 as *const c_void,
        "vkCmdResetEvent2" => vkCmdResetEvent2 as *const c_void,
        "vkCmdWaitEvents2" => vkCmdWaitEvents2 as *const c_void,
        "vkCmdPipelineBarrier2" => vkCmdPipelineBarrier2 as *const c_void,
        "vkQueueSubmit2" => vkQueueSubmit2 as *const c_void,
        "vkCmdWriteTimestamp2" => vkCmdWriteTimestamp2 as *const c_void,
        "vkCmdWriteBufferMarker2AMD" => vkCmdWriteBufferMarker2AMD as *const c_void,
        "vkGetQueueCheckpointData2NV" => vkGetQueueCheckpointData2NV as *const c_void,
        "vkCopyMemoryToImageEXT" => vkCopyMemoryToImageEXT as *const c_void,
        "vkCopyImageToMemoryEXT" => vkCopyImageToMemoryEXT as *const c_void,
        "vkCopyImageToImageEXT" => vkCopyImageToImageEXT as *const c_void,
        "vkTransitionImageLayoutEXT" => vkTransitionImageLayoutEXT as *const c_void,
        "vkGetPhysicalDeviceVideoCapabilitiesKHR" => vkGetPhysicalDeviceVideoCapabilitiesKHR as *const c_void,
        "vkGetPhysicalDeviceVideoFormatPropertiesKHR" => vkGetPhysicalDeviceVideoFormatPropertiesKHR as *const c_void,
        "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR" => vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR as *const c_void,
        "vkCreateVideoSessionKHR" => vkCreateVideoSessionKHR as *const c_void,
        "vkDestroyVideoSessionKHR" => vkDestroyVideoSessionKHR as *const c_void,
        "vkCreateVideoSessionParametersKHR" => vkCreateVideoSessionParametersKHR as *const c_void,
        "vkUpdateVideoSessionParametersKHR" => vkUpdateVideoSessionParametersKHR as *const c_void,
        "vkGetEncodedVideoSessionParametersKHR" => vkGetEncodedVideoSessionParametersKHR as *const c_void,
        "vkDestroyVideoSessionParametersKHR" => vkDestroyVideoSessionParametersKHR as *const c_void,
        "vkGetVideoSessionMemoryRequirementsKHR" => vkGetVideoSessionMemoryRequirementsKHR as *const c_void,
        "vkBindVideoSessionMemoryKHR" => vkBindVideoSessionMemoryKHR as *const c_void,
        "vkCmdDecodeVideoKHR" => vkCmdDecodeVideoKHR as *const c_void,
        "vkCmdBeginVideoCodingKHR" => vkCmdBeginVideoCodingKHR as *const c_void,
        "vkCmdControlVideoCodingKHR" => vkCmdControlVideoCodingKHR as *const c_void,
        "vkCmdEndVideoCodingKHR" => vkCmdEndVideoCodingKHR as *const c_void,
        "vkCmdEncodeVideoKHR" => vkCmdEncodeVideoKHR as *const c_void,
        "vkCmdDecompressMemoryNV" => vkCmdDecompressMemoryNV as *const c_void,
        "vkCmdDecompressMemoryIndirectCountNV" => vkCmdDecompressMemoryIndirectCountNV as *const c_void,
        "vkCreateCuModuleNVX" => vkCreateCuModuleNVX as *const c_void,
        "vkCreateCuFunctionNVX" => vkCreateCuFunctionNVX as *const c_void,
        "vkDestroyCuModuleNVX" => vkDestroyCuModuleNVX as *const c_void,
        "vkDestroyCuFunctionNVX" => vkDestroyCuFunctionNVX as *const c_void,
        "vkCmdCuLaunchKernelNVX" => vkCmdCuLaunchKernelNVX as *const c_void,
        "vkGetDescriptorSetLayoutSizeEXT" => vkGetDescriptorSetLayoutSizeEXT as *const c_void,
        "vkGetDescriptorSetLayoutBindingOffsetEXT" => vkGetDescriptorSetLayoutBindingOffsetEXT as *const c_void,
        "vkGetDescriptorEXT" => vkGetDescriptorEXT as *const c_void,
        "vkCmdBindDescriptorBuffersEXT" => vkCmdBindDescriptorBuffersEXT as *const c_void,
        "vkCmdSetDescriptorBufferOffsetsEXT" => vkCmdSetDescriptorBufferOffsetsEXT as *const c_void,
        "vkCmdBindDescriptorBufferEmbeddedSamplersEXT" => vkCmdBindDescriptorBufferEmbeddedSamplersEXT as *const c_void,
        "vkGetBufferOpaqueCaptureDescriptorDataEXT" => vkGetBufferOpaqueCaptureDescriptorDataEXT as *const c_void,
        "vkGetImageOpaqueCaptureDescriptorDataEXT" => vkGetImageOpaqueCaptureDescriptorDataEXT as *const c_void,
        "vkGetImageViewOpaqueCaptureDescriptorDataEXT" => vkGetImageViewOpaqueCaptureDescriptorDataEXT as *const c_void,
        "vkGetSamplerOpaqueCaptureDescriptorDataEXT" => vkGetSamplerOpaqueCaptureDescriptorDataEXT as *const c_void,
        "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT" => vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT as *const c_void,
        "vkSetDeviceMemoryPriorityEXT" => vkSetDeviceMemoryPriorityEXT as *const c_void,
        "vkAcquireDrmDisplayEXT" => vkAcquireDrmDisplayEXT as *const c_void,
        "vkGetDrmDisplayEXT" => vkGetDrmDisplayEXT as *const c_void,
        "vkWaitForPresentKHR" => vkWaitForPresentKHR as *const c_void,
        "vkCreateBufferCollectionFUCHSIA" => vkCreateBufferCollectionFUCHSIA as *const c_void,
        "vkSetBufferCollectionBufferConstraintsFUCHSIA" => vkSetBufferCollectionBufferConstraintsFUCHSIA as *const c_void,
        "vkSetBufferCollectionImageConstraintsFUCHSIA" => vkSetBufferCollectionImageConstraintsFUCHSIA as *const c_void,
        "vkDestroyBufferCollectionFUCHSIA" => vkDestroyBufferCollectionFUCHSIA as *const c_void,
        "vkGetBufferCollectionPropertiesFUCHSIA" => vkGetBufferCollectionPropertiesFUCHSIA as *const c_void,
        "vkCreateCudaModuleNV" => vkCreateCudaModuleNV as *const c_void,
        "vkGetCudaModuleCacheNV" => vkGetCudaModuleCacheNV as *const c_void,
        "vkCreateCudaFunctionNV" => vkCreateCudaFunctionNV as *const c_void,
        "vkDestroyCudaModuleNV" => vkDestroyCudaModuleNV as *const c_void,
        "vkDestroyCudaFunctionNV" => vkDestroyCudaFunctionNV as *const c_void,
        "vkCmdCudaLaunchKernelNV" => vkCmdCudaLaunchKernelNV as *const c_void,
        "vkCmdBeginRendering" => vkCmdBeginRendering as *const c_void,
        "vkCmdEndRendering" => vkCmdEndRendering as *const c_void,
        "vkGetDescriptorSetLayoutHostMappingInfoVALVE" => vkGetDescriptorSetLayoutHostMappingInfoVALVE as *const c_void,
        "vkGetDescriptorSetHostMappingVALVE" => vkGetDescriptorSetHostMappingVALVE as *const c_void,
        "vkCreateMicromapEXT" => vkCreateMicromapEXT as *const c_void,
        "vkCmdBuildMicromapsEXT" => vkCmdBuildMicromapsEXT as *const c_void,
        "vkBuildMicromapsEXT" => vkBuildMicromapsEXT as *const c_void,
        "vkDestroyMicromapEXT" => vkDestroyMicromapEXT as *const c_void,
        "vkCmdCopyMicromapEXT" => vkCmdCopyMicromapEXT as *const c_void,
        "vkCopyMicromapEXT" => vkCopyMicromapEXT as *const c_void,
        "vkCmdCopyMicromapToMemoryEXT" => vkCmdCopyMicromapToMemoryEXT as *const c_void,
        "vkCopyMicromapToMemoryEXT" => vkCopyMicromapToMemoryEXT as *const c_void,
        "vkCmdCopyMemoryToMicromapEXT" => vkCmdCopyMemoryToMicromapEXT as *const c_void,
        "vkCopyMemoryToMicromapEXT" => vkCopyMemoryToMicromapEXT as *const c_void,
        "vkCmdWriteMicromapsPropertiesEXT" => vkCmdWriteMicromapsPropertiesEXT as *const c_void,
        "vkWriteMicromapsPropertiesEXT" => vkWriteMicromapsPropertiesEXT as *const c_void,
        "vkGetDeviceMicromapCompatibilityEXT" => vkGetDeviceMicromapCompatibilityEXT as *const c_void,
        "vkGetMicromapBuildSizesEXT" => vkGetMicromapBuildSizesEXT as *const c_void,
        "vkGetShaderModuleIdentifierEXT" => vkGetShaderModuleIdentifierEXT as *const c_void,
        "vkGetShaderModuleCreateInfoIdentifierEXT" => vkGetShaderModuleCreateInfoIdentifierEXT as *const c_void,
        "vkGetImageSubresourceLayout2KHR" => vkGetImageSubresourceLayout2KHR as *const c_void,
        "vkGetPipelinePropertiesEXT" => vkGetPipelinePropertiesEXT as *const c_void,
        "vkExportMetalObjectsEXT" => vkExportMetalObjectsEXT as *const c_void,
        "vkGetFramebufferTilePropertiesQCOM" => vkGetFramebufferTilePropertiesQCOM as *const c_void,
        "vkGetDynamicRenderingTilePropertiesQCOM" => vkGetDynamicRenderingTilePropertiesQCOM as *const c_void,
        "vkGetPhysicalDeviceOpticalFlowImageFormatsNV" => vkGetPhysicalDeviceOpticalFlowImageFormatsNV as *const c_void,
        "vkCreateOpticalFlowSessionNV" => vkCreateOpticalFlowSessionNV as *const c_void,
        "vkDestroyOpticalFlowSessionNV" => vkDestroyOpticalFlowSessionNV as *const c_void,
        "vkBindOpticalFlowSessionImageNV" => vkBindOpticalFlowSessionImageNV as *const c_void,
        "vkCmdOpticalFlowExecuteNV" => vkCmdOpticalFlowExecuteNV as *const c_void,
        "vkGetDeviceFaultInfoEXT" => vkGetDeviceFaultInfoEXT as *const c_void,
        "vkCmdSetDepthBias2EXT" => vkCmdSetDepthBias2EXT as *const c_void,
        "vkReleaseSwapchainImagesEXT" => vkReleaseSwapchainImagesEXT as *const c_void,
        "vkGetDeviceImageSubresourceLayoutKHR" => vkGetDeviceImageSubresourceLayoutKHR as *const c_void,
        "vkMapMemory2KHR" => vkMapMemory2KHR as *const c_void,
        "vkUnmapMemory2KHR" => vkUnmapMemory2KHR as *const c_void,
        "vkCreateShadersEXT" => vkCreateShadersEXT as *const c_void,
        "vkDestroyShaderEXT" => vkDestroyShaderEXT as *const c_void,
        "vkGetShaderBinaryDataEXT" => vkGetShaderBinaryDataEXT as *const c_void,
        "vkCmdBindShadersEXT" => vkCmdBindShadersEXT as *const c_void,
        "vkGetScreenBufferPropertiesQNX" => vkGetScreenBufferPropertiesQNX as *const c_void,
        "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR" => vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR as *const c_void,
        "vkGetExecutionGraphPipelineScratchSizeAMDX" => vkGetExecutionGraphPipelineScratchSizeAMDX as *const c_void,
        "vkGetExecutionGraphPipelineNodeIndexAMDX" => vkGetExecutionGraphPipelineNodeIndexAMDX as *const c_void,
        "vkCreateExecutionGraphPipelinesAMDX" => vkCreateExecutionGraphPipelinesAMDX as *const c_void,
        "vkCmdInitializeGraphScratchMemoryAMDX" => vkCmdInitializeGraphScratchMemoryAMDX as *const c_void,
        "vkCmdDispatchGraphAMDX" => vkCmdDispatchGraphAMDX as *const c_void,
        "vkCmdDispatchGraphIndirectAMDX" => vkCmdDispatchGraphIndirectAMDX as *const c_void,
        "vkCmdDispatchGraphIndirectCountAMDX" => vkCmdDispatchGraphIndirectCountAMDX as *const c_void,
        "vkCmdBindDescriptorSets2KHR" => vkCmdBindDescriptorSets2KHR as *const c_void,
        "vkCmdPushConstants2KHR" => vkCmdPushConstants2KHR as *const c_void,
        "vkCmdPushDescriptorSet2KHR" => vkCmdPushDescriptorSet2KHR as *const c_void,
        "vkCmdPushDescriptorSetWithTemplate2KHR" => vkCmdPushDescriptorSetWithTemplate2KHR as *const c_void,
        "vkCmdSetDescriptorBufferOffsets2EXT" => vkCmdSetDescriptorBufferOffsets2EXT as *const c_void,
        "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT" => vkCmdBindDescriptorBufferEmbeddedSamplers2EXT as *const c_void,
        "vkSetLatencySleepModeNV" => vkSetLatencySleepModeNV as *const c_void,
        "vkLatencySleepNV" => vkLatencySleepNV as *const c_void,
        "vkSetLatencyMarkerNV" => vkSetLatencyMarkerNV as *const c_void,
        "vkGetLatencyTimingsNV" => vkGetLatencyTimingsNV as *const c_void,
        "vkQueueNotifyOutOfBandNV" => vkQueueNotifyOutOfBandNV as *const c_void,
        "vkCmdSetRenderingAttachmentLocationsKHR" => vkCmdSetRenderingAttachmentLocationsKHR as *const c_void,
        "vkCmdSetRenderingInputAttachmentIndicesKHR" => vkCmdSetRenderingInputAttachmentIndicesKHR as *const c_void,
        _ => std::ptr::null(),
    }
}


#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateInstance.html>"]
unsafe extern "system" fn vkCreateInstance(
    p_create_info: *const VkInstanceCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_instance: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateInstance({p_create_info:?}, {p_allocator:?}, {p_instance:?})");

    let mut packet = new_packet(1000001000);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_instance);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_instance);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyInstance.html>"]
unsafe extern "system" fn vkDestroyInstance(
    instance: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyInstance({instance:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001001);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDevices.html>"]
unsafe extern "system" fn vkEnumeratePhysicalDevices(
    instance: NonDisposableHandle,
    p_physical_device_count: *mut u32,
    p_physical_devices: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkEnumeratePhysicalDevices({instance:?}, {p_physical_device_count:?}, {p_physical_devices:?})");

    let mut packet = new_packet(1000001002);
    packet.write(instance);
    packet.write_vk_array_count(p_physical_device_count, p_physical_devices);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_physical_device_count, p_physical_devices);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceProcAddr.html>"]
unsafe extern "system" fn vkGetDeviceProcAddr(
    device: NonDisposableHandle,
    p_name: *const c_char,
) -> PFN_vkVoidFunction {
    trace!("called vkGetDeviceProcAddr({device:?}, {p_name:?})");

    let mut packet = new_packet(1000001003);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_name);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetInstanceProcAddr.html>"]
unsafe extern "system" fn vkGetInstanceProcAddr(
    instance: NonDisposableHandle,
    p_name: *const c_char,
) -> PFN_vkVoidFunction {
    trace!("called vkGetInstanceProcAddr({instance:?}, {p_name:?})");

    let mut packet = new_packet(1000001004);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_name);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceProperties(
    physical_device: NonDisposableHandle,
    p_properties: *mut VkPhysicalDeviceProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceProperties({physical_device:?}, {p_properties:?})");

    let mut packet = new_packet(1000001005);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceQueueFamilyProperties(
    physical_device: NonDisposableHandle,
    p_queue_family_property_count: *mut u32,
    p_queue_family_properties: *mut VkQueueFamilyProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceQueueFamilyProperties({physical_device:?}, {p_queue_family_property_count:?}, {p_queue_family_properties:?})");

    let mut packet = new_packet(1000001006);
    packet.write(physical_device);
    packet.write_vk_array_count(p_queue_family_property_count, p_queue_family_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_queue_family_property_count, p_queue_family_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMemoryProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceMemoryProperties(
    physical_device: NonDisposableHandle,
    p_memory_properties: *mut VkPhysicalDeviceMemoryProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceMemoryProperties({physical_device:?}, {p_memory_properties:?})");

    let mut packet = new_packet(1000001007);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(p_memory_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFeatures.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceFeatures(
    physical_device: NonDisposableHandle,
    p_features: *mut VkPhysicalDeviceFeatures,
) -> c_void {
    trace!("called vkGetPhysicalDeviceFeatures({physical_device:?}, {p_features:?})");

    let mut packet = new_packet(1000001008);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(p_features);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_features);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFormatProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceFormatProperties(
    physical_device: NonDisposableHandle,
    format: NonDisposableHandle,
    p_format_properties: *mut VkFormatProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceFormatProperties({physical_device:?}, {format:?}, {p_format_properties:?})");

    let mut packet = new_packet(1000001009);
    packet.write(physical_device);
    packet.write(format);
    packet.write_nullable_raw_ptr_mut(p_format_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceImageFormatProperties(
    physical_device: NonDisposableHandle,
    format: NonDisposableHandle,
    type_: NonDisposableHandle,
    tiling: NonDisposableHandle,
    usage: NonDisposableHandle,
    flags: NonDisposableHandle,
    p_image_format_properties: *mut VkImageFormatProperties,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceImageFormatProperties({physical_device:?}, {format:?}, {type_:?}, {tiling:?}, {usage:?}, {flags:?}, {p_image_format_properties:?})");

    let mut packet = new_packet(1000001010);
    packet.write(physical_device);
    packet.write(format);
    packet.write(type_);
    packet.write(tiling);
    packet.write(usage);
    packet.write(flags);
    packet.write_nullable_raw_ptr_mut(p_image_format_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_image_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDevice.html>"]
unsafe extern "system" fn vkCreateDevice(
    physical_device: NonDisposableHandle,
    p_create_info: *const VkDeviceCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_device: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDevice({physical_device:?}, {p_create_info:?}, {p_allocator:?}, {p_device:?})");

    let mut packet = new_packet(1000001011);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_device);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_device);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDevice.html>"]
unsafe extern "system" fn vkDestroyDevice(
    device: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDevice({device:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001012);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceVersion.html>"]
unsafe extern "system" fn vkEnumerateInstanceVersion(
    p_api_version: *mut u32,
) -> NonDisposableHandle {
    trace!("called vkEnumerateInstanceVersion({p_api_version:?})");

    let mut packet = new_packet(1000001013);
    packet.write_nullable_raw_ptr_mut(p_api_version);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_api_version);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceLayerProperties.html>"]
unsafe extern "system" fn vkEnumerateInstanceLayerProperties(
    p_property_count: *mut u32,
    p_properties: *mut VkLayerProperties,
) -> NonDisposableHandle {
    trace!("called vkEnumerateInstanceLayerProperties({p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001014);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateInstanceExtensionProperties.html>"]
unsafe extern "system" fn vkEnumerateInstanceExtensionProperties(
    p_layer_name: *const c_char,
    p_property_count: *mut u32,
    p_properties: *mut VkExtensionProperties,
) -> NonDisposableHandle {
    trace!("called vkEnumerateInstanceExtensionProperties({p_layer_name:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001015);
    packet.write_nullable_raw_ptr(p_layer_name);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateDeviceLayerProperties.html>"]
unsafe extern "system" fn vkEnumerateDeviceLayerProperties(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkLayerProperties,
) -> NonDisposableHandle {
    trace!("called vkEnumerateDeviceLayerProperties({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001016);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumerateDeviceExtensionProperties.html>"]
unsafe extern "system" fn vkEnumerateDeviceExtensionProperties(
    physical_device: NonDisposableHandle,
    p_layer_name: *const c_char,
    p_property_count: *mut u32,
    p_properties: *mut VkExtensionProperties,
) -> NonDisposableHandle {
    trace!("called vkEnumerateDeviceExtensionProperties({physical_device:?}, {p_layer_name:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001017);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_layer_name);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceQueue.html>"]
unsafe extern "system" fn vkGetDeviceQueue(
    device: NonDisposableHandle,
    queue_family_index: u32,
    queue_index: u32,
    p_queue: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDeviceQueue({device:?}, {queue_family_index:?}, {queue_index:?}, {p_queue:?})");

    let mut packet = new_packet(1000001018);
    packet.write(device);
    packet.write(queue_family_index);
    packet.write(queue_index);
    packet.write_nullable_raw_ptr_mut(p_queue);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_queue);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit.html>"]
unsafe extern "system" fn vkQueueSubmit(
    queue: NonDisposableHandle,
    submit_count: u32,
    p_submits: *const VkSubmitInfo,
    fence: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkQueueSubmit({queue:?}, {submit_count:?}, {p_submits:?}, {fence:?})");

    let mut packet = new_packet(1000001019);
    packet.write(queue);
    packet.write(submit_count);
    packet.write_nullable_raw_ptr(p_submits);
    packet.write(fence);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueWaitIdle.html>"]
unsafe extern "system" fn vkQueueWaitIdle(
    queue: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkQueueWaitIdle({queue:?})");

    let mut packet = new_packet(1000001020);
    packet.write(queue);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDeviceWaitIdle.html>"]
unsafe extern "system" fn vkDeviceWaitIdle(
    device: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkDeviceWaitIdle({device:?})");

    let mut packet = new_packet(1000001021);
    packet.write(device);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateMemory.html>"]
unsafe extern "system" fn vkAllocateMemory(
    device: NonDisposableHandle,
    p_allocate_info: *const VkMemoryAllocateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_memory: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAllocateMemory({device:?}, {p_allocate_info:?}, {p_allocator:?}, {p_memory:?})");

    let mut packet = new_packet(1000001022);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_allocate_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_memory);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeMemory.html>"]
unsafe extern "system" fn vkFreeMemory(
    device: NonDisposableHandle,
    memory: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkFreeMemory({device:?}, {memory:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001023);
    packet.write(device);
    packet.write(memory);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMapMemory.html>"]
unsafe extern "system" fn vkMapMemory(
    device: NonDisposableHandle,
    memory: NonDisposableHandle,
    offset: NonDisposableHandle,
    size: NonDisposableHandle,
    flags: NonDisposableHandle,
    pp_data: *mut *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkMapMemory({device:?}, {memory:?}, {offset:?}, {size:?}, {flags:?}, {pp_data:?})");

    let mut packet = new_packet(1000001024);
    packet.write(device);
    packet.write(memory);
    packet.write(offset);
    packet.write(size);
    packet.write(flags);
    packet.write_nullable_raw_ptr_mut(pp_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(pp_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUnmapMemory.html>"]
unsafe extern "system" fn vkUnmapMemory(
    device: NonDisposableHandle,
    memory: NonDisposableHandle,
) -> c_void {
    trace!("called vkUnmapMemory({device:?}, {memory:?})");

    let mut packet = new_packet(1000001025);
    packet.write(device);
    packet.write(memory);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFlushMappedMemoryRanges.html>"]
unsafe extern "system" fn vkFlushMappedMemoryRanges(
    device: NonDisposableHandle,
    memory_range_count: u32,
    p_memory_ranges: *const VkMappedMemoryRange,
) -> NonDisposableHandle {
    trace!("called vkFlushMappedMemoryRanges({device:?}, {memory_range_count:?}, {p_memory_ranges:?})");

    let mut packet = new_packet(1000001026);
    packet.write(device);
    packet.write(memory_range_count);
    packet.write_nullable_raw_ptr(p_memory_ranges);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkInvalidateMappedMemoryRanges.html>"]
unsafe extern "system" fn vkInvalidateMappedMemoryRanges(
    device: NonDisposableHandle,
    memory_range_count: u32,
    p_memory_ranges: *const VkMappedMemoryRange,
) -> NonDisposableHandle {
    trace!("called vkInvalidateMappedMemoryRanges({device:?}, {memory_range_count:?}, {p_memory_ranges:?})");

    let mut packet = new_packet(1000001027);
    packet.write(device);
    packet.write(memory_range_count);
    packet.write_nullable_raw_ptr(p_memory_ranges);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMemoryCommitment.html>"]
unsafe extern "system" fn vkGetDeviceMemoryCommitment(
    device: NonDisposableHandle,
    memory: NonDisposableHandle,
    p_committed_memory_in_bytes: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDeviceMemoryCommitment({device:?}, {memory:?}, {p_committed_memory_in_bytes:?})");

    let mut packet = new_packet(1000001028);
    packet.write(device);
    packet.write(memory);
    packet.write_nullable_raw_ptr_mut(p_committed_memory_in_bytes);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_committed_memory_in_bytes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferMemoryRequirements.html>"]
unsafe extern "system" fn vkGetBufferMemoryRequirements(
    device: NonDisposableHandle,
    buffer: NonDisposableHandle,
    p_memory_requirements: *mut VkMemoryRequirements,
) -> c_void {
    trace!("called vkGetBufferMemoryRequirements({device:?}, {buffer:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001029);
    packet.write(device);
    packet.write(buffer);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindBufferMemory.html>"]
unsafe extern "system" fn vkBindBufferMemory(
    device: NonDisposableHandle,
    buffer: NonDisposableHandle,
    memory: NonDisposableHandle,
    memory_offset: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkBindBufferMemory({device:?}, {buffer:?}, {memory:?}, {memory_offset:?})");

    let mut packet = new_packet(1000001030);
    packet.write(device);
    packet.write(buffer);
    packet.write(memory);
    packet.write(memory_offset);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageMemoryRequirements.html>"]
unsafe extern "system" fn vkGetImageMemoryRequirements(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    p_memory_requirements: *mut VkMemoryRequirements,
) -> c_void {
    trace!("called vkGetImageMemoryRequirements({device:?}, {image:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001031);
    packet.write(device);
    packet.write(image);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindImageMemory.html>"]
unsafe extern "system" fn vkBindImageMemory(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    memory: NonDisposableHandle,
    memory_offset: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkBindImageMemory({device:?}, {image:?}, {memory:?}, {memory_offset:?})");

    let mut packet = new_packet(1000001032);
    packet.write(device);
    packet.write(image);
    packet.write(memory);
    packet.write(memory_offset);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSparseMemoryRequirements.html>"]
unsafe extern "system" fn vkGetImageSparseMemoryRequirements(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut VkSparseImageMemoryRequirements,
) -> c_void {
    trace!("called vkGetImageSparseMemoryRequirements({device:?}, {image:?}, {p_sparse_memory_requirement_count:?}, {p_sparse_memory_requirements:?})");

    let mut packet = new_packet(1000001033);
    packet.write(device);
    packet.write(image);
    packet.write_vk_array_count(p_sparse_memory_requirement_count, p_sparse_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_sparse_memory_requirement_count, p_sparse_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSparseImageFormatProperties(
    physical_device: NonDisposableHandle,
    format: NonDisposableHandle,
    type_: NonDisposableHandle,
    samples: vk::SampleCountFlags,
    usage: NonDisposableHandle,
    tiling: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkSparseImageFormatProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceSparseImageFormatProperties({physical_device:?}, {format:?}, {type_:?}, {samples:?}, {usage:?}, {tiling:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001034);
    packet.write(physical_device);
    packet.write(format);
    packet.write(type_);
    packet.write(samples);
    packet.write(usage);
    packet.write(tiling);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueBindSparse.html>"]
unsafe extern "system" fn vkQueueBindSparse(
    queue: NonDisposableHandle,
    bind_info_count: u32,
    p_bind_info: *const VkBindSparseInfo,
    fence: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkQueueBindSparse({queue:?}, {bind_info_count:?}, {p_bind_info:?}, {fence:?})");

    let mut packet = new_packet(1000001035);
    packet.write(queue);
    packet.write(bind_info_count);
    packet.write_nullable_raw_ptr(p_bind_info);
    packet.write(fence);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateFence.html>"]
unsafe extern "system" fn vkCreateFence(
    device: NonDisposableHandle,
    p_create_info: *const VkFenceCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_fence: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateFence({device:?}, {p_create_info:?}, {p_allocator:?}, {p_fence:?})");

    let mut packet = new_packet(1000001036);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_fence);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fence);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyFence.html>"]
unsafe extern "system" fn vkDestroyFence(
    device: NonDisposableHandle,
    fence: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyFence({device:?}, {fence:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001037);
    packet.write(device);
    packet.write(fence);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetFences.html>"]
unsafe extern "system" fn vkResetFences(
    device: NonDisposableHandle,
    fence_count: u32,
    p_fences: *const NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkResetFences({device:?}, {fence_count:?}, {p_fences:?})");

    let mut packet = new_packet(1000001038);
    packet.write(device);
    packet.write(fence_count);
    packet.write_nullable_raw_ptr(p_fences);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceStatus.html>"]
unsafe extern "system" fn vkGetFenceStatus(
    device: NonDisposableHandle,
    fence: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetFenceStatus({device:?}, {fence:?})");

    let mut packet = new_packet(1000001039);
    packet.write(device);
    packet.write(fence);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitForFences.html>"]
unsafe extern "system" fn vkWaitForFences(
    device: NonDisposableHandle,
    fence_count: u32,
    p_fences: *const NonDisposableHandle,
    wait_all: NonDisposableHandle,
    timeout: u64,
) -> NonDisposableHandle {
    trace!("called vkWaitForFences({device:?}, {fence_count:?}, {p_fences:?}, {wait_all:?}, {timeout:?})");

    let mut packet = new_packet(1000001040);
    packet.write(device);
    packet.write(fence_count);
    packet.write_nullable_raw_ptr(p_fences);
    packet.write(wait_all);
    packet.write(timeout);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSemaphore.html>"]
unsafe extern "system" fn vkCreateSemaphore(
    device: NonDisposableHandle,
    p_create_info: *const VkSemaphoreCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_semaphore: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateSemaphore({device:?}, {p_create_info:?}, {p_allocator:?}, {p_semaphore:?})");

    let mut packet = new_packet(1000001041);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_semaphore);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_semaphore);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySemaphore.html>"]
unsafe extern "system" fn vkDestroySemaphore(
    device: NonDisposableHandle,
    semaphore: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroySemaphore({device:?}, {semaphore:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001042);
    packet.write(device);
    packet.write(semaphore);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateEvent.html>"]
unsafe extern "system" fn vkCreateEvent(
    device: NonDisposableHandle,
    p_create_info: *const VkEventCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_event: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateEvent({device:?}, {p_create_info:?}, {p_allocator:?}, {p_event:?})");

    let mut packet = new_packet(1000001043);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_event);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_event);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyEvent.html>"]
unsafe extern "system" fn vkDestroyEvent(
    device: NonDisposableHandle,
    event: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyEvent({device:?}, {event:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001044);
    packet.write(device);
    packet.write(event);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetEventStatus.html>"]
unsafe extern "system" fn vkGetEventStatus(
    device: NonDisposableHandle,
    event: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetEventStatus({device:?}, {event:?})");

    let mut packet = new_packet(1000001045);
    packet.write(device);
    packet.write(event);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetEvent.html>"]
unsafe extern "system" fn vkSetEvent(
    device: NonDisposableHandle,
    event: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkSetEvent({device:?}, {event:?})");

    let mut packet = new_packet(1000001046);
    packet.write(device);
    packet.write(event);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetEvent.html>"]
unsafe extern "system" fn vkResetEvent(
    device: NonDisposableHandle,
    event: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkResetEvent({device:?}, {event:?})");

    let mut packet = new_packet(1000001047);
    packet.write(device);
    packet.write(event);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateQueryPool.html>"]
unsafe extern "system" fn vkCreateQueryPool(
    device: NonDisposableHandle,
    p_create_info: *const VkQueryPoolCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_query_pool: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateQueryPool({device:?}, {p_create_info:?}, {p_allocator:?}, {p_query_pool:?})");

    let mut packet = new_packet(1000001048);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_query_pool);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_query_pool);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyQueryPool.html>"]
unsafe extern "system" fn vkDestroyQueryPool(
    device: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyQueryPool({device:?}, {query_pool:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001049);
    packet.write(device);
    packet.write(query_pool);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueryPoolResults.html>"]
unsafe extern "system" fn vkGetQueryPoolResults(
    device: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
    query_count: u32,
    data_size: usize,
    p_data: *mut c_void,
    stride: NonDisposableHandle,
    flags: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetQueryPoolResults({device:?}, {query_pool:?}, {first_query:?}, {query_count:?}, {data_size:?}, {p_data:?}, {stride:?}, {flags:?})");

    let mut packet = new_packet(1000001050);
    packet.write(device);
    packet.write(query_pool);
    packet.write(first_query);
    packet.write(query_count);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_data);
    packet.write(stride);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetQueryPool.html>"]
unsafe extern "system" fn vkResetQueryPool(
    device: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
    query_count: u32,
) -> c_void {
    trace!("called vkResetQueryPool({device:?}, {query_pool:?}, {first_query:?}, {query_count:?})");

    let mut packet = new_packet(1000001051);
    packet.write(device);
    packet.write(query_pool);
    packet.write(first_query);
    packet.write(query_count);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBuffer.html>"]
unsafe extern "system" fn vkCreateBuffer(
    device: NonDisposableHandle,
    p_create_info: *const VkBufferCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_buffer: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateBuffer({device:?}, {p_create_info:?}, {p_allocator:?}, {p_buffer:?})");

    let mut packet = new_packet(1000001052);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_buffer);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_buffer);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBuffer.html>"]
unsafe extern "system" fn vkDestroyBuffer(
    device: NonDisposableHandle,
    buffer: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyBuffer({device:?}, {buffer:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001053);
    packet.write(device);
    packet.write(buffer);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBufferView.html>"]
unsafe extern "system" fn vkCreateBufferView(
    device: NonDisposableHandle,
    p_create_info: *const VkBufferViewCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_view: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateBufferView({device:?}, {p_create_info:?}, {p_allocator:?}, {p_view:?})");

    let mut packet = new_packet(1000001054);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_view);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_view);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBufferView.html>"]
unsafe extern "system" fn vkDestroyBufferView(
    device: NonDisposableHandle,
    buffer_view: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyBufferView({device:?}, {buffer_view:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001055);
    packet.write(device);
    packet.write(buffer_view);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImage.html>"]
unsafe extern "system" fn vkCreateImage(
    device: NonDisposableHandle,
    p_create_info: *const VkImageCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_image: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateImage({device:?}, {p_create_info:?}, {p_allocator:?}, {p_image:?})");

    let mut packet = new_packet(1000001056);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_image);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_image);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyImage.html>"]
unsafe extern "system" fn vkDestroyImage(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyImage({device:?}, {image:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001057);
    packet.write(device);
    packet.write(image);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSubresourceLayout.html>"]
unsafe extern "system" fn vkGetImageSubresourceLayout(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    p_subresource: *const VkImageSubresource,
    p_layout: *mut VkSubresourceLayout,
) -> c_void {
    trace!("called vkGetImageSubresourceLayout({device:?}, {image:?}, {p_subresource:?}, {p_layout:?})");

    let mut packet = new_packet(1000001058);
    packet.write(device);
    packet.write(image);
    packet.write_nullable_raw_ptr(p_subresource);
    packet.write_nullable_raw_ptr_mut(p_layout);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_layout);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImageView.html>"]
unsafe extern "system" fn vkCreateImageView(
    device: NonDisposableHandle,
    p_create_info: *const VkImageViewCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_view: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateImageView({device:?}, {p_create_info:?}, {p_allocator:?}, {p_view:?})");

    let mut packet = new_packet(1000001059);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_view);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_view);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyImageView.html>"]
unsafe extern "system" fn vkDestroyImageView(
    device: NonDisposableHandle,
    image_view: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyImageView({device:?}, {image_view:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001060);
    packet.write(device);
    packet.write(image_view);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateShaderModule.html>"]
unsafe extern "system" fn vkCreateShaderModule(
    device: NonDisposableHandle,
    p_create_info: *const VkShaderModuleCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_shader_module: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateShaderModule({device:?}, {p_create_info:?}, {p_allocator:?}, {p_shader_module:?})");

    let mut packet = new_packet(1000001061);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_shader_module);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_shader_module);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyShaderModule.html>"]
unsafe extern "system" fn vkDestroyShaderModule(
    device: NonDisposableHandle,
    shader_module: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyShaderModule({device:?}, {shader_module:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001062);
    packet.write(device);
    packet.write(shader_module);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePipelineCache.html>"]
unsafe extern "system" fn vkCreatePipelineCache(
    device: NonDisposableHandle,
    p_create_info: *const VkPipelineCacheCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_pipeline_cache: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreatePipelineCache({device:?}, {p_create_info:?}, {p_allocator:?}, {p_pipeline_cache:?})");

    let mut packet = new_packet(1000001063);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipeline_cache);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipeline_cache);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipelineCache.html>"]
unsafe extern "system" fn vkDestroyPipelineCache(
    device: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyPipelineCache({device:?}, {pipeline_cache:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001064);
    packet.write(device);
    packet.write(pipeline_cache);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineCacheData.html>"]
unsafe extern "system" fn vkGetPipelineCacheData(
    device: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    p_data_size: *mut usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetPipelineCacheData({device:?}, {pipeline_cache:?}, {p_data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001065);
    packet.write(device);
    packet.write(pipeline_cache);
    packet.write_nullable_raw_ptr_mut(p_data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data_size);
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMergePipelineCaches.html>"]
unsafe extern "system" fn vkMergePipelineCaches(
    device: NonDisposableHandle,
    dst_cache: NonDisposableHandle,
    src_cache_count: u32,
    p_src_caches: *const NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkMergePipelineCaches({device:?}, {dst_cache:?}, {src_cache_count:?}, {p_src_caches:?})");

    let mut packet = new_packet(1000001066);
    packet.write(device);
    packet.write(dst_cache);
    packet.write(src_cache_count);
    packet.write_nullable_raw_ptr(p_src_caches);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateGraphicsPipelines.html>"]
unsafe extern "system" fn vkCreateGraphicsPipelines(
    device: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    create_info_count: u32,
    p_create_infos: *const VkGraphicsPipelineCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_pipelines: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateGraphicsPipelines({device:?}, {pipeline_cache:?}, {create_info_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_pipelines:?})");

    let mut packet = new_packet(1000001067);
    packet.write(device);
    packet.write(pipeline_cache);
    packet.write(create_info_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipelines);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipelines);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateComputePipelines.html>"]
unsafe extern "system" fn vkCreateComputePipelines(
    device: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    create_info_count: u32,
    p_create_infos: *const VkComputePipelineCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_pipelines: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateComputePipelines({device:?}, {pipeline_cache:?}, {create_info_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_pipelines:?})");

    let mut packet = new_packet(1000001068);
    packet.write(device);
    packet.write(pipeline_cache);
    packet.write(create_info_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipelines);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipelines);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.html>"]
unsafe extern "system" fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
    device: NonDisposableHandle,
    renderpass: NonDisposableHandle,
    p_max_workgroup_size: *mut VkExtent2D,
) -> NonDisposableHandle {
    trace!("called vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI({device:?}, {renderpass:?}, {p_max_workgroup_size:?})");

    let mut packet = new_packet(1000001069);
    packet.write(device);
    packet.write(renderpass);
    packet.write_nullable_raw_ptr_mut(p_max_workgroup_size);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_max_workgroup_size);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipeline.html>"]
unsafe extern "system" fn vkDestroyPipeline(
    device: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyPipeline({device:?}, {pipeline:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001070);
    packet.write(device);
    packet.write(pipeline);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePipelineLayout.html>"]
unsafe extern "system" fn vkCreatePipelineLayout(
    device: NonDisposableHandle,
    p_create_info: *const VkPipelineLayoutCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_pipeline_layout: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreatePipelineLayout({device:?}, {p_create_info:?}, {p_allocator:?}, {p_pipeline_layout:?})");

    let mut packet = new_packet(1000001071);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipeline_layout);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipeline_layout);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPipelineLayout.html>"]
unsafe extern "system" fn vkDestroyPipelineLayout(
    device: NonDisposableHandle,
    pipeline_layout: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyPipelineLayout({device:?}, {pipeline_layout:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001072);
    packet.write(device);
    packet.write(pipeline_layout);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSampler.html>"]
unsafe extern "system" fn vkCreateSampler(
    device: NonDisposableHandle,
    p_create_info: *const VkSamplerCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_sampler: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateSampler({device:?}, {p_create_info:?}, {p_allocator:?}, {p_sampler:?})");

    let mut packet = new_packet(1000001073);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_sampler);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_sampler);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySampler.html>"]
unsafe extern "system" fn vkDestroySampler(
    device: NonDisposableHandle,
    sampler: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroySampler({device:?}, {sampler:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001074);
    packet.write(device);
    packet.write(sampler);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorSetLayout.html>"]
unsafe extern "system" fn vkCreateDescriptorSetLayout(
    device: NonDisposableHandle,
    p_create_info: *const VkDescriptorSetLayoutCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_set_layout: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDescriptorSetLayout({device:?}, {p_create_info:?}, {p_allocator:?}, {p_set_layout:?})");

    let mut packet = new_packet(1000001075);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_set_layout);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_set_layout);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorSetLayout.html>"]
unsafe extern "system" fn vkDestroyDescriptorSetLayout(
    device: NonDisposableHandle,
    descriptor_set_layout: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDescriptorSetLayout({device:?}, {descriptor_set_layout:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001076);
    packet.write(device);
    packet.write(descriptor_set_layout);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorPool.html>"]
unsafe extern "system" fn vkCreateDescriptorPool(
    device: NonDisposableHandle,
    p_create_info: *const VkDescriptorPoolCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_descriptor_pool: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDescriptorPool({device:?}, {p_create_info:?}, {p_allocator:?}, {p_descriptor_pool:?})");

    let mut packet = new_packet(1000001077);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_descriptor_pool);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_descriptor_pool);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorPool.html>"]
unsafe extern "system" fn vkDestroyDescriptorPool(
    device: NonDisposableHandle,
    descriptor_pool: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDescriptorPool({device:?}, {descriptor_pool:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001078);
    packet.write(device);
    packet.write(descriptor_pool);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetDescriptorPool.html>"]
unsafe extern "system" fn vkResetDescriptorPool(
    device: NonDisposableHandle,
    descriptor_pool: NonDisposableHandle,
    flags: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkResetDescriptorPool({device:?}, {descriptor_pool:?}, {flags:?})");

    let mut packet = new_packet(1000001079);
    packet.write(device);
    packet.write(descriptor_pool);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateDescriptorSets.html>"]
unsafe extern "system" fn vkAllocateDescriptorSets(
    device: NonDisposableHandle,
    p_allocate_info: *const VkDescriptorSetAllocateInfo,
    p_descriptor_sets: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAllocateDescriptorSets({device:?}, {p_allocate_info:?}, {p_descriptor_sets:?})");

    let mut packet = new_packet(1000001080);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_allocate_info);
    packet.write_nullable_raw_ptr_mut(p_descriptor_sets);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_descriptor_sets);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeDescriptorSets.html>"]
unsafe extern "system" fn vkFreeDescriptorSets(
    device: NonDisposableHandle,
    descriptor_pool: NonDisposableHandle,
    descriptor_set_count: u32,
    p_descriptor_sets: *const NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkFreeDescriptorSets({device:?}, {descriptor_pool:?}, {descriptor_set_count:?}, {p_descriptor_sets:?})");

    let mut packet = new_packet(1000001081);
    packet.write(device);
    packet.write(descriptor_pool);
    packet.write(descriptor_set_count);
    packet.write_nullable_raw_ptr(p_descriptor_sets);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateDescriptorSets.html>"]
unsafe extern "system" fn vkUpdateDescriptorSets(
    device: NonDisposableHandle,
    descriptor_write_count: u32,
    p_descriptor_writes: *const VkWriteDescriptorSet,
    descriptor_copy_count: u32,
    p_descriptor_copies: *const VkCopyDescriptorSet,
) -> c_void {
    trace!("called vkUpdateDescriptorSets({device:?}, {descriptor_write_count:?}, {p_descriptor_writes:?}, {descriptor_copy_count:?}, {p_descriptor_copies:?})");

    let mut packet = new_packet(1000001082);
    packet.write(device);
    packet.write(descriptor_write_count);
    packet.write_nullable_raw_ptr(p_descriptor_writes);
    packet.write(descriptor_copy_count);
    packet.write_nullable_raw_ptr(p_descriptor_copies);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateFramebuffer.html>"]
unsafe extern "system" fn vkCreateFramebuffer(
    device: NonDisposableHandle,
    p_create_info: *const VkFramebufferCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_framebuffer: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateFramebuffer({device:?}, {p_create_info:?}, {p_allocator:?}, {p_framebuffer:?})");

    let mut packet = new_packet(1000001083);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_framebuffer);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_framebuffer);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyFramebuffer.html>"]
unsafe extern "system" fn vkDestroyFramebuffer(
    device: NonDisposableHandle,
    framebuffer: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyFramebuffer({device:?}, {framebuffer:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001084);
    packet.write(device);
    packet.write(framebuffer);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRenderPass.html>"]
unsafe extern "system" fn vkCreateRenderPass(
    device: NonDisposableHandle,
    p_create_info: *const VkRenderPassCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_render_pass: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateRenderPass({device:?}, {p_create_info:?}, {p_allocator:?}, {p_render_pass:?})");

    let mut packet = new_packet(1000001085);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_render_pass);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_render_pass);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyRenderPass.html>"]
unsafe extern "system" fn vkDestroyRenderPass(
    device: NonDisposableHandle,
    render_pass: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyRenderPass({device:?}, {render_pass:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001086);
    packet.write(device);
    packet.write(render_pass);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRenderAreaGranularity.html>"]
unsafe extern "system" fn vkGetRenderAreaGranularity(
    device: NonDisposableHandle,
    render_pass: NonDisposableHandle,
    p_granularity: *mut VkExtent2D,
) -> c_void {
    trace!("called vkGetRenderAreaGranularity({device:?}, {render_pass:?}, {p_granularity:?})");

    let mut packet = new_packet(1000001087);
    packet.write(device);
    packet.write(render_pass);
    packet.write_nullable_raw_ptr_mut(p_granularity);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_granularity);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRenderingAreaGranularityKHR.html>"]
unsafe extern "system" fn vkGetRenderingAreaGranularityKHR(
    device: NonDisposableHandle,
    p_rendering_area_info: *const VkRenderingAreaInfoKHR,
    p_granularity: *mut VkExtent2D,
) -> c_void {
    trace!("called vkGetRenderingAreaGranularityKHR({device:?}, {p_rendering_area_info:?}, {p_granularity:?})");

    let mut packet = new_packet(1000001088);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_rendering_area_info);
    packet.write_nullable_raw_ptr_mut(p_granularity);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_granularity);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCommandPool.html>"]
unsafe extern "system" fn vkCreateCommandPool(
    device: NonDisposableHandle,
    p_create_info: *const VkCommandPoolCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_command_pool: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateCommandPool({device:?}, {p_create_info:?}, {p_allocator:?}, {p_command_pool:?})");

    let mut packet = new_packet(1000001089);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_command_pool);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_command_pool);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCommandPool.html>"]
unsafe extern "system" fn vkDestroyCommandPool(
    device: NonDisposableHandle,
    command_pool: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyCommandPool({device:?}, {command_pool:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001090);
    packet.write(device);
    packet.write(command_pool);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetCommandPool.html>"]
unsafe extern "system" fn vkResetCommandPool(
    device: NonDisposableHandle,
    command_pool: NonDisposableHandle,
    flags: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkResetCommandPool({device:?}, {command_pool:?}, {flags:?})");

    let mut packet = new_packet(1000001091);
    packet.write(device);
    packet.write(command_pool);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAllocateCommandBuffers.html>"]
unsafe extern "system" fn vkAllocateCommandBuffers(
    device: NonDisposableHandle,
    p_allocate_info: *const VkCommandBufferAllocateInfo,
    p_command_buffers: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAllocateCommandBuffers({device:?}, {p_allocate_info:?}, {p_command_buffers:?})");

    let mut packet = new_packet(1000001092);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_allocate_info);
    packet.write_nullable_raw_ptr_mut(p_command_buffers);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_command_buffers);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkFreeCommandBuffers.html>"]
unsafe extern "system" fn vkFreeCommandBuffers(
    device: NonDisposableHandle,
    command_pool: NonDisposableHandle,
    command_buffer_count: u32,
    p_command_buffers: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkFreeCommandBuffers({device:?}, {command_pool:?}, {command_buffer_count:?}, {p_command_buffers:?})");

    let mut packet = new_packet(1000001093);
    packet.write(device);
    packet.write(command_pool);
    packet.write(command_buffer_count);
    packet.write_nullable_raw_ptr(p_command_buffers);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBeginCommandBuffer.html>"]
unsafe extern "system" fn vkBeginCommandBuffer(
    command_buffer: NonDisposableHandle,
    p_begin_info: *const VkCommandBufferBeginInfo,
) -> NonDisposableHandle {
    trace!("called vkBeginCommandBuffer({command_buffer:?}, {p_begin_info:?})");

    let mut packet = new_packet(1000001094);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_begin_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEndCommandBuffer.html>"]
unsafe extern "system" fn vkEndCommandBuffer(
    command_buffer: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkEndCommandBuffer({command_buffer:?})");

    let mut packet = new_packet(1000001095);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkResetCommandBuffer.html>"]
unsafe extern "system" fn vkResetCommandBuffer(
    command_buffer: NonDisposableHandle,
    flags: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkResetCommandBuffer({command_buffer:?}, {flags:?})");

    let mut packet = new_packet(1000001096);
    packet.write(command_buffer);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipeline.html>"]
unsafe extern "system" fn vkCmdBindPipeline(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    pipeline: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindPipeline({command_buffer:?}, {pipeline_bind_point:?}, {pipeline:?})");

    let mut packet = new_packet(1000001097);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(pipeline);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAttachmentFeedbackLoopEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetAttachmentFeedbackLoopEnableEXT(
    command_buffer: NonDisposableHandle,
    aspect_mask: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetAttachmentFeedbackLoopEnableEXT({command_buffer:?}, {aspect_mask:?})");

    let mut packet = new_packet(1000001098);
    packet.write(command_buffer);
    packet.write(aspect_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewport.html>"]
unsafe extern "system" fn vkCmdSetViewport(
    command_buffer: NonDisposableHandle,
    first_viewport: u32,
    viewport_count: u32,
    p_viewports: *const VkViewport,
) -> c_void {
    trace!("called vkCmdSetViewport({command_buffer:?}, {first_viewport:?}, {viewport_count:?}, {p_viewports:?})");

    let mut packet = new_packet(1000001099);
    packet.write(command_buffer);
    packet.write(first_viewport);
    packet.write(viewport_count);
    packet.write_nullable_raw_ptr(p_viewports);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetScissor.html>"]
unsafe extern "system" fn vkCmdSetScissor(
    command_buffer: NonDisposableHandle,
    first_scissor: u32,
    scissor_count: u32,
    p_scissors: *const VkRect2D,
) -> c_void {
    trace!("called vkCmdSetScissor({command_buffer:?}, {first_scissor:?}, {scissor_count:?}, {p_scissors:?})");

    let mut packet = new_packet(1000001100);
    packet.write(command_buffer);
    packet.write(first_scissor);
    packet.write(scissor_count);
    packet.write_nullable_raw_ptr(p_scissors);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineWidth.html>"]
unsafe extern "system" fn vkCmdSetLineWidth(
    command_buffer: NonDisposableHandle,
    line_width: f32,
) -> c_void {
    trace!("called vkCmdSetLineWidth({command_buffer:?}, {line_width:?})");

    let mut packet = new_packet(1000001101);
    packet.write(command_buffer);
    packet.write(line_width);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBias.html>"]
unsafe extern "system" fn vkCmdSetDepthBias(
    command_buffer: NonDisposableHandle,
    depth_bias_constant_factor: f32,
    depth_bias_clamp: f32,
    depth_bias_slope_factor: f32,
) -> c_void {
    trace!("called vkCmdSetDepthBias({command_buffer:?}, {depth_bias_constant_factor:?}, {depth_bias_clamp:?}, {depth_bias_slope_factor:?})");

    let mut packet = new_packet(1000001102);
    packet.write(command_buffer);
    packet.write(depth_bias_constant_factor);
    packet.write(depth_bias_clamp);
    packet.write(depth_bias_slope_factor);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetBlendConstants.html>"]
unsafe extern "system" fn vkCmdSetBlendConstants(
    command_buffer: NonDisposableHandle,
    blend_constants: *const [f32; 4],
) -> c_void {
    trace!("called vkCmdSetBlendConstants({command_buffer:?}, {blend_constants:?})");

    let mut packet = new_packet(1000001103);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(blend_constants);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBounds.html>"]
unsafe extern "system" fn vkCmdSetDepthBounds(
    command_buffer: NonDisposableHandle,
    min_depth_bounds: f32,
    max_depth_bounds: f32,
) -> c_void {
    trace!("called vkCmdSetDepthBounds({command_buffer:?}, {min_depth_bounds:?}, {max_depth_bounds:?})");

    let mut packet = new_packet(1000001104);
    packet.write(command_buffer);
    packet.write(min_depth_bounds);
    packet.write(max_depth_bounds);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilCompareMask.html>"]
unsafe extern "system" fn vkCmdSetStencilCompareMask(
    command_buffer: NonDisposableHandle,
    face_mask: NonDisposableHandle,
    compare_mask: u32,
) -> c_void {
    trace!("called vkCmdSetStencilCompareMask({command_buffer:?}, {face_mask:?}, {compare_mask:?})");

    let mut packet = new_packet(1000001105);
    packet.write(command_buffer);
    packet.write(face_mask);
    packet.write(compare_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilWriteMask.html>"]
unsafe extern "system" fn vkCmdSetStencilWriteMask(
    command_buffer: NonDisposableHandle,
    face_mask: NonDisposableHandle,
    write_mask: u32,
) -> c_void {
    trace!("called vkCmdSetStencilWriteMask({command_buffer:?}, {face_mask:?}, {write_mask:?})");

    let mut packet = new_packet(1000001106);
    packet.write(command_buffer);
    packet.write(face_mask);
    packet.write(write_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilReference.html>"]
unsafe extern "system" fn vkCmdSetStencilReference(
    command_buffer: NonDisposableHandle,
    face_mask: NonDisposableHandle,
    reference: u32,
) -> c_void {
    trace!("called vkCmdSetStencilReference({command_buffer:?}, {face_mask:?}, {reference:?})");

    let mut packet = new_packet(1000001107);
    packet.write(command_buffer);
    packet.write(face_mask);
    packet.write(reference);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorSets.html>"]
unsafe extern "system" fn vkCmdBindDescriptorSets(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    layout: NonDisposableHandle,
    first_set: u32,
    descriptor_set_count: u32,
    p_descriptor_sets: *const NonDisposableHandle,
    dynamic_offset_count: u32,
    p_dynamic_offsets: *const u32,
) -> c_void {
    trace!("called vkCmdBindDescriptorSets({command_buffer:?}, {pipeline_bind_point:?}, {layout:?}, {first_set:?}, {descriptor_set_count:?}, {p_descriptor_sets:?}, {dynamic_offset_count:?}, {p_dynamic_offsets:?})");

    let mut packet = new_packet(1000001108);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(layout);
    packet.write(first_set);
    packet.write(descriptor_set_count);
    packet.write_nullable_raw_ptr(p_descriptor_sets);
    packet.write(dynamic_offset_count);
    packet.write_nullable_raw_ptr(p_dynamic_offsets);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindIndexBuffer.html>"]
unsafe extern "system" fn vkCmdBindIndexBuffer(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    index_type: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindIndexBuffer({command_buffer:?}, {buffer:?}, {offset:?}, {index_type:?})");

    let mut packet = new_packet(1000001109);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(index_type);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindVertexBuffers.html>"]
unsafe extern "system" fn vkCmdBindVertexBuffers(
    command_buffer: NonDisposableHandle,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const NonDisposableHandle,
    p_offsets: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindVertexBuffers({command_buffer:?}, {first_binding:?}, {binding_count:?}, {p_buffers:?}, {p_offsets:?})");

    let mut packet = new_packet(1000001110);
    packet.write(command_buffer);
    packet.write(first_binding);
    packet.write(binding_count);
    packet.write_nullable_raw_ptr(p_buffers);
    packet.write_nullable_raw_ptr(p_offsets);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDraw.html>"]
unsafe extern "system" fn vkCmdDraw(
    command_buffer: NonDisposableHandle,
    vertex_count: u32,
    instance_count: u32,
    first_vertex: u32,
    first_instance: u32,
) -> c_void {
    trace!("called vkCmdDraw({command_buffer:?}, {vertex_count:?}, {instance_count:?}, {first_vertex:?}, {first_instance:?})");

    let mut packet = new_packet(1000001111);
    packet.write(command_buffer);
    packet.write(vertex_count);
    packet.write(instance_count);
    packet.write(first_vertex);
    packet.write(first_instance);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexed.html>"]
unsafe extern "system" fn vkCmdDrawIndexed(
    command_buffer: NonDisposableHandle,
    index_count: u32,
    instance_count: u32,
    first_index: u32,
    vertex_offset: i32,
    first_instance: u32,
) -> c_void {
    trace!("called vkCmdDrawIndexed({command_buffer:?}, {index_count:?}, {instance_count:?}, {first_index:?}, {vertex_offset:?}, {first_instance:?})");

    let mut packet = new_packet(1000001112);
    packet.write(command_buffer);
    packet.write(index_count);
    packet.write(instance_count);
    packet.write(first_index);
    packet.write(vertex_offset);
    packet.write(first_instance);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMultiEXT.html>"]
unsafe extern "system" fn vkCmdDrawMultiEXT(
    command_buffer: NonDisposableHandle,
    draw_count: u32,
    p_vertex_info: *const VkMultiDrawInfoEXT,
    instance_count: u32,
    first_instance: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawMultiEXT({command_buffer:?}, {draw_count:?}, {p_vertex_info:?}, {instance_count:?}, {first_instance:?}, {stride:?})");

    let mut packet = new_packet(1000001113);
    packet.write(command_buffer);
    packet.write(draw_count);
    packet.write_nullable_raw_ptr(p_vertex_info);
    packet.write(instance_count);
    packet.write(first_instance);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMultiIndexedEXT.html>"]
unsafe extern "system" fn vkCmdDrawMultiIndexedEXT(
    command_buffer: NonDisposableHandle,
    draw_count: u32,
    p_index_info: *const VkMultiDrawIndexedInfoEXT,
    instance_count: u32,
    first_instance: u32,
    stride: u32,
    p_vertex_offset: *const i32,
) -> c_void {
    trace!("called vkCmdDrawMultiIndexedEXT({command_buffer:?}, {draw_count:?}, {p_index_info:?}, {instance_count:?}, {first_instance:?}, {stride:?}, {p_vertex_offset:?})");

    let mut packet = new_packet(1000001114);
    packet.write(command_buffer);
    packet.write(draw_count);
    packet.write_nullable_raw_ptr(p_index_info);
    packet.write(instance_count);
    packet.write(first_instance);
    packet.write(stride);
    packet.write_nullable_raw_ptr(p_vertex_offset);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirect.html>"]
unsafe extern "system" fn vkCmdDrawIndirect(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawIndirect({command_buffer:?}, {buffer:?}, {offset:?}, {draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001115);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexedIndirect.html>"]
unsafe extern "system" fn vkCmdDrawIndexedIndirect(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawIndexedIndirect({command_buffer:?}, {buffer:?}, {offset:?}, {draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001116);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatch.html>"]
unsafe extern "system" fn vkCmdDispatch(
    command_buffer: NonDisposableHandle,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) -> c_void {
    trace!("called vkCmdDispatch({command_buffer:?}, {group_count_x:?}, {group_count_y:?}, {group_count_z:?})");

    let mut packet = new_packet(1000001117);
    packet.write(command_buffer);
    packet.write(group_count_x);
    packet.write(group_count_y);
    packet.write(group_count_z);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchIndirect.html>"]
unsafe extern "system" fn vkCmdDispatchIndirect(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdDispatchIndirect({command_buffer:?}, {buffer:?}, {offset:?})");

    let mut packet = new_packet(1000001118);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSubpassShadingHUAWEI.html>"]
unsafe extern "system" fn vkCmdSubpassShadingHUAWEI(
    command_buffer: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSubpassShadingHUAWEI({command_buffer:?})");

    let mut packet = new_packet(1000001119);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawClusterHUAWEI.html>"]
unsafe extern "system" fn vkCmdDrawClusterHUAWEI(
    command_buffer: NonDisposableHandle,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) -> c_void {
    trace!("called vkCmdDrawClusterHUAWEI({command_buffer:?}, {group_count_x:?}, {group_count_y:?}, {group_count_z:?})");

    let mut packet = new_packet(1000001120);
    packet.write(command_buffer);
    packet.write(group_count_x);
    packet.write(group_count_y);
    packet.write(group_count_z);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawClusterIndirectHUAWEI.html>"]
unsafe extern "system" fn vkCmdDrawClusterIndirectHUAWEI(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdDrawClusterIndirectHUAWEI({command_buffer:?}, {buffer:?}, {offset:?})");

    let mut packet = new_packet(1000001121);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdUpdatePipelineIndirectBufferNV.html>"]
unsafe extern "system" fn vkCmdUpdatePipelineIndirectBufferNV(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    pipeline: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdUpdatePipelineIndirectBufferNV({command_buffer:?}, {pipeline_bind_point:?}, {pipeline:?})");

    let mut packet = new_packet(1000001122);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(pipeline);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBuffer.html>"]
unsafe extern "system" fn vkCmdCopyBuffer(
    command_buffer: NonDisposableHandle,
    src_buffer: NonDisposableHandle,
    dst_buffer: NonDisposableHandle,
    region_count: u32,
    p_regions: *const VkBufferCopy,
) -> c_void {
    trace!("called vkCmdCopyBuffer({command_buffer:?}, {src_buffer:?}, {dst_buffer:?}, {region_count:?}, {p_regions:?})");

    let mut packet = new_packet(1000001123);
    packet.write(command_buffer);
    packet.write(src_buffer);
    packet.write(dst_buffer);
    packet.write(region_count);
    packet.write_nullable_raw_ptr(p_regions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImage.html>"]
unsafe extern "system" fn vkCmdCopyImage(
    command_buffer: NonDisposableHandle,
    src_image: NonDisposableHandle,
    src_image_layout: NonDisposableHandle,
    dst_image: NonDisposableHandle,
    dst_image_layout: NonDisposableHandle,
    region_count: u32,
    p_regions: *const VkImageCopy,
) -> c_void {
    trace!("called vkCmdCopyImage({command_buffer:?}, {src_image:?}, {src_image_layout:?}, {dst_image:?}, {dst_image_layout:?}, {region_count:?}, {p_regions:?})");

    let mut packet = new_packet(1000001124);
    packet.write(command_buffer);
    packet.write(src_image);
    packet.write(src_image_layout);
    packet.write(dst_image);
    packet.write(dst_image_layout);
    packet.write(region_count);
    packet.write_nullable_raw_ptr(p_regions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBlitImage.html>"]
unsafe extern "system" fn vkCmdBlitImage(
    command_buffer: NonDisposableHandle,
    src_image: NonDisposableHandle,
    src_image_layout: NonDisposableHandle,
    dst_image: NonDisposableHandle,
    dst_image_layout: NonDisposableHandle,
    region_count: u32,
    p_regions: *const VkImageBlit,
    filter: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBlitImage({command_buffer:?}, {src_image:?}, {src_image_layout:?}, {dst_image:?}, {dst_image_layout:?}, {region_count:?}, {p_regions:?}, {filter:?})");

    let mut packet = new_packet(1000001125);
    packet.write(command_buffer);
    packet.write(src_image);
    packet.write(src_image_layout);
    packet.write(dst_image);
    packet.write(dst_image_layout);
    packet.write(region_count);
    packet.write_nullable_raw_ptr(p_regions);
    packet.write(filter);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBufferToImage.html>"]
unsafe extern "system" fn vkCmdCopyBufferToImage(
    command_buffer: NonDisposableHandle,
    src_buffer: NonDisposableHandle,
    dst_image: NonDisposableHandle,
    dst_image_layout: NonDisposableHandle,
    region_count: u32,
    p_regions: *const VkBufferImageCopy,
) -> c_void {
    trace!("called vkCmdCopyBufferToImage({command_buffer:?}, {src_buffer:?}, {dst_image:?}, {dst_image_layout:?}, {region_count:?}, {p_regions:?})");

    let mut packet = new_packet(1000001126);
    packet.write(command_buffer);
    packet.write(src_buffer);
    packet.write(dst_image);
    packet.write(dst_image_layout);
    packet.write(region_count);
    packet.write_nullable_raw_ptr(p_regions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImageToBuffer.html>"]
unsafe extern "system" fn vkCmdCopyImageToBuffer(
    command_buffer: NonDisposableHandle,
    src_image: NonDisposableHandle,
    src_image_layout: NonDisposableHandle,
    dst_buffer: NonDisposableHandle,
    region_count: u32,
    p_regions: *const VkBufferImageCopy,
) -> c_void {
    trace!("called vkCmdCopyImageToBuffer({command_buffer:?}, {src_image:?}, {src_image_layout:?}, {dst_buffer:?}, {region_count:?}, {p_regions:?})");

    let mut packet = new_packet(1000001127);
    packet.write(command_buffer);
    packet.write(src_image);
    packet.write(src_image_layout);
    packet.write(dst_buffer);
    packet.write(region_count);
    packet.write_nullable_raw_ptr(p_regions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryIndirectNV.html>"]
unsafe extern "system" fn vkCmdCopyMemoryIndirectNV(
    command_buffer: NonDisposableHandle,
    copy_buffer_address: NonDisposableHandle,
    copy_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdCopyMemoryIndirectNV({command_buffer:?}, {copy_buffer_address:?}, {copy_count:?}, {stride:?})");

    let mut packet = new_packet(1000001128);
    packet.write(command_buffer);
    packet.write(copy_buffer_address);
    packet.write(copy_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToImageIndirectNV.html>"]
unsafe extern "system" fn vkCmdCopyMemoryToImageIndirectNV(
    command_buffer: NonDisposableHandle,
    copy_buffer_address: NonDisposableHandle,
    copy_count: u32,
    stride: u32,
    dst_image: NonDisposableHandle,
    dst_image_layout: NonDisposableHandle,
    p_image_subresources: *const VkImageSubresourceLayers,
) -> c_void {
    trace!("called vkCmdCopyMemoryToImageIndirectNV({command_buffer:?}, {copy_buffer_address:?}, {copy_count:?}, {stride:?}, {dst_image:?}, {dst_image_layout:?}, {p_image_subresources:?})");

    let mut packet = new_packet(1000001129);
    packet.write(command_buffer);
    packet.write(copy_buffer_address);
    packet.write(copy_count);
    packet.write(stride);
    packet.write(dst_image);
    packet.write(dst_image_layout);
    packet.write_nullable_raw_ptr(p_image_subresources);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdUpdateBuffer.html>"]
unsafe extern "system" fn vkCmdUpdateBuffer(
    command_buffer: NonDisposableHandle,
    dst_buffer: NonDisposableHandle,
    dst_offset: NonDisposableHandle,
    data_size: NonDisposableHandle,
    p_data: *const c_void,
) -> c_void {
    trace!("called vkCmdUpdateBuffer({command_buffer:?}, {dst_buffer:?}, {dst_offset:?}, {data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001130);
    packet.write(command_buffer);
    packet.write(dst_buffer);
    packet.write(dst_offset);
    packet.write(data_size);
    packet.write_nullable_raw_ptr(p_data);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdFillBuffer.html>"]
unsafe extern "system" fn vkCmdFillBuffer(
    command_buffer: NonDisposableHandle,
    dst_buffer: NonDisposableHandle,
    dst_offset: NonDisposableHandle,
    size: NonDisposableHandle,
    data: u32,
) -> c_void {
    trace!("called vkCmdFillBuffer({command_buffer:?}, {dst_buffer:?}, {dst_offset:?}, {size:?}, {data:?})");

    let mut packet = new_packet(1000001131);
    packet.write(command_buffer);
    packet.write(dst_buffer);
    packet.write(dst_offset);
    packet.write(size);
    packet.write(data);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearColorImage.html>"]
unsafe extern "system" fn vkCmdClearColorImage(
    command_buffer: NonDisposableHandle,
    image: NonDisposableHandle,
    image_layout: NonDisposableHandle,
    p_color: *const VkClearColorValue,
    range_count: u32,
    p_ranges: *const VkImageSubresourceRange,
) -> c_void {
    trace!("called vkCmdClearColorImage({command_buffer:?}, {image:?}, {image_layout:?}, {p_color:?}, {range_count:?}, {p_ranges:?})");

    let mut packet = new_packet(1000001132);
    packet.write(command_buffer);
    packet.write(image);
    packet.write(image_layout);
    packet.write_nullable_raw_ptr(p_color);
    packet.write(range_count);
    packet.write_nullable_raw_ptr(p_ranges);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearDepthStencilImage.html>"]
unsafe extern "system" fn vkCmdClearDepthStencilImage(
    command_buffer: NonDisposableHandle,
    image: NonDisposableHandle,
    image_layout: NonDisposableHandle,
    p_depth_stencil: *const VkClearDepthStencilValue,
    range_count: u32,
    p_ranges: *const VkImageSubresourceRange,
) -> c_void {
    trace!("called vkCmdClearDepthStencilImage({command_buffer:?}, {image:?}, {image_layout:?}, {p_depth_stencil:?}, {range_count:?}, {p_ranges:?})");

    let mut packet = new_packet(1000001133);
    packet.write(command_buffer);
    packet.write(image);
    packet.write(image_layout);
    packet.write_nullable_raw_ptr(p_depth_stencil);
    packet.write(range_count);
    packet.write_nullable_raw_ptr(p_ranges);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdClearAttachments.html>"]
unsafe extern "system" fn vkCmdClearAttachments(
    command_buffer: NonDisposableHandle,
    attachment_count: u32,
    p_attachments: *const VkClearAttachment,
    rect_count: u32,
    p_rects: *const VkClearRect,
) -> c_void {
    trace!("called vkCmdClearAttachments({command_buffer:?}, {attachment_count:?}, {p_attachments:?}, {rect_count:?}, {p_rects:?})");

    let mut packet = new_packet(1000001134);
    packet.write(command_buffer);
    packet.write(attachment_count);
    packet.write_nullable_raw_ptr(p_attachments);
    packet.write(rect_count);
    packet.write_nullable_raw_ptr(p_rects);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResolveImage.html>"]
unsafe extern "system" fn vkCmdResolveImage(
    command_buffer: NonDisposableHandle,
    src_image: NonDisposableHandle,
    src_image_layout: NonDisposableHandle,
    dst_image: NonDisposableHandle,
    dst_image_layout: NonDisposableHandle,
    region_count: u32,
    p_regions: *const VkImageResolve,
) -> c_void {
    trace!("called vkCmdResolveImage({command_buffer:?}, {src_image:?}, {src_image_layout:?}, {dst_image:?}, {dst_image_layout:?}, {region_count:?}, {p_regions:?})");

    let mut packet = new_packet(1000001135);
    packet.write(command_buffer);
    packet.write(src_image);
    packet.write(src_image_layout);
    packet.write(dst_image);
    packet.write(dst_image_layout);
    packet.write(region_count);
    packet.write_nullable_raw_ptr(p_regions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetEvent.html>"]
unsafe extern "system" fn vkCmdSetEvent(
    command_buffer: NonDisposableHandle,
    event: NonDisposableHandle,
    stage_mask: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetEvent({command_buffer:?}, {event:?}, {stage_mask:?})");

    let mut packet = new_packet(1000001136);
    packet.write(command_buffer);
    packet.write(event);
    packet.write(stage_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetEvent.html>"]
unsafe extern "system" fn vkCmdResetEvent(
    command_buffer: NonDisposableHandle,
    event: NonDisposableHandle,
    stage_mask: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdResetEvent({command_buffer:?}, {event:?}, {stage_mask:?})");

    let mut packet = new_packet(1000001137);
    packet.write(command_buffer);
    packet.write(event);
    packet.write(stage_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWaitEvents.html>"]
unsafe extern "system" fn vkCmdWaitEvents(
    command_buffer: NonDisposableHandle,
    event_count: u32,
    p_events: *const NonDisposableHandle,
    src_stage_mask: NonDisposableHandle,
    dst_stage_mask: NonDisposableHandle,
    memory_barrier_count: u32,
    p_memory_barriers: *const VkMemoryBarrier,
    buffer_memory_barrier_count: u32,
    p_buffer_memory_barriers: *const VkBufferMemoryBarrier,
    image_memory_barrier_count: u32,
    p_image_memory_barriers: *const VkImageMemoryBarrier,
) -> c_void {
    trace!("called vkCmdWaitEvents({command_buffer:?}, {event_count:?}, {p_events:?}, {src_stage_mask:?}, {dst_stage_mask:?}, {memory_barrier_count:?}, {p_memory_barriers:?}, {buffer_memory_barrier_count:?}, {p_buffer_memory_barriers:?}, {image_memory_barrier_count:?}, {p_image_memory_barriers:?})");

    let mut packet = new_packet(1000001138);
    packet.write(command_buffer);
    packet.write(event_count);
    packet.write_nullable_raw_ptr(p_events);
    packet.write(src_stage_mask);
    packet.write(dst_stage_mask);
    packet.write(memory_barrier_count);
    packet.write_nullable_raw_ptr(p_memory_barriers);
    packet.write(buffer_memory_barrier_count);
    packet.write_nullable_raw_ptr(p_buffer_memory_barriers);
    packet.write(image_memory_barrier_count);
    packet.write_nullable_raw_ptr(p_image_memory_barriers);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPipelineBarrier.html>"]
unsafe extern "system" fn vkCmdPipelineBarrier(
    command_buffer: NonDisposableHandle,
    src_stage_mask: NonDisposableHandle,
    dst_stage_mask: NonDisposableHandle,
    dependency_flags: NonDisposableHandle,
    memory_barrier_count: u32,
    p_memory_barriers: *const VkMemoryBarrier,
    buffer_memory_barrier_count: u32,
    p_buffer_memory_barriers: *const VkBufferMemoryBarrier,
    image_memory_barrier_count: u32,
    p_image_memory_barriers: *const VkImageMemoryBarrier,
) -> c_void {
    trace!("called vkCmdPipelineBarrier({command_buffer:?}, {src_stage_mask:?}, {dst_stage_mask:?}, {dependency_flags:?}, {memory_barrier_count:?}, {p_memory_barriers:?}, {buffer_memory_barrier_count:?}, {p_buffer_memory_barriers:?}, {image_memory_barrier_count:?}, {p_image_memory_barriers:?})");

    let mut packet = new_packet(1000001139);
    packet.write(command_buffer);
    packet.write(src_stage_mask);
    packet.write(dst_stage_mask);
    packet.write(dependency_flags);
    packet.write(memory_barrier_count);
    packet.write_nullable_raw_ptr(p_memory_barriers);
    packet.write(buffer_memory_barrier_count);
    packet.write_nullable_raw_ptr(p_buffer_memory_barriers);
    packet.write(image_memory_barrier_count);
    packet.write_nullable_raw_ptr(p_image_memory_barriers);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginQuery.html>"]
unsafe extern "system" fn vkCmdBeginQuery(
    command_buffer: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    query: u32,
    flags: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBeginQuery({command_buffer:?}, {query_pool:?}, {query:?}, {flags:?})");

    let mut packet = new_packet(1000001140);
    packet.write(command_buffer);
    packet.write(query_pool);
    packet.write(query);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndQuery.html>"]
unsafe extern "system" fn vkCmdEndQuery(
    command_buffer: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    query: u32,
) -> c_void {
    trace!("called vkCmdEndQuery({command_buffer:?}, {query_pool:?}, {query:?})");

    let mut packet = new_packet(1000001141);
    packet.write(command_buffer);
    packet.write(query_pool);
    packet.write(query);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginConditionalRenderingEXT.html>"]
unsafe extern "system" fn vkCmdBeginConditionalRenderingEXT(
    command_buffer: NonDisposableHandle,
    p_conditional_rendering_begin: *const VkConditionalRenderingBeginInfoEXT,
) -> c_void {
    trace!("called vkCmdBeginConditionalRenderingEXT({command_buffer:?}, {p_conditional_rendering_begin:?})");

    let mut packet = new_packet(1000001142);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_conditional_rendering_begin);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndConditionalRenderingEXT.html>"]
unsafe extern "system" fn vkCmdEndConditionalRenderingEXT(
    command_buffer: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdEndConditionalRenderingEXT({command_buffer:?})");

    let mut packet = new_packet(1000001143);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetQueryPool.html>"]
unsafe extern "system" fn vkCmdResetQueryPool(
    command_buffer: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
    query_count: u32,
) -> c_void {
    trace!("called vkCmdResetQueryPool({command_buffer:?}, {query_pool:?}, {first_query:?}, {query_count:?})");

    let mut packet = new_packet(1000001144);
    packet.write(command_buffer);
    packet.write(query_pool);
    packet.write(first_query);
    packet.write(query_count);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteTimestamp.html>"]
unsafe extern "system" fn vkCmdWriteTimestamp(
    command_buffer: NonDisposableHandle,
    pipeline_stage: vk::PipelineStageFlags,
    query_pool: NonDisposableHandle,
    query: u32,
) -> c_void {
    trace!("called vkCmdWriteTimestamp({command_buffer:?}, {pipeline_stage:?}, {query_pool:?}, {query:?})");

    let mut packet = new_packet(1000001145);
    packet.write(command_buffer);
    packet.write(pipeline_stage);
    packet.write(query_pool);
    packet.write(query);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyQueryPoolResults.html>"]
unsafe extern "system" fn vkCmdCopyQueryPoolResults(
    command_buffer: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
    query_count: u32,
    dst_buffer: NonDisposableHandle,
    dst_offset: NonDisposableHandle,
    stride: NonDisposableHandle,
    flags: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdCopyQueryPoolResults({command_buffer:?}, {query_pool:?}, {first_query:?}, {query_count:?}, {dst_buffer:?}, {dst_offset:?}, {stride:?}, {flags:?})");

    let mut packet = new_packet(1000001146);
    packet.write(command_buffer);
    packet.write(query_pool);
    packet.write(first_query);
    packet.write(query_count);
    packet.write(dst_buffer);
    packet.write(dst_offset);
    packet.write(stride);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants.html>"]
unsafe extern "system" fn vkCmdPushConstants(
    command_buffer: NonDisposableHandle,
    layout: NonDisposableHandle,
    stage_flags: NonDisposableHandle,
    offset: u32,
    size: u32,
    p_values: *const c_void,
) -> c_void {
    trace!("called vkCmdPushConstants({command_buffer:?}, {layout:?}, {stage_flags:?}, {offset:?}, {size:?}, {p_values:?})");

    let mut packet = new_packet(1000001147);
    packet.write(command_buffer);
    packet.write(layout);
    packet.write(stage_flags);
    packet.write(offset);
    packet.write(size);
    packet.write_nullable_raw_ptr(p_values);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass.html>"]
unsafe extern "system" fn vkCmdBeginRenderPass(
    command_buffer: NonDisposableHandle,
    p_render_pass_begin: *const VkRenderPassBeginInfo,
    contents: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBeginRenderPass({command_buffer:?}, {p_render_pass_begin:?}, {contents:?})");

    let mut packet = new_packet(1000001148);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_render_pass_begin);
    packet.write(contents);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdNextSubpass.html>"]
unsafe extern "system" fn vkCmdNextSubpass(
    command_buffer: NonDisposableHandle,
    contents: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdNextSubpass({command_buffer:?}, {contents:?})");

    let mut packet = new_packet(1000001149);
    packet.write(command_buffer);
    packet.write(contents);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderPass.html>"]
unsafe extern "system" fn vkCmdEndRenderPass(
    command_buffer: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdEndRenderPass({command_buffer:?})");

    let mut packet = new_packet(1000001150);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdExecuteCommands.html>"]
unsafe extern "system" fn vkCmdExecuteCommands(
    command_buffer: NonDisposableHandle,
    command_buffer_count: u32,
    p_command_buffers: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdExecuteCommands({command_buffer:?}, {command_buffer_count:?}, {p_command_buffers:?})");

    let mut packet = new_packet(1000001151);
    packet.write(command_buffer);
    packet.write(command_buffer_count);
    packet.write_nullable_raw_ptr(p_command_buffers);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAndroidSurfaceKHR.html>"]
unsafe extern "system" fn vkCreateAndroidSurfaceKHR(
    instance: NonDisposableHandle,
    p_create_info: *const VkAndroidSurfaceCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateAndroidSurfaceKHR({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001152);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPropertiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceDisplayPropertiesKHR(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkDisplayPropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceDisplayPropertiesKHR({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001153);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPlanePropertiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkDisplayPlanePropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceDisplayPlanePropertiesKHR({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001154);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneSupportedDisplaysKHR.html>"]
unsafe extern "system" fn vkGetDisplayPlaneSupportedDisplaysKHR(
    physical_device: NonDisposableHandle,
    plane_index: u32,
    p_display_count: *mut u32,
    p_displays: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetDisplayPlaneSupportedDisplaysKHR({physical_device:?}, {plane_index:?}, {p_display_count:?}, {p_displays:?})");

    let mut packet = new_packet(1000001155);
    packet.write(physical_device);
    packet.write(plane_index);
    packet.write_vk_array_count(p_display_count, p_displays);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_display_count, p_displays);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayModePropertiesKHR.html>"]
unsafe extern "system" fn vkGetDisplayModePropertiesKHR(
    physical_device: NonDisposableHandle,
    display: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkDisplayModePropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetDisplayModePropertiesKHR({physical_device:?}, {display:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001156);
    packet.write(physical_device);
    packet.write(display);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDisplayModeKHR.html>"]
unsafe extern "system" fn vkCreateDisplayModeKHR(
    physical_device: NonDisposableHandle,
    display: NonDisposableHandle,
    p_create_info: *const VkDisplayModeCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_mode: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDisplayModeKHR({physical_device:?}, {display:?}, {p_create_info:?}, {p_allocator:?}, {p_mode:?})");

    let mut packet = new_packet(1000001157);
    packet.write(physical_device);
    packet.write(display);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_mode);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_mode);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneCapabilitiesKHR.html>"]
unsafe extern "system" fn vkGetDisplayPlaneCapabilitiesKHR(
    physical_device: NonDisposableHandle,
    mode: NonDisposableHandle,
    plane_index: u32,
    p_capabilities: *mut VkDisplayPlaneCapabilitiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetDisplayPlaneCapabilitiesKHR({physical_device:?}, {mode:?}, {plane_index:?}, {p_capabilities:?})");

    let mut packet = new_packet(1000001158);
    packet.write(physical_device);
    packet.write(mode);
    packet.write(plane_index);
    packet.write_nullable_raw_ptr_mut(p_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDisplayPlaneSurfaceKHR.html>"]
unsafe extern "system" fn vkCreateDisplayPlaneSurfaceKHR(
    instance: NonDisposableHandle,
    p_create_info: *const VkDisplaySurfaceCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDisplayPlaneSurfaceKHR({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001159);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSharedSwapchainsKHR.html>"]
unsafe extern "system" fn vkCreateSharedSwapchainsKHR(
    device: NonDisposableHandle,
    swapchain_count: u32,
    p_create_infos: *const VkSwapchainCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_swapchains: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateSharedSwapchainsKHR({device:?}, {swapchain_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_swapchains:?})");

    let mut packet = new_packet(1000001160);
    packet.write(device);
    packet.write(swapchain_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_swapchains);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_swapchains);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySurfaceKHR.html>"]
unsafe extern "system" fn vkDestroySurfaceKHR(
    instance: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroySurfaceKHR({instance:?}, {surface:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001161);
    packet.write(instance);
    packet.write(surface);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfaceSupportKHR(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    surface: NonDisposableHandle,
    p_supported: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfaceSupportKHR({physical_device:?}, {queue_family_index:?}, {surface:?}, {p_supported:?})");

    let mut packet = new_packet(1000001162);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write(surface);
    packet.write_nullable_raw_ptr_mut(p_supported);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_supported);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilitiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    physical_device: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_surface_capabilities: *mut VkSurfaceCapabilitiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfaceCapabilitiesKHR({physical_device:?}, {surface:?}, {p_surface_capabilities:?})");

    let mut packet = new_packet(1000001163);
    packet.write(physical_device);
    packet.write(surface);
    packet.write_nullable_raw_ptr_mut(p_surface_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceFormatsKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfaceFormatsKHR(
    physical_device: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_surface_format_count: *mut u32,
    p_surface_formats: *mut VkSurfaceFormatKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfaceFormatsKHR({physical_device:?}, {surface:?}, {p_surface_format_count:?}, {p_surface_formats:?})");

    let mut packet = new_packet(1000001164);
    packet.write(physical_device);
    packet.write(surface);
    packet.write_vk_array_count(p_surface_format_count, p_surface_formats);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_surface_format_count, p_surface_formats);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfacePresentModesKHR(
    physical_device: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_present_mode_count: *mut u32,
    p_present_modes: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfacePresentModesKHR({physical_device:?}, {surface:?}, {p_present_mode_count:?}, {p_present_modes:?})");

    let mut packet = new_packet(1000001165);
    packet.write(physical_device);
    packet.write(surface);
    packet.write_vk_array_count(p_present_mode_count, p_present_modes);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_present_mode_count, p_present_modes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSwapchainKHR.html>"]
unsafe extern "system" fn vkCreateSwapchainKHR(
    device: NonDisposableHandle,
    p_create_info: *const VkSwapchainCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_swapchain: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateSwapchainKHR({device:?}, {p_create_info:?}, {p_allocator:?}, {p_swapchain:?})");

    let mut packet = new_packet(1000001166);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_swapchain);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_swapchain);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySwapchainKHR.html>"]
unsafe extern "system" fn vkDestroySwapchainKHR(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroySwapchainKHR({device:?}, {swapchain:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001167);
    packet.write(device);
    packet.write(swapchain);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainImagesKHR.html>"]
unsafe extern "system" fn vkGetSwapchainImagesKHR(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_swapchain_image_count: *mut u32,
    p_swapchain_images: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetSwapchainImagesKHR({device:?}, {swapchain:?}, {p_swapchain_image_count:?}, {p_swapchain_images:?})");

    let mut packet = new_packet(1000001168);
    packet.write(device);
    packet.write(swapchain);
    packet.write_vk_array_count(p_swapchain_image_count, p_swapchain_images);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_swapchain_image_count, p_swapchain_images);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireNextImageKHR.html>"]
unsafe extern "system" fn vkAcquireNextImageKHR(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    timeout: u64,
    semaphore: NonDisposableHandle,
    fence: NonDisposableHandle,
    p_image_index: *mut u32,
) -> NonDisposableHandle {
    trace!("called vkAcquireNextImageKHR({device:?}, {swapchain:?}, {timeout:?}, {semaphore:?}, {fence:?}, {p_image_index:?})");

    let mut packet = new_packet(1000001169);
    packet.write(device);
    packet.write(swapchain);
    packet.write(timeout);
    packet.write(semaphore);
    packet.write(fence);
    packet.write_nullable_raw_ptr_mut(p_image_index);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_image_index);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueuePresentKHR.html>"]
unsafe extern "system" fn vkQueuePresentKHR(
    queue: NonDisposableHandle,
    p_present_info: *const VkPresentInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkQueuePresentKHR({queue:?}, {p_present_info:?})");

    let mut packet = new_packet(1000001170);
    packet.write(queue);
    packet.write_nullable_raw_ptr(p_present_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateViSurfaceNN.html>"]
unsafe extern "system" fn vkCreateViSurfaceNN(
    instance: NonDisposableHandle,
    p_create_info: *const VkViSurfaceCreateInfoNN,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateViSurfaceNN({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001171);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateWaylandSurfaceKHR.html>"]
unsafe extern "system" fn vkCreateWaylandSurfaceKHR(
    instance: NonDisposableHandle,
    p_create_info: *const VkWaylandSurfaceCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateWaylandSurfaceKHR({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001172);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceWaylandPresentationSupportKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    display: *mut usize,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceWaylandPresentationSupportKHR({physical_device:?}, {queue_family_index:?}, {display:?})");

    let mut packet = new_packet(1000001173);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write_nullable_raw_ptr_mut(display);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(display);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateWin32SurfaceKHR.html>"]
unsafe extern "system" fn vkCreateWin32SurfaceKHR(
    instance: NonDisposableHandle,
    p_create_info: *const VkWin32SurfaceCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateWin32SurfaceKHR({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001174);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceWin32PresentationSupportKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceWin32PresentationSupportKHR(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceWin32PresentationSupportKHR({physical_device:?}, {queue_family_index:?})");

    let mut packet = new_packet(1000001175);
    packet.write(physical_device);
    packet.write(queue_family_index);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateXlibSurfaceKHR.html>"]
unsafe extern "system" fn vkCreateXlibSurfaceKHR(
    instance: NonDisposableHandle,
    p_create_info: *const VkXlibSurfaceCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateXlibSurfaceKHR({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001176);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceXlibPresentationSupportKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceXlibPresentationSupportKHR(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    dpy: *mut usize,
    visual_id: vk::VisualID,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceXlibPresentationSupportKHR({physical_device:?}, {queue_family_index:?}, {dpy:?}, {visual_id:?})");

    let mut packet = new_packet(1000001177);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write_nullable_raw_ptr_mut(dpy);
    packet.write(visual_id);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(dpy);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateXcbSurfaceKHR.html>"]
unsafe extern "system" fn vkCreateXcbSurfaceKHR(
    instance: NonDisposableHandle,
    p_create_info: *const VkXcbSurfaceCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateXcbSurfaceKHR({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001178);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceXcbPresentationSupportKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceXcbPresentationSupportKHR(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    connection: *mut usize,
    visual_id: vk::xcb_visualid_t,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceXcbPresentationSupportKHR({physical_device:?}, {queue_family_index:?}, {connection:?}, {visual_id:?})");

    let mut packet = new_packet(1000001179);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write_nullable_raw_ptr_mut(connection);
    packet.write(visual_id);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(connection);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDirectFBSurfaceEXT.html>"]
unsafe extern "system" fn vkCreateDirectFBSurfaceEXT(
    instance: NonDisposableHandle,
    p_create_info: *const VkDirectFBSurfaceCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDirectFBSurfaceEXT({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001180);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDirectFBPresentationSupportEXT.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceDirectFBPresentationSupportEXT(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    dfb: *mut usize,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceDirectFBPresentationSupportEXT({physical_device:?}, {queue_family_index:?}, {dfb:?})");

    let mut packet = new_packet(1000001181);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write_nullable_raw_ptr_mut(dfb);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(dfb);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateImagePipeSurfaceFUCHSIA.html>"]
unsafe extern "system" fn vkCreateImagePipeSurfaceFUCHSIA(
    instance: NonDisposableHandle,
    p_create_info: *const VkImagePipeSurfaceCreateInfoFUCHSIA,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateImagePipeSurfaceFUCHSIA({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001182);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateStreamDescriptorSurfaceGGP.html>"]
unsafe extern "system" fn vkCreateStreamDescriptorSurfaceGGP(
    instance: NonDisposableHandle,
    p_create_info: *const VkStreamDescriptorSurfaceCreateInfoGGP,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateStreamDescriptorSurfaceGGP({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001183);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateScreenSurfaceQNX.html>"]
unsafe extern "system" fn vkCreateScreenSurfaceQNX(
    instance: NonDisposableHandle,
    p_create_info: *const VkScreenSurfaceCreateInfoQNX,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateScreenSurfaceQNX({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001184);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceScreenPresentationSupportQNX.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceScreenPresentationSupportQNX(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    window: *mut usize,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceScreenPresentationSupportQNX({physical_device:?}, {queue_family_index:?}, {window:?})");

    let mut packet = new_packet(1000001185);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write_nullable_raw_ptr_mut(window);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(window);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDebugReportCallbackEXT.html>"]
unsafe extern "system" fn vkCreateDebugReportCallbackEXT(
    instance: NonDisposableHandle,
    p_create_info: *const VkDebugReportCallbackCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_callback: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDebugReportCallbackEXT({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_callback:?})");

    let mut packet = new_packet(1000001186);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_callback);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_callback);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDebugReportCallbackEXT.html>"]
unsafe extern "system" fn vkDestroyDebugReportCallbackEXT(
    instance: NonDisposableHandle,
    callback: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDebugReportCallbackEXT({instance:?}, {callback:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001187);
    packet.write(instance);
    packet.write(callback);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugReportMessageEXT.html>"]
unsafe extern "system" fn vkDebugReportMessageEXT(
    instance: NonDisposableHandle,
    flags: NonDisposableHandle,
    object_type: NonDisposableHandle,
    object: u64,
    location: usize,
    message_code: i32,
    p_layer_prefix: *const c_char,
    p_message: *const c_char,
) -> c_void {
    trace!("called vkDebugReportMessageEXT({instance:?}, {flags:?}, {object_type:?}, {object:?}, {location:?}, {message_code:?}, {p_layer_prefix:?}, {p_message:?})");

    let mut packet = new_packet(1000001188);
    packet.write(instance);
    packet.write(flags);
    packet.write(object_type);
    packet.write(object);
    packet.write(location);
    packet.write(message_code);
    packet.write_nullable_raw_ptr(p_layer_prefix);
    packet.write_nullable_raw_ptr(p_message);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugMarkerSetObjectNameEXT.html>"]
unsafe extern "system" fn vkDebugMarkerSetObjectNameEXT(
    device: NonDisposableHandle,
    p_name_info: *const VkDebugMarkerObjectNameInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkDebugMarkerSetObjectNameEXT({device:?}, {p_name_info:?})");

    let mut packet = new_packet(1000001189);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_name_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDebugMarkerSetObjectTagEXT.html>"]
unsafe extern "system" fn vkDebugMarkerSetObjectTagEXT(
    device: NonDisposableHandle,
    p_tag_info: *const VkDebugMarkerObjectTagInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkDebugMarkerSetObjectTagEXT({device:?}, {p_tag_info:?})");

    let mut packet = new_packet(1000001190);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_tag_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerBeginEXT.html>"]
unsafe extern "system" fn vkCmdDebugMarkerBeginEXT(
    command_buffer: NonDisposableHandle,
    p_marker_info: *const VkDebugMarkerMarkerInfoEXT,
) -> c_void {
    trace!("called vkCmdDebugMarkerBeginEXT({command_buffer:?}, {p_marker_info:?})");

    let mut packet = new_packet(1000001191);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_marker_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerEndEXT.html>"]
unsafe extern "system" fn vkCmdDebugMarkerEndEXT(
    command_buffer: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdDebugMarkerEndEXT({command_buffer:?})");

    let mut packet = new_packet(1000001192);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDebugMarkerInsertEXT.html>"]
unsafe extern "system" fn vkCmdDebugMarkerInsertEXT(
    command_buffer: NonDisposableHandle,
    p_marker_info: *const VkDebugMarkerMarkerInfoEXT,
) -> c_void {
    trace!("called vkCmdDebugMarkerInsertEXT({command_buffer:?}, {p_marker_info:?})");

    let mut packet = new_packet(1000001193);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_marker_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalImageFormatPropertiesNV.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    physical_device: NonDisposableHandle,
    format: NonDisposableHandle,
    type_: NonDisposableHandle,
    tiling: NonDisposableHandle,
    usage: NonDisposableHandle,
    flags: NonDisposableHandle,
    external_handle_type: NonDisposableHandle,
    p_external_image_format_properties: *mut VkExternalImageFormatPropertiesNV,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceExternalImageFormatPropertiesNV({physical_device:?}, {format:?}, {type_:?}, {tiling:?}, {usage:?}, {flags:?}, {external_handle_type:?}, {p_external_image_format_properties:?})");

    let mut packet = new_packet(1000001194);
    packet.write(physical_device);
    packet.write(format);
    packet.write(type_);
    packet.write(tiling);
    packet.write(usage);
    packet.write(flags);
    packet.write(external_handle_type);
    packet.write_nullable_raw_ptr_mut(p_external_image_format_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_external_image_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandleNV.html>"]
unsafe extern "system" fn vkGetMemoryWin32HandleNV(
    device: NonDisposableHandle,
    memory: NonDisposableHandle,
    handle_type: NonDisposableHandle,
    p_handle: *mut vk::HANDLE,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryWin32HandleNV({device:?}, {memory:?}, {handle_type:?}, {p_handle:?})");

    let mut packet = new_packet(1000001195);
    packet.write(device);
    packet.write(memory);
    packet.write(handle_type);
    packet.write_nullable_raw_ptr_mut(p_handle);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_handle);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdExecuteGeneratedCommandsNV.html>"]
unsafe extern "system" fn vkCmdExecuteGeneratedCommandsNV(
    command_buffer: NonDisposableHandle,
    is_preprocessed: NonDisposableHandle,
    p_generated_commands_info: *const VkGeneratedCommandsInfoNV,
) -> c_void {
    trace!("called vkCmdExecuteGeneratedCommandsNV({command_buffer:?}, {is_preprocessed:?}, {p_generated_commands_info:?})");

    let mut packet = new_packet(1000001196);
    packet.write(command_buffer);
    packet.write(is_preprocessed);
    packet.write_nullable_raw_ptr(p_generated_commands_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPreprocessGeneratedCommandsNV.html>"]
unsafe extern "system" fn vkCmdPreprocessGeneratedCommandsNV(
    command_buffer: NonDisposableHandle,
    p_generated_commands_info: *const VkGeneratedCommandsInfoNV,
) -> c_void {
    trace!("called vkCmdPreprocessGeneratedCommandsNV({command_buffer:?}, {p_generated_commands_info:?})");

    let mut packet = new_packet(1000001197);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_generated_commands_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindPipelineShaderGroupNV.html>"]
unsafe extern "system" fn vkCmdBindPipelineShaderGroupNV(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    group_index: u32,
) -> c_void {
    trace!("called vkCmdBindPipelineShaderGroupNV({command_buffer:?}, {pipeline_bind_point:?}, {pipeline:?}, {group_index:?})");

    let mut packet = new_packet(1000001198);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(pipeline);
    packet.write(group_index);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetGeneratedCommandsMemoryRequirementsNV.html>"]
unsafe extern "system" fn vkGetGeneratedCommandsMemoryRequirementsNV(
    device: NonDisposableHandle,
    p_info: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
    p_memory_requirements: *mut VkMemoryRequirements2,
) -> c_void {
    trace!("called vkGetGeneratedCommandsMemoryRequirementsNV({device:?}, {p_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001199);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateIndirectCommandsLayoutNV.html>"]
unsafe extern "system" fn vkCreateIndirectCommandsLayoutNV(
    device: NonDisposableHandle,
    p_create_info: *const VkIndirectCommandsLayoutCreateInfoNV,
    p_allocator: *const VkAllocationCallbacks,
    p_indirect_commands_layout: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateIndirectCommandsLayoutNV({device:?}, {p_create_info:?}, {p_allocator:?}, {p_indirect_commands_layout:?})");

    let mut packet = new_packet(1000001200);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_indirect_commands_layout);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_indirect_commands_layout);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyIndirectCommandsLayoutNV.html>"]
unsafe extern "system" fn vkDestroyIndirectCommandsLayoutNV(
    device: NonDisposableHandle,
    indirect_commands_layout: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyIndirectCommandsLayoutNV({device:?}, {indirect_commands_layout:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001201);
    packet.write(device);
    packet.write(indirect_commands_layout);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFeatures2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceFeatures2(
    physical_device: NonDisposableHandle,
    p_features: *mut VkPhysicalDeviceFeatures2,
) -> c_void {
    trace!("called vkGetPhysicalDeviceFeatures2({physical_device:?}, {p_features:?})");

    let mut packet = new_packet(1000001202);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(p_features);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_features);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceProperties2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceProperties2(
    physical_device: NonDisposableHandle,
    p_properties: *mut VkPhysicalDeviceProperties2,
) -> c_void {
    trace!("called vkGetPhysicalDeviceProperties2({physical_device:?}, {p_properties:?})");

    let mut packet = new_packet(1000001203);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFormatProperties2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceFormatProperties2(
    physical_device: NonDisposableHandle,
    format: NonDisposableHandle,
    p_format_properties: *mut VkFormatProperties2,
) -> c_void {
    trace!("called vkGetPhysicalDeviceFormatProperties2({physical_device:?}, {format:?}, {p_format_properties:?})");

    let mut packet = new_packet(1000001204);
    packet.write(physical_device);
    packet.write(format);
    packet.write_nullable_raw_ptr_mut(p_format_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceImageFormatProperties2(
    physical_device: NonDisposableHandle,
    p_image_format_info: *const VkPhysicalDeviceImageFormatInfo2,
    p_image_format_properties: *mut VkImageFormatProperties2,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceImageFormatProperties2({physical_device:?}, {p_image_format_info:?}, {p_image_format_properties:?})");

    let mut packet = new_packet(1000001205);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_image_format_info);
    packet.write_nullable_raw_ptr_mut(p_image_format_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_image_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceQueueFamilyProperties2(
    physical_device: NonDisposableHandle,
    p_queue_family_property_count: *mut u32,
    p_queue_family_properties: *mut VkQueueFamilyProperties2,
) -> c_void {
    trace!("called vkGetPhysicalDeviceQueueFamilyProperties2({physical_device:?}, {p_queue_family_property_count:?}, {p_queue_family_properties:?})");

    let mut packet = new_packet(1000001206);
    packet.write(physical_device);
    packet.write_vk_array_count(p_queue_family_property_count, p_queue_family_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_queue_family_property_count, p_queue_family_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMemoryProperties2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceMemoryProperties2(
    physical_device: NonDisposableHandle,
    p_memory_properties: *mut VkPhysicalDeviceMemoryProperties2,
) -> c_void {
    trace!("called vkGetPhysicalDeviceMemoryProperties2({physical_device:?}, {p_memory_properties:?})");

    let mut packet = new_packet(1000001207);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(p_memory_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties2.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSparseImageFormatProperties2(
    physical_device: NonDisposableHandle,
    p_format_info: *const VkPhysicalDeviceSparseImageFormatInfo2,
    p_property_count: *mut u32,
    p_properties: *mut VkSparseImageFormatProperties2,
) -> c_void {
    trace!("called vkGetPhysicalDeviceSparseImageFormatProperties2({physical_device:?}, {p_format_info:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001208);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_format_info);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetKHR.html>"]
unsafe extern "system" fn vkCmdPushDescriptorSetKHR(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    layout: NonDisposableHandle,
    set: u32,
    descriptor_write_count: u32,
    p_descriptor_writes: *const VkWriteDescriptorSet,
) -> c_void {
    trace!("called vkCmdPushDescriptorSetKHR({command_buffer:?}, {pipeline_bind_point:?}, {layout:?}, {set:?}, {descriptor_write_count:?}, {p_descriptor_writes:?})");

    let mut packet = new_packet(1000001209);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(layout);
    packet.write(set);
    packet.write(descriptor_write_count);
    packet.write_nullable_raw_ptr(p_descriptor_writes);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkTrimCommandPool.html>"]
unsafe extern "system" fn vkTrimCommandPool(
    device: NonDisposableHandle,
    command_pool: NonDisposableHandle,
    flags: NonDisposableHandle,
) -> c_void {
    trace!("called vkTrimCommandPool({device:?}, {command_pool:?}, {flags:?})");

    let mut packet = new_packet(1000001210);
    packet.write(device);
    packet.write(command_pool);
    packet.write(flags);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalBufferProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceExternalBufferProperties(
    physical_device: NonDisposableHandle,
    p_external_buffer_info: *const VkPhysicalDeviceExternalBufferInfo,
    p_external_buffer_properties: *mut VkExternalBufferProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceExternalBufferProperties({physical_device:?}, {p_external_buffer_info:?}, {p_external_buffer_properties:?})");

    let mut packet = new_packet(1000001211);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_external_buffer_info);
    packet.write_nullable_raw_ptr_mut(p_external_buffer_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_external_buffer_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandleKHR.html>"]
unsafe extern "system" fn vkGetMemoryWin32HandleKHR(
    device: NonDisposableHandle,
    p_get_win32_handle_info: *const VkMemoryGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryWin32HandleKHR({device:?}, {p_get_win32_handle_info:?}, {p_handle:?})");

    let mut packet = new_packet(1000001212);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_win32_handle_info);
    packet.write_nullable_raw_ptr_mut(p_handle);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_handle);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryWin32HandlePropertiesKHR.html>"]
unsafe extern "system" fn vkGetMemoryWin32HandlePropertiesKHR(
    device: NonDisposableHandle,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    handle: vk::HANDLE,
    p_memory_win32_handle_properties: *mut VkMemoryWin32HandlePropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryWin32HandlePropertiesKHR({device:?}, {handle_type:?}, {handle:?}, {p_memory_win32_handle_properties:?})");

    let mut packet = new_packet(1000001213);
    packet.write(device);
    packet.write(handle_type);
    packet.write(handle);
    packet.write_nullable_raw_ptr_mut(p_memory_win32_handle_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_win32_handle_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryFdKHR.html>"]
unsafe extern "system" fn vkGetMemoryFdKHR(
    device: NonDisposableHandle,
    p_get_fd_info: *const VkMemoryGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryFdKHR({device:?}, {p_get_fd_info:?}, {p_fd:?})");

    let mut packet = new_packet(1000001214);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_fd_info);
    packet.write_nullable_raw_ptr_mut(p_fd);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fd);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryFdPropertiesKHR.html>"]
unsafe extern "system" fn vkGetMemoryFdPropertiesKHR(
    device: NonDisposableHandle,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    fd: std::os::raw::c_int,
    p_memory_fd_properties: *mut VkMemoryFdPropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryFdPropertiesKHR({device:?}, {handle_type:?}, {fd:?}, {p_memory_fd_properties:?})");

    let mut packet = new_packet(1000001215);
    packet.write(device);
    packet.write(handle_type);
    packet.write(fd);
    packet.write_nullable_raw_ptr_mut(p_memory_fd_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_fd_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryZirconHandleFUCHSIA.html>"]
unsafe extern "system" fn vkGetMemoryZirconHandleFUCHSIA(
    device: NonDisposableHandle,
    p_get_zircon_handle_info: *const VkMemoryGetZirconHandleInfoFUCHSIA,
    p_zircon_handle: *mut vk::zx_handle_t,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryZirconHandleFUCHSIA({device:?}, {p_get_zircon_handle_info:?}, {p_zircon_handle:?})");

    let mut packet = new_packet(1000001216);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_zircon_handle_info);
    packet.write_nullable_raw_ptr_mut(p_zircon_handle);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_zircon_handle);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryZirconHandlePropertiesFUCHSIA.html>"]
unsafe extern "system" fn vkGetMemoryZirconHandlePropertiesFUCHSIA(
    device: NonDisposableHandle,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    zircon_handle: vk::zx_handle_t,
    p_memory_zircon_handle_properties: *mut VkMemoryZirconHandlePropertiesFUCHSIA,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryZirconHandlePropertiesFUCHSIA({device:?}, {handle_type:?}, {zircon_handle:?}, {p_memory_zircon_handle_properties:?})");

    let mut packet = new_packet(1000001217);
    packet.write(device);
    packet.write(handle_type);
    packet.write(zircon_handle);
    packet.write_nullable_raw_ptr_mut(p_memory_zircon_handle_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_zircon_handle_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryRemoteAddressNV.html>"]
unsafe extern "system" fn vkGetMemoryRemoteAddressNV(
    device: NonDisposableHandle,
    p_memory_get_remote_address_info: *const VkMemoryGetRemoteAddressInfoNV,
    p_address: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryRemoteAddressNV({device:?}, {p_memory_get_remote_address_info:?}, {p_address:?})");

    let mut packet = new_packet(1000001218);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_memory_get_remote_address_info);
    packet.write_nullable_raw_ptr_mut(p_address);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_address);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalSemaphoreProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceExternalSemaphoreProperties(
    physical_device: NonDisposableHandle,
    p_external_semaphore_info: *const VkPhysicalDeviceExternalSemaphoreInfo,
    p_external_semaphore_properties: *mut VkExternalSemaphoreProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceExternalSemaphoreProperties({physical_device:?}, {p_external_semaphore_info:?}, {p_external_semaphore_properties:?})");

    let mut packet = new_packet(1000001219);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_external_semaphore_info);
    packet.write_nullable_raw_ptr_mut(p_external_semaphore_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_external_semaphore_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreWin32HandleKHR.html>"]
unsafe extern "system" fn vkGetSemaphoreWin32HandleKHR(
    device: NonDisposableHandle,
    p_get_win32_handle_info: *const VkSemaphoreGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> NonDisposableHandle {
    trace!("called vkGetSemaphoreWin32HandleKHR({device:?}, {p_get_win32_handle_info:?}, {p_handle:?})");

    let mut packet = new_packet(1000001220);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_win32_handle_info);
    packet.write_nullable_raw_ptr_mut(p_handle);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_handle);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreWin32HandleKHR.html>"]
unsafe extern "system" fn vkImportSemaphoreWin32HandleKHR(
    device: NonDisposableHandle,
    p_import_semaphore_win32_handle_info: *const VkImportSemaphoreWin32HandleInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkImportSemaphoreWin32HandleKHR({device:?}, {p_import_semaphore_win32_handle_info:?})");

    let mut packet = new_packet(1000001221);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_import_semaphore_win32_handle_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreFdKHR.html>"]
unsafe extern "system" fn vkGetSemaphoreFdKHR(
    device: NonDisposableHandle,
    p_get_fd_info: *const VkSemaphoreGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> NonDisposableHandle {
    trace!("called vkGetSemaphoreFdKHR({device:?}, {p_get_fd_info:?}, {p_fd:?})");

    let mut packet = new_packet(1000001222);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_fd_info);
    packet.write_nullable_raw_ptr_mut(p_fd);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fd);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreFdKHR.html>"]
unsafe extern "system" fn vkImportSemaphoreFdKHR(
    device: NonDisposableHandle,
    p_import_semaphore_fd_info: *const VkImportSemaphoreFdInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkImportSemaphoreFdKHR({device:?}, {p_import_semaphore_fd_info:?})");

    let mut packet = new_packet(1000001223);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_import_semaphore_fd_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreZirconHandleFUCHSIA.html>"]
unsafe extern "system" fn vkGetSemaphoreZirconHandleFUCHSIA(
    device: NonDisposableHandle,
    p_get_zircon_handle_info: *const VkSemaphoreGetZirconHandleInfoFUCHSIA,
    p_zircon_handle: *mut vk::zx_handle_t,
) -> NonDisposableHandle {
    trace!("called vkGetSemaphoreZirconHandleFUCHSIA({device:?}, {p_get_zircon_handle_info:?}, {p_zircon_handle:?})");

    let mut packet = new_packet(1000001224);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_zircon_handle_info);
    packet.write_nullable_raw_ptr_mut(p_zircon_handle);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_zircon_handle);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportSemaphoreZirconHandleFUCHSIA.html>"]
unsafe extern "system" fn vkImportSemaphoreZirconHandleFUCHSIA(
    device: NonDisposableHandle,
    p_import_semaphore_zircon_handle_info: *const VkImportSemaphoreZirconHandleInfoFUCHSIA,
) -> NonDisposableHandle {
    trace!("called vkImportSemaphoreZirconHandleFUCHSIA({device:?}, {p_import_semaphore_zircon_handle_info:?})");

    let mut packet = new_packet(1000001225);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_import_semaphore_zircon_handle_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceExternalFenceProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceExternalFenceProperties(
    physical_device: NonDisposableHandle,
    p_external_fence_info: *const VkPhysicalDeviceExternalFenceInfo,
    p_external_fence_properties: *mut VkExternalFenceProperties,
) -> c_void {
    trace!("called vkGetPhysicalDeviceExternalFenceProperties({physical_device:?}, {p_external_fence_info:?}, {p_external_fence_properties:?})");

    let mut packet = new_packet(1000001226);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_external_fence_info);
    packet.write_nullable_raw_ptr_mut(p_external_fence_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_external_fence_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceWin32HandleKHR.html>"]
unsafe extern "system" fn vkGetFenceWin32HandleKHR(
    device: NonDisposableHandle,
    p_get_win32_handle_info: *const VkFenceGetWin32HandleInfoKHR,
    p_handle: *mut vk::HANDLE,
) -> NonDisposableHandle {
    trace!("called vkGetFenceWin32HandleKHR({device:?}, {p_get_win32_handle_info:?}, {p_handle:?})");

    let mut packet = new_packet(1000001227);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_win32_handle_info);
    packet.write_nullable_raw_ptr_mut(p_handle);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_handle);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportFenceWin32HandleKHR.html>"]
unsafe extern "system" fn vkImportFenceWin32HandleKHR(
    device: NonDisposableHandle,
    p_import_fence_win32_handle_info: *const VkImportFenceWin32HandleInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkImportFenceWin32HandleKHR({device:?}, {p_import_fence_win32_handle_info:?})");

    let mut packet = new_packet(1000001228);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_import_fence_win32_handle_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFenceFdKHR.html>"]
unsafe extern "system" fn vkGetFenceFdKHR(
    device: NonDisposableHandle,
    p_get_fd_info: *const VkFenceGetFdInfoKHR,
    p_fd: *mut std::os::raw::c_int,
) -> NonDisposableHandle {
    trace!("called vkGetFenceFdKHR({device:?}, {p_get_fd_info:?}, {p_fd:?})");

    let mut packet = new_packet(1000001229);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_get_fd_info);
    packet.write_nullable_raw_ptr_mut(p_fd);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fd);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkImportFenceFdKHR.html>"]
unsafe extern "system" fn vkImportFenceFdKHR(
    device: NonDisposableHandle,
    p_import_fence_fd_info: *const VkImportFenceFdInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkImportFenceFdKHR({device:?}, {p_import_fence_fd_info:?})");

    let mut packet = new_packet(1000001230);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_import_fence_fd_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseDisplayEXT.html>"]
unsafe extern "system" fn vkReleaseDisplayEXT(
    physical_device: NonDisposableHandle,
    display: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkReleaseDisplayEXT({physical_device:?}, {display:?})");

    let mut packet = new_packet(1000001231);
    packet.write(physical_device);
    packet.write(display);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireXlibDisplayEXT.html>"]
unsafe extern "system" fn vkAcquireXlibDisplayEXT(
    physical_device: NonDisposableHandle,
    dpy: *mut usize,
    display: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAcquireXlibDisplayEXT({physical_device:?}, {dpy:?}, {display:?})");

    let mut packet = new_packet(1000001232);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(dpy);
    packet.write(display);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(dpy);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRandROutputDisplayEXT.html>"]
unsafe extern "system" fn vkGetRandROutputDisplayEXT(
    physical_device: NonDisposableHandle,
    dpy: *mut usize,
    rr_output: vk::RROutput,
    p_display: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetRandROutputDisplayEXT({physical_device:?}, {dpy:?}, {rr_output:?}, {p_display:?})");

    let mut packet = new_packet(1000001233);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr_mut(dpy);
    packet.write(rr_output);
    packet.write_nullable_raw_ptr_mut(p_display);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(dpy);
    response.read_to_raw_ptr(p_display);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireWinrtDisplayNV.html>"]
unsafe extern "system" fn vkAcquireWinrtDisplayNV(
    physical_device: NonDisposableHandle,
    display: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAcquireWinrtDisplayNV({physical_device:?}, {display:?})");

    let mut packet = new_packet(1000001234);
    packet.write(physical_device);
    packet.write(display);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetWinrtDisplayNV.html>"]
unsafe extern "system" fn vkGetWinrtDisplayNV(
    physical_device: NonDisposableHandle,
    device_relative_id: u32,
    p_display: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetWinrtDisplayNV({physical_device:?}, {device_relative_id:?}, {p_display:?})");

    let mut packet = new_packet(1000001235);
    packet.write(physical_device);
    packet.write(device_relative_id);
    packet.write_nullable_raw_ptr_mut(p_display);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_display);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDisplayPowerControlEXT.html>"]
unsafe extern "system" fn vkDisplayPowerControlEXT(
    device: NonDisposableHandle,
    display: NonDisposableHandle,
    p_display_power_info: *const VkDisplayPowerInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkDisplayPowerControlEXT({device:?}, {display:?}, {p_display_power_info:?})");

    let mut packet = new_packet(1000001236);
    packet.write(device);
    packet.write(display);
    packet.write_nullable_raw_ptr(p_display_power_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkRegisterDeviceEventEXT.html>"]
unsafe extern "system" fn vkRegisterDeviceEventEXT(
    device: NonDisposableHandle,
    p_device_event_info: *const VkDeviceEventInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_fence: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkRegisterDeviceEventEXT({device:?}, {p_device_event_info:?}, {p_allocator:?}, {p_fence:?})");

    let mut packet = new_packet(1000001237);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_device_event_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_fence);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fence);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkRegisterDisplayEventEXT.html>"]
unsafe extern "system" fn vkRegisterDisplayEventEXT(
    device: NonDisposableHandle,
    display: NonDisposableHandle,
    p_display_event_info: *const VkDisplayEventInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_fence: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkRegisterDisplayEventEXT({device:?}, {display:?}, {p_display_event_info:?}, {p_allocator:?}, {p_fence:?})");

    let mut packet = new_packet(1000001238);
    packet.write(device);
    packet.write(display);
    packet.write_nullable_raw_ptr(p_display_event_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_fence);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fence);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainCounterEXT.html>"]
unsafe extern "system" fn vkGetSwapchainCounterEXT(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    counter: vk::SurfaceCounterFlagsEXT,
    p_counter_value: *mut u64,
) -> NonDisposableHandle {
    trace!("called vkGetSwapchainCounterEXT({device:?}, {swapchain:?}, {counter:?}, {p_counter_value:?})");

    let mut packet = new_packet(1000001239);
    packet.write(device);
    packet.write(swapchain);
    packet.write(counter);
    packet.write_nullable_raw_ptr_mut(p_counter_value);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_counter_value);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2EXT.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    physical_device: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_surface_capabilities: *mut VkSurfaceCapabilities2EXT,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfaceCapabilities2EXT({physical_device:?}, {surface:?}, {p_surface_capabilities:?})");

    let mut packet = new_packet(1000001240);
    packet.write(physical_device);
    packet.write(surface);
    packet.write_nullable_raw_ptr_mut(p_surface_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDeviceGroups.html>"]
unsafe extern "system" fn vkEnumeratePhysicalDeviceGroups(
    instance: NonDisposableHandle,
    p_physical_device_group_count: *mut u32,
    p_physical_device_group_properties: *mut VkPhysicalDeviceGroupProperties,
) -> NonDisposableHandle {
    trace!("called vkEnumeratePhysicalDeviceGroups({instance:?}, {p_physical_device_group_count:?}, {p_physical_device_group_properties:?})");

    let mut packet = new_packet(1000001241);
    packet.write(instance);
    packet.write_vk_array_count(p_physical_device_group_count, p_physical_device_group_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_physical_device_group_count, p_physical_device_group_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupPeerMemoryFeatures.html>"]
unsafe extern "system" fn vkGetDeviceGroupPeerMemoryFeatures(
    device: NonDisposableHandle,
    heap_index: u32,
    local_device_index: u32,
    remote_device_index: u32,
    p_peer_memory_features: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDeviceGroupPeerMemoryFeatures({device:?}, {heap_index:?}, {local_device_index:?}, {remote_device_index:?}, {p_peer_memory_features:?})");

    let mut packet = new_packet(1000001242);
    packet.write(device);
    packet.write(heap_index);
    packet.write(local_device_index);
    packet.write(remote_device_index);
    packet.write_nullable_raw_ptr_mut(p_peer_memory_features);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_peer_memory_features);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindBufferMemory2.html>"]
unsafe extern "system" fn vkBindBufferMemory2(
    device: NonDisposableHandle,
    bind_info_count: u32,
    p_bind_infos: *const VkBindBufferMemoryInfo,
) -> NonDisposableHandle {
    trace!("called vkBindBufferMemory2({device:?}, {bind_info_count:?}, {p_bind_infos:?})");

    let mut packet = new_packet(1000001243);
    packet.write(device);
    packet.write(bind_info_count);
    packet.write_nullable_raw_ptr(p_bind_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindImageMemory2.html>"]
unsafe extern "system" fn vkBindImageMemory2(
    device: NonDisposableHandle,
    bind_info_count: u32,
    p_bind_infos: *const VkBindImageMemoryInfo,
) -> NonDisposableHandle {
    trace!("called vkBindImageMemory2({device:?}, {bind_info_count:?}, {p_bind_infos:?})");

    let mut packet = new_packet(1000001244);
    packet.write(device);
    packet.write(bind_info_count);
    packet.write_nullable_raw_ptr(p_bind_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDeviceMask.html>"]
unsafe extern "system" fn vkCmdSetDeviceMask(
    command_buffer: NonDisposableHandle,
    device_mask: u32,
) -> c_void {
    trace!("called vkCmdSetDeviceMask({command_buffer:?}, {device_mask:?})");

    let mut packet = new_packet(1000001245);
    packet.write(command_buffer);
    packet.write(device_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupPresentCapabilitiesKHR.html>"]
unsafe extern "system" fn vkGetDeviceGroupPresentCapabilitiesKHR(
    device: NonDisposableHandle,
    p_device_group_present_capabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetDeviceGroupPresentCapabilitiesKHR({device:?}, {p_device_group_present_capabilities:?})");

    let mut packet = new_packet(1000001246);
    packet.write(device);
    packet.write_nullable_raw_ptr_mut(p_device_group_present_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_device_group_present_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupSurfacePresentModesKHR.html>"]
unsafe extern "system" fn vkGetDeviceGroupSurfacePresentModesKHR(
    device: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_modes: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetDeviceGroupSurfacePresentModesKHR({device:?}, {surface:?}, {p_modes:?})");

    let mut packet = new_packet(1000001247);
    packet.write(device);
    packet.write(surface);
    packet.write_nullable_raw_ptr_mut(p_modes);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_modes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireNextImage2KHR.html>"]
unsafe extern "system" fn vkAcquireNextImage2KHR(
    device: NonDisposableHandle,
    p_acquire_info: *const VkAcquireNextImageInfoKHR,
    p_image_index: *mut u32,
) -> NonDisposableHandle {
    trace!("called vkAcquireNextImage2KHR({device:?}, {p_acquire_info:?}, {p_image_index:?})");

    let mut packet = new_packet(1000001248);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_acquire_info);
    packet.write_nullable_raw_ptr_mut(p_image_index);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_image_index);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchBase.html>"]
unsafe extern "system" fn vkCmdDispatchBase(
    command_buffer: NonDisposableHandle,
    base_group_x: u32,
    base_group_y: u32,
    base_group_z: u32,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) -> c_void {
    trace!("called vkCmdDispatchBase({command_buffer:?}, {base_group_x:?}, {base_group_y:?}, {base_group_z:?}, {group_count_x:?}, {group_count_y:?}, {group_count_z:?})");

    let mut packet = new_packet(1000001249);
    packet.write(command_buffer);
    packet.write(base_group_x);
    packet.write(base_group_y);
    packet.write(base_group_z);
    packet.write(group_count_x);
    packet.write(group_count_y);
    packet.write(group_count_z);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDevicePresentRectanglesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDevicePresentRectanglesKHR(
    physical_device: NonDisposableHandle,
    surface: NonDisposableHandle,
    p_rect_count: *mut u32,
    p_rects: *mut VkRect2D,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDevicePresentRectanglesKHR({physical_device:?}, {surface:?}, {p_rect_count:?}, {p_rects:?})");

    let mut packet = new_packet(1000001250);
    packet.write(physical_device);
    packet.write(surface);
    packet.write_vk_array_count(p_rect_count, p_rects);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_rect_count, p_rects);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDescriptorUpdateTemplate.html>"]
unsafe extern "system" fn vkCreateDescriptorUpdateTemplate(
    device: NonDisposableHandle,
    p_create_info: *const VkDescriptorUpdateTemplateCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_descriptor_update_template: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDescriptorUpdateTemplate({device:?}, {p_create_info:?}, {p_allocator:?}, {p_descriptor_update_template:?})");

    let mut packet = new_packet(1000001251);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_descriptor_update_template);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_descriptor_update_template);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDescriptorUpdateTemplate.html>"]
unsafe extern "system" fn vkDestroyDescriptorUpdateTemplate(
    device: NonDisposableHandle,
    descriptor_update_template: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDescriptorUpdateTemplate({device:?}, {descriptor_update_template:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001252);
    packet.write(device);
    packet.write(descriptor_update_template);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateDescriptorSetWithTemplate.html>"]
unsafe extern "system" fn vkUpdateDescriptorSetWithTemplate(
    device: NonDisposableHandle,
    descriptor_set: NonDisposableHandle,
    descriptor_update_template: NonDisposableHandle,
    p_data: *const c_void,
) -> c_void {
    trace!("called vkUpdateDescriptorSetWithTemplate({device:?}, {descriptor_set:?}, {descriptor_update_template:?}, {p_data:?})");

    let mut packet = new_packet(1000001253);
    packet.write(device);
    packet.write(descriptor_set);
    packet.write(descriptor_update_template);
    packet.write_nullable_raw_ptr(p_data);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetWithTemplateKHR.html>"]
unsafe extern "system" fn vkCmdPushDescriptorSetWithTemplateKHR(
    command_buffer: NonDisposableHandle,
    descriptor_update_template: NonDisposableHandle,
    layout: NonDisposableHandle,
    set: u32,
    p_data: *const c_void,
) -> c_void {
    trace!("called vkCmdPushDescriptorSetWithTemplateKHR({command_buffer:?}, {descriptor_update_template:?}, {layout:?}, {set:?}, {p_data:?})");

    let mut packet = new_packet(1000001254);
    packet.write(command_buffer);
    packet.write(descriptor_update_template);
    packet.write(layout);
    packet.write(set);
    packet.write_nullable_raw_ptr(p_data);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetHdrMetadataEXT.html>"]
unsafe extern "system" fn vkSetHdrMetadataEXT(
    device: NonDisposableHandle,
    swapchain_count: u32,
    p_swapchains: *const NonDisposableHandle,
    p_metadata: *const VkHdrMetadataEXT,
) -> c_void {
    trace!("called vkSetHdrMetadataEXT({device:?}, {swapchain_count:?}, {p_swapchains:?}, {p_metadata:?})");

    let mut packet = new_packet(1000001255);
    packet.write(device);
    packet.write(swapchain_count);
    packet.write_nullable_raw_ptr(p_swapchains);
    packet.write_nullable_raw_ptr(p_metadata);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainStatusKHR.html>"]
unsafe extern "system" fn vkGetSwapchainStatusKHR(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetSwapchainStatusKHR({device:?}, {swapchain:?})");

    let mut packet = new_packet(1000001256);
    packet.write(device);
    packet.write(swapchain);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRefreshCycleDurationGOOGLE.html>"]
unsafe extern "system" fn vkGetRefreshCycleDurationGOOGLE(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_display_timing_properties: *mut VkRefreshCycleDurationGOOGLE,
) -> NonDisposableHandle {
    trace!("called vkGetRefreshCycleDurationGOOGLE({device:?}, {swapchain:?}, {p_display_timing_properties:?})");

    let mut packet = new_packet(1000001257);
    packet.write(device);
    packet.write(swapchain);
    packet.write_nullable_raw_ptr_mut(p_display_timing_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_display_timing_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPastPresentationTimingGOOGLE.html>"]
unsafe extern "system" fn vkGetPastPresentationTimingGOOGLE(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_presentation_timing_count: *mut u32,
    p_presentation_timings: *mut VkPastPresentationTimingGOOGLE,
) -> NonDisposableHandle {
    trace!("called vkGetPastPresentationTimingGOOGLE({device:?}, {swapchain:?}, {p_presentation_timing_count:?}, {p_presentation_timings:?})");

    let mut packet = new_packet(1000001258);
    packet.write(device);
    packet.write(swapchain);
    packet.write_vk_array_count(p_presentation_timing_count, p_presentation_timings);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_presentation_timing_count, p_presentation_timings);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateIOSSurfaceMVK.html>"]
unsafe extern "system" fn vkCreateIOSSurfaceMVK(
    instance: NonDisposableHandle,
    p_create_info: *const VkIOSSurfaceCreateInfoMVK,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateIOSSurfaceMVK({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001259);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMacOSSurfaceMVK.html>"]
unsafe extern "system" fn vkCreateMacOSSurfaceMVK(
    instance: NonDisposableHandle,
    p_create_info: *const VkMacOSSurfaceCreateInfoMVK,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateMacOSSurfaceMVK({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001260);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMetalSurfaceEXT.html>"]
unsafe extern "system" fn vkCreateMetalSurfaceEXT(
    instance: NonDisposableHandle,
    p_create_info: *const VkMetalSurfaceCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateMetalSurfaceEXT({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001261);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWScalingNV.html>"]
unsafe extern "system" fn vkCmdSetViewportWScalingNV(
    command_buffer: NonDisposableHandle,
    first_viewport: u32,
    viewport_count: u32,
    p_viewport_wscalings: *const VkViewportWScalingNV,
) -> c_void {
    trace!("called vkCmdSetViewportWScalingNV({command_buffer:?}, {first_viewport:?}, {viewport_count:?}, {p_viewport_wscalings:?})");

    let mut packet = new_packet(1000001262);
    packet.write(command_buffer);
    packet.write(first_viewport);
    packet.write(viewport_count);
    packet.write_nullable_raw_ptr(p_viewport_wscalings);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleEXT.html>"]
unsafe extern "system" fn vkCmdSetDiscardRectangleEXT(
    command_buffer: NonDisposableHandle,
    first_discard_rectangle: u32,
    discard_rectangle_count: u32,
    p_discard_rectangles: *const VkRect2D,
) -> c_void {
    trace!("called vkCmdSetDiscardRectangleEXT({command_buffer:?}, {first_discard_rectangle:?}, {discard_rectangle_count:?}, {p_discard_rectangles:?})");

    let mut packet = new_packet(1000001263);
    packet.write(command_buffer);
    packet.write(first_discard_rectangle);
    packet.write(discard_rectangle_count);
    packet.write_nullable_raw_ptr(p_discard_rectangles);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetDiscardRectangleEnableEXT(
    command_buffer: NonDisposableHandle,
    discard_rectangle_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDiscardRectangleEnableEXT({command_buffer:?}, {discard_rectangle_enable:?})");

    let mut packet = new_packet(1000001264);
    packet.write(command_buffer);
    packet.write(discard_rectangle_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDiscardRectangleModeEXT.html>"]
unsafe extern "system" fn vkCmdSetDiscardRectangleModeEXT(
    command_buffer: NonDisposableHandle,
    discard_rectangle_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDiscardRectangleModeEXT({command_buffer:?}, {discard_rectangle_mode:?})");

    let mut packet = new_packet(1000001265);
    packet.write(command_buffer);
    packet.write(discard_rectangle_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleLocationsEXT.html>"]
unsafe extern "system" fn vkCmdSetSampleLocationsEXT(
    command_buffer: NonDisposableHandle,
    p_sample_locations_info: *const VkSampleLocationsInfoEXT,
) -> c_void {
    trace!("called vkCmdSetSampleLocationsEXT({command_buffer:?}, {p_sample_locations_info:?})");

    let mut packet = new_packet(1000001266);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_sample_locations_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceMultisamplePropertiesEXT.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
    physical_device: NonDisposableHandle,
    samples: vk::SampleCountFlags,
    p_multisample_properties: *mut VkMultisamplePropertiesEXT,
) -> c_void {
    trace!("called vkGetPhysicalDeviceMultisamplePropertiesEXT({physical_device:?}, {samples:?}, {p_multisample_properties:?})");

    let mut packet = new_packet(1000001267);
    packet.write(physical_device);
    packet.write(samples);
    packet.write_nullable_raw_ptr_mut(p_multisample_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_multisample_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2KHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    physical_device: NonDisposableHandle,
    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
    p_surface_capabilities: *mut VkSurfaceCapabilities2KHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfaceCapabilities2KHR({physical_device:?}, {p_surface_info:?}, {p_surface_capabilities:?})");

    let mut packet = new_packet(1000001268);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_surface_info);
    packet.write_nullable_raw_ptr_mut(p_surface_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfaceFormats2KHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfaceFormats2KHR(
    physical_device: NonDisposableHandle,
    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
    p_surface_format_count: *mut u32,
    p_surface_formats: *mut VkSurfaceFormat2KHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfaceFormats2KHR({physical_device:?}, {p_surface_info:?}, {p_surface_format_count:?}, {p_surface_formats:?})");

    let mut packet = new_packet(1000001269);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_surface_info);
    packet.write_vk_array_count(p_surface_format_count, p_surface_formats);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_surface_format_count, p_surface_formats);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayProperties2KHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceDisplayProperties2KHR(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkDisplayProperties2KHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceDisplayProperties2KHR({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001270);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceDisplayPlaneProperties2KHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkDisplayPlaneProperties2KHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceDisplayPlaneProperties2KHR({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001271);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayModeProperties2KHR.html>"]
unsafe extern "system" fn vkGetDisplayModeProperties2KHR(
    physical_device: NonDisposableHandle,
    display: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkDisplayModeProperties2KHR,
) -> NonDisposableHandle {
    trace!("called vkGetDisplayModeProperties2KHR({physical_device:?}, {display:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001272);
    packet.write(physical_device);
    packet.write(display);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDisplayPlaneCapabilities2KHR.html>"]
unsafe extern "system" fn vkGetDisplayPlaneCapabilities2KHR(
    physical_device: NonDisposableHandle,
    p_display_plane_info: *const VkDisplayPlaneInfo2KHR,
    p_capabilities: *mut VkDisplayPlaneCapabilities2KHR,
) -> NonDisposableHandle {
    trace!("called vkGetDisplayPlaneCapabilities2KHR({physical_device:?}, {p_display_plane_info:?}, {p_capabilities:?})");

    let mut packet = new_packet(1000001273);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_display_plane_info);
    packet.write_nullable_raw_ptr_mut(p_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferMemoryRequirements2.html>"]
unsafe extern "system" fn vkGetBufferMemoryRequirements2(
    device: NonDisposableHandle,
    p_info: *const VkBufferMemoryRequirementsInfo2,
    p_memory_requirements: *mut VkMemoryRequirements2,
) -> c_void {
    trace!("called vkGetBufferMemoryRequirements2({device:?}, {p_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001274);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageMemoryRequirements2.html>"]
unsafe extern "system" fn vkGetImageMemoryRequirements2(
    device: NonDisposableHandle,
    p_info: *const VkImageMemoryRequirementsInfo2,
    p_memory_requirements: *mut VkMemoryRequirements2,
) -> c_void {
    trace!("called vkGetImageMemoryRequirements2({device:?}, {p_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001275);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSparseMemoryRequirements2.html>"]
unsafe extern "system" fn vkGetImageSparseMemoryRequirements2(
    device: NonDisposableHandle,
    p_info: *const VkImageSparseMemoryRequirementsInfo2,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut VkSparseImageMemoryRequirements2,
) -> c_void {
    trace!("called vkGetImageSparseMemoryRequirements2({device:?}, {p_info:?}, {p_sparse_memory_requirement_count:?}, {p_sparse_memory_requirements:?})");

    let mut packet = new_packet(1000001276);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_vk_array_count(p_sparse_memory_requirement_count, p_sparse_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_sparse_memory_requirement_count, p_sparse_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceBufferMemoryRequirements.html>"]
unsafe extern "system" fn vkGetDeviceBufferMemoryRequirements(
    device: NonDisposableHandle,
    p_info: *const VkDeviceBufferMemoryRequirements,
    p_memory_requirements: *mut VkMemoryRequirements2,
) -> c_void {
    trace!("called vkGetDeviceBufferMemoryRequirements({device:?}, {p_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001277);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageMemoryRequirements.html>"]
unsafe extern "system" fn vkGetDeviceImageMemoryRequirements(
    device: NonDisposableHandle,
    p_info: *const VkDeviceImageMemoryRequirements,
    p_memory_requirements: *mut VkMemoryRequirements2,
) -> c_void {
    trace!("called vkGetDeviceImageMemoryRequirements({device:?}, {p_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001278);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageSparseMemoryRequirements.html>"]
unsafe extern "system" fn vkGetDeviceImageSparseMemoryRequirements(
    device: NonDisposableHandle,
    p_info: *const VkDeviceImageMemoryRequirements,
    p_sparse_memory_requirement_count: *mut u32,
    p_sparse_memory_requirements: *mut VkSparseImageMemoryRequirements2,
) -> c_void {
    trace!("called vkGetDeviceImageSparseMemoryRequirements({device:?}, {p_info:?}, {p_sparse_memory_requirement_count:?}, {p_sparse_memory_requirements:?})");

    let mut packet = new_packet(1000001279);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_vk_array_count(p_sparse_memory_requirement_count, p_sparse_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_sparse_memory_requirement_count, p_sparse_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateSamplerYcbcrConversion.html>"]
unsafe extern "system" fn vkCreateSamplerYcbcrConversion(
    device: NonDisposableHandle,
    p_create_info: *const VkSamplerYcbcrConversionCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_ycbcr_conversion: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateSamplerYcbcrConversion({device:?}, {p_create_info:?}, {p_allocator:?}, {p_ycbcr_conversion:?})");

    let mut packet = new_packet(1000001280);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_ycbcr_conversion);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_ycbcr_conversion);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroySamplerYcbcrConversion.html>"]
unsafe extern "system" fn vkDestroySamplerYcbcrConversion(
    device: NonDisposableHandle,
    ycbcr_conversion: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroySamplerYcbcrConversion({device:?}, {ycbcr_conversion:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001281);
    packet.write(device);
    packet.write(ycbcr_conversion);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceQueue2.html>"]
unsafe extern "system" fn vkGetDeviceQueue2(
    device: NonDisposableHandle,
    p_queue_info: *const VkDeviceQueueInfo2,
    p_queue: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDeviceQueue2({device:?}, {p_queue_info:?}, {p_queue:?})");

    let mut packet = new_packet(1000001282);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_queue_info);
    packet.write_nullable_raw_ptr_mut(p_queue);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_queue);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateValidationCacheEXT.html>"]
unsafe extern "system" fn vkCreateValidationCacheEXT(
    device: NonDisposableHandle,
    p_create_info: *const VkValidationCacheCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_validation_cache: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateValidationCacheEXT({device:?}, {p_create_info:?}, {p_allocator:?}, {p_validation_cache:?})");

    let mut packet = new_packet(1000001283);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_validation_cache);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_validation_cache);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyValidationCacheEXT.html>"]
unsafe extern "system" fn vkDestroyValidationCacheEXT(
    device: NonDisposableHandle,
    validation_cache: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyValidationCacheEXT({device:?}, {validation_cache:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001284);
    packet.write(device);
    packet.write(validation_cache);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetValidationCacheDataEXT.html>"]
unsafe extern "system" fn vkGetValidationCacheDataEXT(
    device: NonDisposableHandle,
    validation_cache: NonDisposableHandle,
    p_data_size: *mut usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetValidationCacheDataEXT({device:?}, {validation_cache:?}, {p_data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001285);
    packet.write(device);
    packet.write(validation_cache);
    packet.write_nullable_raw_ptr_mut(p_data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data_size);
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMergeValidationCachesEXT.html>"]
unsafe extern "system" fn vkMergeValidationCachesEXT(
    device: NonDisposableHandle,
    dst_cache: NonDisposableHandle,
    src_cache_count: u32,
    p_src_caches: *const NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkMergeValidationCachesEXT({device:?}, {dst_cache:?}, {src_cache_count:?}, {p_src_caches:?})");

    let mut packet = new_packet(1000001286);
    packet.write(device);
    packet.write(dst_cache);
    packet.write(src_cache_count);
    packet.write_nullable_raw_ptr(p_src_caches);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutSupport.html>"]
unsafe extern "system" fn vkGetDescriptorSetLayoutSupport(
    device: NonDisposableHandle,
    p_create_info: *const VkDescriptorSetLayoutCreateInfo,
    p_support: *mut VkDescriptorSetLayoutSupport,
) -> c_void {
    trace!("called vkGetDescriptorSetLayoutSupport({device:?}, {p_create_info:?}, {p_support:?})");

    let mut packet = new_packet(1000001287);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr_mut(p_support);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_support);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainGrallocUsageANDROID.html>"]
unsafe extern "system" fn vkGetSwapchainGrallocUsageANDROID(
    device: NonDisposableHandle,
    format: NonDisposableHandle,
    image_usage: NonDisposableHandle,
    gralloc_usage: *mut std::os::raw::c_int,
) -> NonDisposableHandle {
    trace!("called vkGetSwapchainGrallocUsageANDROID({device:?}, {format:?}, {image_usage:?}, {gralloc_usage:?})");

    let mut packet = new_packet(1000001288);
    packet.write(device);
    packet.write(format);
    packet.write(image_usage);
    packet.write_nullable_raw_ptr_mut(gralloc_usage);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(gralloc_usage);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainGrallocUsage2ANDROID.html>"]
unsafe extern "system" fn vkGetSwapchainGrallocUsage2ANDROID(
    device: NonDisposableHandle,
    format: NonDisposableHandle,
    image_usage: NonDisposableHandle,
    swapchain_image_usage: NonDisposableHandle,
    gralloc_consumer_usage: *mut u64,
    gralloc_producer_usage: *mut u64,
) -> NonDisposableHandle {
    trace!("called vkGetSwapchainGrallocUsage2ANDROID({device:?}, {format:?}, {image_usage:?}, {swapchain_image_usage:?}, {gralloc_consumer_usage:?}, {gralloc_producer_usage:?})");

    let mut packet = new_packet(1000001289);
    packet.write(device);
    packet.write(format);
    packet.write(image_usage);
    packet.write(swapchain_image_usage);
    packet.write_nullable_raw_ptr_mut(gralloc_consumer_usage);
    packet.write_nullable_raw_ptr_mut(gralloc_producer_usage);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(gralloc_consumer_usage);
    response.read_to_raw_ptr(gralloc_producer_usage);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireImageANDROID.html>"]
unsafe extern "system" fn vkAcquireImageANDROID(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    native_fence_fd: std::os::raw::c_int,
    semaphore: NonDisposableHandle,
    fence: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAcquireImageANDROID({device:?}, {image:?}, {native_fence_fd:?}, {semaphore:?}, {fence:?})");

    let mut packet = new_packet(1000001290);
    packet.write(device);
    packet.write(image);
    packet.write(native_fence_fd);
    packet.write(semaphore);
    packet.write(fence);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSignalReleaseImageANDROID.html>"]
unsafe extern "system" fn vkQueueSignalReleaseImageANDROID(
    queue: NonDisposableHandle,
    wait_semaphore_count: u32,
    p_wait_semaphores: *const NonDisposableHandle,
    image: NonDisposableHandle,
    p_native_fence_fd: *mut std::os::raw::c_int,
) -> NonDisposableHandle {
    trace!("called vkQueueSignalReleaseImageANDROID({queue:?}, {wait_semaphore_count:?}, {p_wait_semaphores:?}, {image:?}, {p_native_fence_fd:?})");

    let mut packet = new_packet(1000001291);
    packet.write(queue);
    packet.write(wait_semaphore_count);
    packet.write_nullable_raw_ptr(p_wait_semaphores);
    packet.write(image);
    packet.write_nullable_raw_ptr_mut(p_native_fence_fd);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_native_fence_fd);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderInfoAMD.html>"]
unsafe extern "system" fn vkGetShaderInfoAMD(
    device: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    shader_stage: vk::ShaderStageFlags,
    info_type: NonDisposableHandle,
    p_info_size: *mut usize,
    p_info: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetShaderInfoAMD({device:?}, {pipeline:?}, {shader_stage:?}, {info_type:?}, {p_info_size:?}, {p_info:?})");

    let mut packet = new_packet(1000001292);
    packet.write(device);
    packet.write(pipeline);
    packet.write(shader_stage);
    packet.write(info_type);
    packet.write_nullable_raw_ptr_mut(p_info_size);
    packet.write_nullable_raw_ptr_mut(p_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_info_size);
    response.read_to_raw_ptr(p_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLocalDimmingAMD.html>"]
unsafe extern "system" fn vkSetLocalDimmingAMD(
    device: NonDisposableHandle,
    swap_chain: NonDisposableHandle,
    local_dimming_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkSetLocalDimmingAMD({device:?}, {swap_chain:?}, {local_dimming_enable:?})");

    let mut packet = new_packet(1000001293);
    packet.write(device);
    packet.write(swap_chain);
    packet.write(local_dimming_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(
    physical_device: NonDisposableHandle,
    p_time_domain_count: *mut u32,
    p_time_domains: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceCalibrateableTimeDomainsKHR({physical_device:?}, {p_time_domain_count:?}, {p_time_domains:?})");

    let mut packet = new_packet(1000001294);
    packet.write(physical_device);
    packet.write_vk_array_count(p_time_domain_count, p_time_domains);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_time_domain_count, p_time_domains);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetCalibratedTimestampsKHR.html>"]
unsafe extern "system" fn vkGetCalibratedTimestampsKHR(
    device: NonDisposableHandle,
    timestamp_count: u32,
    p_timestamp_infos: *const VkCalibratedTimestampInfoKHR,
    p_timestamps: *mut u64,
    p_max_deviation: *mut u64,
) -> NonDisposableHandle {
    trace!("called vkGetCalibratedTimestampsKHR({device:?}, {timestamp_count:?}, {p_timestamp_infos:?}, {p_timestamps:?}, {p_max_deviation:?})");

    let mut packet = new_packet(1000001295);
    packet.write(device);
    packet.write(timestamp_count);
    packet.write_nullable_raw_ptr(p_timestamp_infos);
    packet.write_nullable_raw_ptr_mut(p_timestamps);
    packet.write_nullable_raw_ptr_mut(p_max_deviation);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_timestamps);
    response.read_to_raw_ptr(p_max_deviation);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDebugUtilsObjectNameEXT.html>"]
unsafe extern "system" fn vkSetDebugUtilsObjectNameEXT(
    device: NonDisposableHandle,
    p_name_info: *const VkDebugUtilsObjectNameInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkSetDebugUtilsObjectNameEXT({device:?}, {p_name_info:?})");

    let mut packet = new_packet(1000001296);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_name_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDebugUtilsObjectTagEXT.html>"]
unsafe extern "system" fn vkSetDebugUtilsObjectTagEXT(
    device: NonDisposableHandle,
    p_tag_info: *const VkDebugUtilsObjectTagInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkSetDebugUtilsObjectTagEXT({device:?}, {p_tag_info:?})");

    let mut packet = new_packet(1000001297);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_tag_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueBeginDebugUtilsLabelEXT.html>"]
unsafe extern "system" fn vkQueueBeginDebugUtilsLabelEXT(
    queue: NonDisposableHandle,
    p_label_info: *const VkDebugUtilsLabelEXT,
) -> c_void {
    trace!("called vkQueueBeginDebugUtilsLabelEXT({queue:?}, {p_label_info:?})");

    let mut packet = new_packet(1000001298);
    packet.write(queue);
    packet.write_nullable_raw_ptr(p_label_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueEndDebugUtilsLabelEXT.html>"]
unsafe extern "system" fn vkQueueEndDebugUtilsLabelEXT(
    queue: NonDisposableHandle,
) -> c_void {
    trace!("called vkQueueEndDebugUtilsLabelEXT({queue:?})");

    let mut packet = new_packet(1000001299);
    packet.write(queue);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueInsertDebugUtilsLabelEXT.html>"]
unsafe extern "system" fn vkQueueInsertDebugUtilsLabelEXT(
    queue: NonDisposableHandle,
    p_label_info: *const VkDebugUtilsLabelEXT,
) -> c_void {
    trace!("called vkQueueInsertDebugUtilsLabelEXT({queue:?}, {p_label_info:?})");

    let mut packet = new_packet(1000001300);
    packet.write(queue);
    packet.write_nullable_raw_ptr(p_label_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginDebugUtilsLabelEXT.html>"]
unsafe extern "system" fn vkCmdBeginDebugUtilsLabelEXT(
    command_buffer: NonDisposableHandle,
    p_label_info: *const VkDebugUtilsLabelEXT,
) -> c_void {
    trace!("called vkCmdBeginDebugUtilsLabelEXT({command_buffer:?}, {p_label_info:?})");

    let mut packet = new_packet(1000001301);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_label_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndDebugUtilsLabelEXT.html>"]
unsafe extern "system" fn vkCmdEndDebugUtilsLabelEXT(
    command_buffer: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdEndDebugUtilsLabelEXT({command_buffer:?})");

    let mut packet = new_packet(1000001302);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdInsertDebugUtilsLabelEXT.html>"]
unsafe extern "system" fn vkCmdInsertDebugUtilsLabelEXT(
    command_buffer: NonDisposableHandle,
    p_label_info: *const VkDebugUtilsLabelEXT,
) -> c_void {
    trace!("called vkCmdInsertDebugUtilsLabelEXT({command_buffer:?}, {p_label_info:?})");

    let mut packet = new_packet(1000001303);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_label_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDebugUtilsMessengerEXT.html>"]
unsafe extern "system" fn vkCreateDebugUtilsMessengerEXT(
    instance: NonDisposableHandle,
    p_create_info: *const VkDebugUtilsMessengerCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_messenger: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDebugUtilsMessengerEXT({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_messenger:?})");

    let mut packet = new_packet(1000001304);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_messenger);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_messenger);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDebugUtilsMessengerEXT.html>"]
unsafe extern "system" fn vkDestroyDebugUtilsMessengerEXT(
    instance: NonDisposableHandle,
    messenger: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDebugUtilsMessengerEXT({instance:?}, {messenger:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001305);
    packet.write(instance);
    packet.write(messenger);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSubmitDebugUtilsMessageEXT.html>"]
unsafe extern "system" fn vkSubmitDebugUtilsMessageEXT(
    instance: NonDisposableHandle,
    message_severity: vk::DebugUtilsMessageSeverityFlagsEXT,
    message_types: NonDisposableHandle,
    p_callback_data: *const VkDebugUtilsMessengerCallbackDataEXT,
) -> c_void {
    trace!("called vkSubmitDebugUtilsMessageEXT({instance:?}, {message_severity:?}, {message_types:?}, {p_callback_data:?})");

    let mut packet = new_packet(1000001306);
    packet.write(instance);
    packet.write(message_severity);
    packet.write(message_types);
    packet.write_nullable_raw_ptr(p_callback_data);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryHostPointerPropertiesEXT.html>"]
unsafe extern "system" fn vkGetMemoryHostPointerPropertiesEXT(
    device: NonDisposableHandle,
    handle_type: vk::ExternalMemoryHandleTypeFlags,
    p_host_pointer: *const c_void,
    p_memory_host_pointer_properties: *mut VkMemoryHostPointerPropertiesEXT,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryHostPointerPropertiesEXT({device:?}, {handle_type:?}, {p_host_pointer:?}, {p_memory_host_pointer_properties:?})");

    let mut packet = new_packet(1000001307);
    packet.write(device);
    packet.write(handle_type);
    packet.write_nullable_raw_ptr(p_host_pointer);
    packet.write_nullable_raw_ptr_mut(p_memory_host_pointer_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_host_pointer_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteBufferMarkerAMD.html>"]
unsafe extern "system" fn vkCmdWriteBufferMarkerAMD(
    command_buffer: NonDisposableHandle,
    pipeline_stage: vk::PipelineStageFlags,
    dst_buffer: NonDisposableHandle,
    dst_offset: NonDisposableHandle,
    marker: u32,
) -> c_void {
    trace!("called vkCmdWriteBufferMarkerAMD({command_buffer:?}, {pipeline_stage:?}, {dst_buffer:?}, {dst_offset:?}, {marker:?})");

    let mut packet = new_packet(1000001308);
    packet.write(command_buffer);
    packet.write(pipeline_stage);
    packet.write(dst_buffer);
    packet.write(dst_offset);
    packet.write(marker);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRenderPass2.html>"]
unsafe extern "system" fn vkCreateRenderPass2(
    device: NonDisposableHandle,
    p_create_info: *const VkRenderPassCreateInfo2,
    p_allocator: *const VkAllocationCallbacks,
    p_render_pass: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateRenderPass2({device:?}, {p_create_info:?}, {p_allocator:?}, {p_render_pass:?})");

    let mut packet = new_packet(1000001309);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_render_pass);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_render_pass);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderPass2.html>"]
unsafe extern "system" fn vkCmdBeginRenderPass2(
    command_buffer: NonDisposableHandle,
    p_render_pass_begin: *const VkRenderPassBeginInfo,
    p_subpass_begin_info: *const VkSubpassBeginInfo,
) -> c_void {
    trace!("called vkCmdBeginRenderPass2({command_buffer:?}, {p_render_pass_begin:?}, {p_subpass_begin_info:?})");

    let mut packet = new_packet(1000001310);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_render_pass_begin);
    packet.write_nullable_raw_ptr(p_subpass_begin_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdNextSubpass2.html>"]
unsafe extern "system" fn vkCmdNextSubpass2(
    command_buffer: NonDisposableHandle,
    p_subpass_begin_info: *const VkSubpassBeginInfo,
    p_subpass_end_info: *const VkSubpassEndInfo,
) -> c_void {
    trace!("called vkCmdNextSubpass2({command_buffer:?}, {p_subpass_begin_info:?}, {p_subpass_end_info:?})");

    let mut packet = new_packet(1000001311);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_subpass_begin_info);
    packet.write_nullable_raw_ptr(p_subpass_end_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderPass2.html>"]
unsafe extern "system" fn vkCmdEndRenderPass2(
    command_buffer: NonDisposableHandle,
    p_subpass_end_info: *const VkSubpassEndInfo,
) -> c_void {
    trace!("called vkCmdEndRenderPass2({command_buffer:?}, {p_subpass_end_info:?})");

    let mut packet = new_packet(1000001312);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_subpass_end_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSemaphoreCounterValue.html>"]
unsafe extern "system" fn vkGetSemaphoreCounterValue(
    device: NonDisposableHandle,
    semaphore: NonDisposableHandle,
    p_value: *mut u64,
) -> NonDisposableHandle {
    trace!("called vkGetSemaphoreCounterValue({device:?}, {semaphore:?}, {p_value:?})");

    let mut packet = new_packet(1000001313);
    packet.write(device);
    packet.write(semaphore);
    packet.write_nullable_raw_ptr_mut(p_value);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_value);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitSemaphores.html>"]
unsafe extern "system" fn vkWaitSemaphores(
    device: NonDisposableHandle,
    p_wait_info: *const VkSemaphoreWaitInfo,
    timeout: u64,
) -> NonDisposableHandle {
    trace!("called vkWaitSemaphores({device:?}, {p_wait_info:?}, {timeout:?})");

    let mut packet = new_packet(1000001314);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_wait_info);
    packet.write(timeout);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSignalSemaphore.html>"]
unsafe extern "system" fn vkSignalSemaphore(
    device: NonDisposableHandle,
    p_signal_info: *const VkSemaphoreSignalInfo,
) -> NonDisposableHandle {
    trace!("called vkSignalSemaphore({device:?}, {p_signal_info:?})");

    let mut packet = new_packet(1000001315);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_signal_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAndroidHardwareBufferPropertiesANDROID.html>"]
unsafe extern "system" fn vkGetAndroidHardwareBufferPropertiesANDROID(
    device: NonDisposableHandle,
    buffer: *const usize,
    p_properties: *mut VkAndroidHardwareBufferPropertiesANDROID,
) -> NonDisposableHandle {
    trace!("called vkGetAndroidHardwareBufferPropertiesANDROID({device:?}, {buffer:?}, {p_properties:?})");

    let mut packet = new_packet(1000001316);
    packet.write(device);
    packet.write_nullable_raw_ptr(buffer);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMemoryAndroidHardwareBufferANDROID.html>"]
unsafe extern "system" fn vkGetMemoryAndroidHardwareBufferANDROID(
    device: NonDisposableHandle,
    p_info: *const VkMemoryGetAndroidHardwareBufferInfoANDROID,
    p_buffer: *mut *mut usize,
) -> NonDisposableHandle {
    trace!("called vkGetMemoryAndroidHardwareBufferANDROID({device:?}, {p_info:?}, {p_buffer:?})");

    let mut packet = new_packet(1000001317);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_buffer);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_buffer);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirectCount.html>"]
unsafe extern "system" fn vkCmdDrawIndirectCount(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    count_buffer: NonDisposableHandle,
    count_buffer_offset: NonDisposableHandle,
    max_draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawIndirectCount({command_buffer:?}, {buffer:?}, {offset:?}, {count_buffer:?}, {count_buffer_offset:?}, {max_draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001318);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(count_buffer);
    packet.write(count_buffer_offset);
    packet.write(max_draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexedIndirectCount.html>"]
unsafe extern "system" fn vkCmdDrawIndexedIndirectCount(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    count_buffer: NonDisposableHandle,
    count_buffer_offset: NonDisposableHandle,
    max_draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawIndexedIndirectCount({command_buffer:?}, {buffer:?}, {offset:?}, {count_buffer:?}, {count_buffer_offset:?}, {max_draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001319);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(count_buffer);
    packet.write(count_buffer_offset);
    packet.write(max_draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCheckpointNV.html>"]
unsafe extern "system" fn vkCmdSetCheckpointNV(
    command_buffer: NonDisposableHandle,
    p_checkpoint_marker: *const c_void,
) -> c_void {
    trace!("called vkCmdSetCheckpointNV({command_buffer:?}, {p_checkpoint_marker:?})");

    let mut packet = new_packet(1000001320);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_checkpoint_marker);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueueCheckpointDataNV.html>"]
unsafe extern "system" fn vkGetQueueCheckpointDataNV(
    queue: NonDisposableHandle,
    p_checkpoint_data_count: *mut u32,
    p_checkpoint_data: *mut VkCheckpointDataNV,
) -> c_void {
    trace!("called vkGetQueueCheckpointDataNV({queue:?}, {p_checkpoint_data_count:?}, {p_checkpoint_data:?})");

    let mut packet = new_packet(1000001321);
    packet.write(queue);
    packet.write_vk_array_count(p_checkpoint_data_count, p_checkpoint_data);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_checkpoint_data_count, p_checkpoint_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindTransformFeedbackBuffersEXT.html>"]
unsafe extern "system" fn vkCmdBindTransformFeedbackBuffersEXT(
    command_buffer: NonDisposableHandle,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const NonDisposableHandle,
    p_offsets: *const NonDisposableHandle,
    p_sizes: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindTransformFeedbackBuffersEXT({command_buffer:?}, {first_binding:?}, {binding_count:?}, {p_buffers:?}, {p_offsets:?}, {p_sizes:?})");

    let mut packet = new_packet(1000001322);
    packet.write(command_buffer);
    packet.write(first_binding);
    packet.write(binding_count);
    packet.write_nullable_raw_ptr(p_buffers);
    packet.write_nullable_raw_ptr(p_offsets);
    packet.write_nullable_raw_ptr(p_sizes);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginTransformFeedbackEXT.html>"]
unsafe extern "system" fn vkCmdBeginTransformFeedbackEXT(
    command_buffer: NonDisposableHandle,
    first_counter_buffer: u32,
    counter_buffer_count: u32,
    p_counter_buffers: *const NonDisposableHandle,
    p_counter_buffer_offsets: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBeginTransformFeedbackEXT({command_buffer:?}, {first_counter_buffer:?}, {counter_buffer_count:?}, {p_counter_buffers:?}, {p_counter_buffer_offsets:?})");

    let mut packet = new_packet(1000001323);
    packet.write(command_buffer);
    packet.write(first_counter_buffer);
    packet.write(counter_buffer_count);
    packet.write_nullable_raw_ptr(p_counter_buffers);
    packet.write_nullable_raw_ptr(p_counter_buffer_offsets);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndTransformFeedbackEXT.html>"]
unsafe extern "system" fn vkCmdEndTransformFeedbackEXT(
    command_buffer: NonDisposableHandle,
    first_counter_buffer: u32,
    counter_buffer_count: u32,
    p_counter_buffers: *const NonDisposableHandle,
    p_counter_buffer_offsets: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdEndTransformFeedbackEXT({command_buffer:?}, {first_counter_buffer:?}, {counter_buffer_count:?}, {p_counter_buffers:?}, {p_counter_buffer_offsets:?})");

    let mut packet = new_packet(1000001324);
    packet.write(command_buffer);
    packet.write(first_counter_buffer);
    packet.write(counter_buffer_count);
    packet.write_nullable_raw_ptr(p_counter_buffers);
    packet.write_nullable_raw_ptr(p_counter_buffer_offsets);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginQueryIndexedEXT.html>"]
unsafe extern "system" fn vkCmdBeginQueryIndexedEXT(
    command_buffer: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    query: u32,
    flags: NonDisposableHandle,
    index: u32,
) -> c_void {
    trace!("called vkCmdBeginQueryIndexedEXT({command_buffer:?}, {query_pool:?}, {query:?}, {flags:?}, {index:?})");

    let mut packet = new_packet(1000001325);
    packet.write(command_buffer);
    packet.write(query_pool);
    packet.write(query);
    packet.write(flags);
    packet.write(index);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndQueryIndexedEXT.html>"]
unsafe extern "system" fn vkCmdEndQueryIndexedEXT(
    command_buffer: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    query: u32,
    index: u32,
) -> c_void {
    trace!("called vkCmdEndQueryIndexedEXT({command_buffer:?}, {query_pool:?}, {query:?}, {index:?})");

    let mut packet = new_packet(1000001326);
    packet.write(command_buffer);
    packet.write(query_pool);
    packet.write(query);
    packet.write(index);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndirectByteCountEXT.html>"]
unsafe extern "system" fn vkCmdDrawIndirectByteCountEXT(
    command_buffer: NonDisposableHandle,
    instance_count: u32,
    first_instance: u32,
    counter_buffer: NonDisposableHandle,
    counter_buffer_offset: NonDisposableHandle,
    counter_offset: u32,
    vertex_stride: u32,
) -> c_void {
    trace!("called vkCmdDrawIndirectByteCountEXT({command_buffer:?}, {instance_count:?}, {first_instance:?}, {counter_buffer:?}, {counter_buffer_offset:?}, {counter_offset:?}, {vertex_stride:?})");

    let mut packet = new_packet(1000001327);
    packet.write(command_buffer);
    packet.write(instance_count);
    packet.write(first_instance);
    packet.write(counter_buffer);
    packet.write(counter_buffer_offset);
    packet.write(counter_offset);
    packet.write(vertex_stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExclusiveScissorNV.html>"]
unsafe extern "system" fn vkCmdSetExclusiveScissorNV(
    command_buffer: NonDisposableHandle,
    first_exclusive_scissor: u32,
    exclusive_scissor_count: u32,
    p_exclusive_scissors: *const VkRect2D,
) -> c_void {
    trace!("called vkCmdSetExclusiveScissorNV({command_buffer:?}, {first_exclusive_scissor:?}, {exclusive_scissor_count:?}, {p_exclusive_scissors:?})");

    let mut packet = new_packet(1000001328);
    packet.write(command_buffer);
    packet.write(first_exclusive_scissor);
    packet.write(exclusive_scissor_count);
    packet.write_nullable_raw_ptr(p_exclusive_scissors);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExclusiveScissorEnableNV.html>"]
unsafe extern "system" fn vkCmdSetExclusiveScissorEnableNV(
    command_buffer: NonDisposableHandle,
    first_exclusive_scissor: u32,
    exclusive_scissor_count: u32,
    p_exclusive_scissor_enables: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetExclusiveScissorEnableNV({command_buffer:?}, {first_exclusive_scissor:?}, {exclusive_scissor_count:?}, {p_exclusive_scissor_enables:?})");

    let mut packet = new_packet(1000001329);
    packet.write(command_buffer);
    packet.write(first_exclusive_scissor);
    packet.write(exclusive_scissor_count);
    packet.write_nullable_raw_ptr(p_exclusive_scissor_enables);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindShadingRateImageNV.html>"]
unsafe extern "system" fn vkCmdBindShadingRateImageNV(
    command_buffer: NonDisposableHandle,
    image_view: NonDisposableHandle,
    image_layout: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindShadingRateImageNV({command_buffer:?}, {image_view:?}, {image_layout:?})");

    let mut packet = new_packet(1000001330);
    packet.write(command_buffer);
    packet.write(image_view);
    packet.write(image_layout);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportShadingRatePaletteNV.html>"]
unsafe extern "system" fn vkCmdSetViewportShadingRatePaletteNV(
    command_buffer: NonDisposableHandle,
    first_viewport: u32,
    viewport_count: u32,
    p_shading_rate_palettes: *const VkShadingRatePaletteNV,
) -> c_void {
    trace!("called vkCmdSetViewportShadingRatePaletteNV({command_buffer:?}, {first_viewport:?}, {viewport_count:?}, {p_shading_rate_palettes:?})");

    let mut packet = new_packet(1000001331);
    packet.write(command_buffer);
    packet.write(first_viewport);
    packet.write(viewport_count);
    packet.write_nullable_raw_ptr(p_shading_rate_palettes);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoarseSampleOrderNV.html>"]
unsafe extern "system" fn vkCmdSetCoarseSampleOrderNV(
    command_buffer: NonDisposableHandle,
    sample_order_type: NonDisposableHandle,
    custom_sample_order_count: u32,
    p_custom_sample_orders: *const VkCoarseSampleOrderCustomNV,
) -> c_void {
    trace!("called vkCmdSetCoarseSampleOrderNV({command_buffer:?}, {sample_order_type:?}, {custom_sample_order_count:?}, {p_custom_sample_orders:?})");

    let mut packet = new_packet(1000001332);
    packet.write(command_buffer);
    packet.write(sample_order_type);
    packet.write(custom_sample_order_count);
    packet.write_nullable_raw_ptr(p_custom_sample_orders);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksNV.html>"]
unsafe extern "system" fn vkCmdDrawMeshTasksNV(
    command_buffer: NonDisposableHandle,
    task_count: u32,
    first_task: u32,
) -> c_void {
    trace!("called vkCmdDrawMeshTasksNV({command_buffer:?}, {task_count:?}, {first_task:?})");

    let mut packet = new_packet(1000001333);
    packet.write(command_buffer);
    packet.write(task_count);
    packet.write(first_task);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectNV.html>"]
unsafe extern "system" fn vkCmdDrawMeshTasksIndirectNV(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawMeshTasksIndirectNV({command_buffer:?}, {buffer:?}, {offset:?}, {draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001334);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectCountNV.html>"]
unsafe extern "system" fn vkCmdDrawMeshTasksIndirectCountNV(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    count_buffer: NonDisposableHandle,
    count_buffer_offset: NonDisposableHandle,
    max_draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawMeshTasksIndirectCountNV({command_buffer:?}, {buffer:?}, {offset:?}, {count_buffer:?}, {count_buffer_offset:?}, {max_draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001335);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(count_buffer);
    packet.write(count_buffer_offset);
    packet.write(max_draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksEXT.html>"]
unsafe extern "system" fn vkCmdDrawMeshTasksEXT(
    command_buffer: NonDisposableHandle,
    group_count_x: u32,
    group_count_y: u32,
    group_count_z: u32,
) -> c_void {
    trace!("called vkCmdDrawMeshTasksEXT({command_buffer:?}, {group_count_x:?}, {group_count_y:?}, {group_count_z:?})");

    let mut packet = new_packet(1000001336);
    packet.write(command_buffer);
    packet.write(group_count_x);
    packet.write(group_count_y);
    packet.write(group_count_z);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectEXT.html>"]
unsafe extern "system" fn vkCmdDrawMeshTasksIndirectEXT(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawMeshTasksIndirectEXT({command_buffer:?}, {buffer:?}, {offset:?}, {draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001337);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawMeshTasksIndirectCountEXT.html>"]
unsafe extern "system" fn vkCmdDrawMeshTasksIndirectCountEXT(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    count_buffer: NonDisposableHandle,
    count_buffer_offset: NonDisposableHandle,
    max_draw_count: u32,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDrawMeshTasksIndirectCountEXT({command_buffer:?}, {buffer:?}, {offset:?}, {count_buffer:?}, {count_buffer_offset:?}, {max_draw_count:?}, {stride:?})");

    let mut packet = new_packet(1000001338);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(count_buffer);
    packet.write(count_buffer_offset);
    packet.write(max_draw_count);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCompileDeferredNV.html>"]
unsafe extern "system" fn vkCompileDeferredNV(
    device: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    shader: u32,
) -> NonDisposableHandle {
    trace!("called vkCompileDeferredNV({device:?}, {pipeline:?}, {shader:?})");

    let mut packet = new_packet(1000001339);
    packet.write(device);
    packet.write(pipeline);
    packet.write(shader);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAccelerationStructureNV.html>"]
unsafe extern "system" fn vkCreateAccelerationStructureNV(
    device: NonDisposableHandle,
    p_create_info: *const VkAccelerationStructureCreateInfoNV,
    p_allocator: *const VkAllocationCallbacks,
    p_acceleration_structure: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateAccelerationStructureNV({device:?}, {p_create_info:?}, {p_allocator:?}, {p_acceleration_structure:?})");

    let mut packet = new_packet(1000001340);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_acceleration_structure);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_acceleration_structure);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindInvocationMaskHUAWEI.html>"]
unsafe extern "system" fn vkCmdBindInvocationMaskHUAWEI(
    command_buffer: NonDisposableHandle,
    image_view: NonDisposableHandle,
    image_layout: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindInvocationMaskHUAWEI({command_buffer:?}, {image_view:?}, {image_layout:?})");

    let mut packet = new_packet(1000001341);
    packet.write(command_buffer);
    packet.write(image_view);
    packet.write(image_layout);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyAccelerationStructureKHR.html>"]
unsafe extern "system" fn vkDestroyAccelerationStructureKHR(
    device: NonDisposableHandle,
    acceleration_structure: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyAccelerationStructureKHR({device:?}, {acceleration_structure:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001342);
    packet.write(device);
    packet.write(acceleration_structure);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyAccelerationStructureNV.html>"]
unsafe extern "system" fn vkDestroyAccelerationStructureNV(
    device: NonDisposableHandle,
    acceleration_structure: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyAccelerationStructureNV({device:?}, {acceleration_structure:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001343);
    packet.write(device);
    packet.write(acceleration_structure);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureMemoryRequirementsNV.html>"]
unsafe extern "system" fn vkGetAccelerationStructureMemoryRequirementsNV(
    device: NonDisposableHandle,
    p_info: *const VkAccelerationStructureMemoryRequirementsInfoNV,
    p_memory_requirements: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetAccelerationStructureMemoryRequirementsNV({device:?}, {p_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001344);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindAccelerationStructureMemoryNV.html>"]
unsafe extern "system" fn vkBindAccelerationStructureMemoryNV(
    device: NonDisposableHandle,
    bind_info_count: u32,
    p_bind_infos: *const VkBindAccelerationStructureMemoryInfoNV,
) -> NonDisposableHandle {
    trace!("called vkBindAccelerationStructureMemoryNV({device:?}, {bind_info_count:?}, {p_bind_infos:?})");

    let mut packet = new_packet(1000001345);
    packet.write(device);
    packet.write(bind_info_count);
    packet.write_nullable_raw_ptr(p_bind_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureNV.html>"]
unsafe extern "system" fn vkCmdCopyAccelerationStructureNV(
    command_buffer: NonDisposableHandle,
    dst: NonDisposableHandle,
    src: NonDisposableHandle,
    mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdCopyAccelerationStructureNV({command_buffer:?}, {dst:?}, {src:?}, {mode:?})");

    let mut packet = new_packet(1000001346);
    packet.write(command_buffer);
    packet.write(dst);
    packet.write(src);
    packet.write(mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureKHR.html>"]
unsafe extern "system" fn vkCmdCopyAccelerationStructureKHR(
    command_buffer: NonDisposableHandle,
    p_info: *const VkCopyAccelerationStructureInfoKHR,
) -> c_void {
    trace!("called vkCmdCopyAccelerationStructureKHR({command_buffer:?}, {p_info:?})");

    let mut packet = new_packet(1000001347);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyAccelerationStructureKHR.html>"]
unsafe extern "system" fn vkCopyAccelerationStructureKHR(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    p_info: *const VkCopyAccelerationStructureInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkCopyAccelerationStructureKHR({device:?}, {deferred_operation:?}, {p_info:?})");

    let mut packet = new_packet(1000001348);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyAccelerationStructureToMemoryKHR.html>"]
unsafe extern "system" fn vkCmdCopyAccelerationStructureToMemoryKHR(
    command_buffer: NonDisposableHandle,
    p_info: *const VkCopyAccelerationStructureToMemoryInfoKHR,
) -> c_void {
    trace!("called vkCmdCopyAccelerationStructureToMemoryKHR({command_buffer:?}, {p_info:?})");

    let mut packet = new_packet(1000001349);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyAccelerationStructureToMemoryKHR.html>"]
unsafe extern "system" fn vkCopyAccelerationStructureToMemoryKHR(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    p_info: *const VkCopyAccelerationStructureToMemoryInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkCopyAccelerationStructureToMemoryKHR({device:?}, {deferred_operation:?}, {p_info:?})");

    let mut packet = new_packet(1000001350);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToAccelerationStructureKHR.html>"]
unsafe extern "system" fn vkCmdCopyMemoryToAccelerationStructureKHR(
    command_buffer: NonDisposableHandle,
    p_info: *const VkCopyMemoryToAccelerationStructureInfoKHR,
) -> c_void {
    trace!("called vkCmdCopyMemoryToAccelerationStructureKHR({command_buffer:?}, {p_info:?})");

    let mut packet = new_packet(1000001351);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToAccelerationStructureKHR.html>"]
unsafe extern "system" fn vkCopyMemoryToAccelerationStructureKHR(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    p_info: *const VkCopyMemoryToAccelerationStructureInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkCopyMemoryToAccelerationStructureKHR({device:?}, {deferred_operation:?}, {p_info:?})");

    let mut packet = new_packet(1000001352);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesKHR.html>"]
unsafe extern "system" fn vkCmdWriteAccelerationStructuresPropertiesKHR(
    command_buffer: NonDisposableHandle,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const NonDisposableHandle,
    query_type: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
) -> c_void {
    trace!("called vkCmdWriteAccelerationStructuresPropertiesKHR({command_buffer:?}, {acceleration_structure_count:?}, {p_acceleration_structures:?}, {query_type:?}, {query_pool:?}, {first_query:?})");

    let mut packet = new_packet(1000001353);
    packet.write(command_buffer);
    packet.write(acceleration_structure_count);
    packet.write_nullable_raw_ptr(p_acceleration_structures);
    packet.write(query_type);
    packet.write(query_pool);
    packet.write(first_query);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesNV.html>"]
unsafe extern "system" fn vkCmdWriteAccelerationStructuresPropertiesNV(
    command_buffer: NonDisposableHandle,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const NonDisposableHandle,
    query_type: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
) -> c_void {
    trace!("called vkCmdWriteAccelerationStructuresPropertiesNV({command_buffer:?}, {acceleration_structure_count:?}, {p_acceleration_structures:?}, {query_type:?}, {query_pool:?}, {first_query:?})");

    let mut packet = new_packet(1000001354);
    packet.write(command_buffer);
    packet.write(acceleration_structure_count);
    packet.write_nullable_raw_ptr(p_acceleration_structures);
    packet.write(query_type);
    packet.write(query_pool);
    packet.write(first_query);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructureNV.html>"]
unsafe extern "system" fn vkCmdBuildAccelerationStructureNV(
    command_buffer: NonDisposableHandle,
    p_info: *const VkAccelerationStructureInfoNV,
    instance_data: NonDisposableHandle,
    instance_offset: NonDisposableHandle,
    update: NonDisposableHandle,
    dst: NonDisposableHandle,
    src: NonDisposableHandle,
    scratch: NonDisposableHandle,
    scratch_offset: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBuildAccelerationStructureNV({command_buffer:?}, {p_info:?}, {instance_data:?}, {instance_offset:?}, {update:?}, {dst:?}, {src:?}, {scratch:?}, {scratch_offset:?})");

    let mut packet = new_packet(1000001355);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);
    packet.write(instance_data);
    packet.write(instance_offset);
    packet.write(update);
    packet.write(dst);
    packet.write(src);
    packet.write(scratch);
    packet.write(scratch_offset);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWriteAccelerationStructuresPropertiesKHR.html>"]
unsafe extern "system" fn vkWriteAccelerationStructuresPropertiesKHR(
    device: NonDisposableHandle,
    acceleration_structure_count: u32,
    p_acceleration_structures: *const NonDisposableHandle,
    query_type: NonDisposableHandle,
    data_size: usize,
    p_data: *mut c_void,
    stride: usize,
) -> NonDisposableHandle {
    trace!("called vkWriteAccelerationStructuresPropertiesKHR({device:?}, {acceleration_structure_count:?}, {p_acceleration_structures:?}, {query_type:?}, {data_size:?}, {p_data:?}, {stride:?})");

    let mut packet = new_packet(1000001356);
    packet.write(device);
    packet.write(acceleration_structure_count);
    packet.write_nullable_raw_ptr(p_acceleration_structures);
    packet.write(query_type);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_data);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysKHR.html>"]
unsafe extern "system" fn vkCmdTraceRaysKHR(
    command_buffer: NonDisposableHandle,
    p_raygen_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    p_miss_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    p_hit_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    p_callable_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    width: u32,
    height: u32,
    depth: u32,
) -> c_void {
    trace!("called vkCmdTraceRaysKHR({command_buffer:?}, {p_raygen_shader_binding_table:?}, {p_miss_shader_binding_table:?}, {p_hit_shader_binding_table:?}, {p_callable_shader_binding_table:?}, {width:?}, {height:?}, {depth:?})");

    let mut packet = new_packet(1000001357);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_raygen_shader_binding_table);
    packet.write_nullable_raw_ptr(p_miss_shader_binding_table);
    packet.write_nullable_raw_ptr(p_hit_shader_binding_table);
    packet.write_nullable_raw_ptr(p_callable_shader_binding_table);
    packet.write(width);
    packet.write(height);
    packet.write(depth);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysNV.html>"]
unsafe extern "system" fn vkCmdTraceRaysNV(
    command_buffer: NonDisposableHandle,
    raygen_shader_binding_table_buffer: NonDisposableHandle,
    raygen_shader_binding_offset: NonDisposableHandle,
    miss_shader_binding_table_buffer: NonDisposableHandle,
    miss_shader_binding_offset: NonDisposableHandle,
    miss_shader_binding_stride: NonDisposableHandle,
    hit_shader_binding_table_buffer: NonDisposableHandle,
    hit_shader_binding_offset: NonDisposableHandle,
    hit_shader_binding_stride: NonDisposableHandle,
    callable_shader_binding_table_buffer: NonDisposableHandle,
    callable_shader_binding_offset: NonDisposableHandle,
    callable_shader_binding_stride: NonDisposableHandle,
    width: u32,
    height: u32,
    depth: u32,
) -> c_void {
    trace!("called vkCmdTraceRaysNV({command_buffer:?}, {raygen_shader_binding_table_buffer:?}, {raygen_shader_binding_offset:?}, {miss_shader_binding_table_buffer:?}, {miss_shader_binding_offset:?}, {miss_shader_binding_stride:?}, {hit_shader_binding_table_buffer:?}, {hit_shader_binding_offset:?}, {hit_shader_binding_stride:?}, {callable_shader_binding_table_buffer:?}, {callable_shader_binding_offset:?}, {callable_shader_binding_stride:?}, {width:?}, {height:?}, {depth:?})");

    let mut packet = new_packet(1000001358);
    packet.write(command_buffer);
    packet.write(raygen_shader_binding_table_buffer);
    packet.write(raygen_shader_binding_offset);
    packet.write(miss_shader_binding_table_buffer);
    packet.write(miss_shader_binding_offset);
    packet.write(miss_shader_binding_stride);
    packet.write(hit_shader_binding_table_buffer);
    packet.write(hit_shader_binding_offset);
    packet.write(hit_shader_binding_stride);
    packet.write(callable_shader_binding_table_buffer);
    packet.write(callable_shader_binding_offset);
    packet.write(callable_shader_binding_stride);
    packet.write(width);
    packet.write(height);
    packet.write(depth);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingShaderGroupHandlesKHR.html>"]
unsafe extern "system" fn vkGetRayTracingShaderGroupHandlesKHR(
    device: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    first_group: u32,
    group_count: u32,
    data_size: usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetRayTracingShaderGroupHandlesKHR({device:?}, {pipeline:?}, {first_group:?}, {group_count:?}, {data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001359);
    packet.write(device);
    packet.write(pipeline);
    packet.write(first_group);
    packet.write(group_count);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.html>"]
unsafe extern "system" fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    device: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    first_group: u32,
    group_count: u32,
    data_size: usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetRayTracingCaptureReplayShaderGroupHandlesKHR({device:?}, {pipeline:?}, {first_group:?}, {group_count:?}, {data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001360);
    packet.write(device);
    packet.write(pipeline);
    packet.write(first_group);
    packet.write(group_count);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureHandleNV.html>"]
unsafe extern "system" fn vkGetAccelerationStructureHandleNV(
    device: NonDisposableHandle,
    acceleration_structure: NonDisposableHandle,
    data_size: usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetAccelerationStructureHandleNV({device:?}, {acceleration_structure:?}, {data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001361);
    packet.write(device);
    packet.write(acceleration_structure);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRayTracingPipelinesNV.html>"]
unsafe extern "system" fn vkCreateRayTracingPipelinesNV(
    device: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    create_info_count: u32,
    p_create_infos: *const VkRayTracingPipelineCreateInfoNV,
    p_allocator: *const VkAllocationCallbacks,
    p_pipelines: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateRayTracingPipelinesNV({device:?}, {pipeline_cache:?}, {create_info_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_pipelines:?})");

    let mut packet = new_packet(1000001362);
    packet.write(device);
    packet.write(pipeline_cache);
    packet.write(create_info_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipelines);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipelines);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateRayTracingPipelinesKHR.html>"]
unsafe extern "system" fn vkCreateRayTracingPipelinesKHR(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    create_info_count: u32,
    p_create_infos: *const VkRayTracingPipelineCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_pipelines: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateRayTracingPipelinesKHR({device:?}, {deferred_operation:?}, {pipeline_cache:?}, {create_info_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_pipelines:?})");

    let mut packet = new_packet(1000001363);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write(pipeline_cache);
    packet.write(create_info_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipelines);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipelines);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkCooperativeMatrixPropertiesNV,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceCooperativeMatrixPropertiesNV({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001364);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysIndirectKHR.html>"]
unsafe extern "system" fn vkCmdTraceRaysIndirectKHR(
    command_buffer: NonDisposableHandle,
    p_raygen_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    p_miss_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    p_hit_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    p_callable_shader_binding_table: *const VkStridedDeviceAddressRegionKHR,
    indirect_device_address: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdTraceRaysIndirectKHR({command_buffer:?}, {p_raygen_shader_binding_table:?}, {p_miss_shader_binding_table:?}, {p_hit_shader_binding_table:?}, {p_callable_shader_binding_table:?}, {indirect_device_address:?})");

    let mut packet = new_packet(1000001365);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_raygen_shader_binding_table);
    packet.write_nullable_raw_ptr(p_miss_shader_binding_table);
    packet.write_nullable_raw_ptr(p_hit_shader_binding_table);
    packet.write_nullable_raw_ptr(p_callable_shader_binding_table);
    packet.write(indirect_device_address);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdTraceRaysIndirect2KHR.html>"]
unsafe extern "system" fn vkCmdTraceRaysIndirect2KHR(
    command_buffer: NonDisposableHandle,
    indirect_device_address: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdTraceRaysIndirect2KHR({command_buffer:?}, {indirect_device_address:?})");

    let mut packet = new_packet(1000001366);
    packet.write(command_buffer);
    packet.write(indirect_device_address);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceAccelerationStructureCompatibilityKHR.html>"]
unsafe extern "system" fn vkGetDeviceAccelerationStructureCompatibilityKHR(
    device: NonDisposableHandle,
    p_version_info: *const VkAccelerationStructureVersionInfoKHR,
    p_compatibility: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDeviceAccelerationStructureCompatibilityKHR({device:?}, {p_version_info:?}, {p_compatibility:?})");

    let mut packet = new_packet(1000001367);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_version_info);
    packet.write_nullable_raw_ptr_mut(p_compatibility);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_compatibility);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetRayTracingShaderGroupStackSizeKHR.html>"]
unsafe extern "system" fn vkGetRayTracingShaderGroupStackSizeKHR(
    device: NonDisposableHandle,
    pipeline: NonDisposableHandle,
    group: u32,
    group_shader: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetRayTracingShaderGroupStackSizeKHR({device:?}, {pipeline:?}, {group:?}, {group_shader:?})");

    let mut packet = new_packet(1000001368);
    packet.write(device);
    packet.write(pipeline);
    packet.write(group);
    packet.write(group_shader);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRayTracingPipelineStackSizeKHR.html>"]
unsafe extern "system" fn vkCmdSetRayTracingPipelineStackSizeKHR(
    command_buffer: NonDisposableHandle,
    pipeline_stack_size: u32,
) -> c_void {
    trace!("called vkCmdSetRayTracingPipelineStackSizeKHR({command_buffer:?}, {pipeline_stack_size:?})");

    let mut packet = new_packet(1000001369);
    packet.write(command_buffer);
    packet.write(pipeline_stack_size);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewHandleNVX.html>"]
unsafe extern "system" fn vkGetImageViewHandleNVX(
    device: NonDisposableHandle,
    p_info: *const VkImageViewHandleInfoNVX,
) -> u32 {
    trace!("called vkGetImageViewHandleNVX({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001370);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewAddressNVX.html>"]
unsafe extern "system" fn vkGetImageViewAddressNVX(
    device: NonDisposableHandle,
    image_view: NonDisposableHandle,
    p_properties: *mut VkImageViewAddressPropertiesNVX,
) -> NonDisposableHandle {
    trace!("called vkGetImageViewAddressNVX({device:?}, {image_view:?}, {p_properties:?})");

    let mut packet = new_packet(1000001371);
    packet.write(device);
    packet.write(image_view);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModes2EXT.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSurfacePresentModes2EXT(
    physical_device: NonDisposableHandle,
    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
    p_present_mode_count: *mut u32,
    p_present_modes: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSurfacePresentModes2EXT({physical_device:?}, {p_surface_info:?}, {p_present_mode_count:?}, {p_present_modes:?})");

    let mut packet = new_packet(1000001372);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_surface_info);
    packet.write_vk_array_count(p_present_mode_count, p_present_modes);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_present_mode_count, p_present_modes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceGroupSurfacePresentModes2EXT.html>"]
unsafe extern "system" fn vkGetDeviceGroupSurfacePresentModes2EXT(
    device: NonDisposableHandle,
    p_surface_info: *const VkPhysicalDeviceSurfaceInfo2KHR,
    p_modes: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetDeviceGroupSurfacePresentModes2EXT({device:?}, {p_surface_info:?}, {p_modes:?})");

    let mut packet = new_packet(1000001373);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_surface_info);
    packet.write_nullable_raw_ptr_mut(p_modes);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_modes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireFullScreenExclusiveModeEXT.html>"]
unsafe extern "system" fn vkAcquireFullScreenExclusiveModeEXT(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAcquireFullScreenExclusiveModeEXT({device:?}, {swapchain:?})");

    let mut packet = new_packet(1000001374);
    packet.write(device);
    packet.write(swapchain);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseFullScreenExclusiveModeEXT.html>"]
unsafe extern "system" fn vkReleaseFullScreenExclusiveModeEXT(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkReleaseFullScreenExclusiveModeEXT({device:?}, {swapchain:?})");

    let mut packet = new_packet(1000001375);
    packet.write(device);
    packet.write(swapchain);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.html>"]
unsafe extern "system" fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    physical_device: NonDisposableHandle,
    queue_family_index: u32,
    p_counter_count: *mut u32,
    p_counters: *mut VkPerformanceCounterKHR,
    p_counter_descriptions: *mut VkPerformanceCounterDescriptionKHR,
) -> NonDisposableHandle {
    trace!("called vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR({physical_device:?}, {queue_family_index:?}, {p_counter_count:?}, {p_counters:?}, {p_counter_descriptions:?})");

    let mut packet = new_packet(1000001376);
    packet.write(physical_device);
    packet.write(queue_family_index);
    packet.write_vk_array_count(p_counter_count, p_counters);
    packet.write_nullable_raw_ptr_mut(p_counter_descriptions);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_counter_count, p_counters);
    response.read_to_raw_ptr(p_counter_descriptions);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    physical_device: NonDisposableHandle,
    p_performance_query_create_info: *const VkQueryPoolPerformanceCreateInfoKHR,
    p_num_passes: *mut u32,
) -> c_void {
    trace!("called vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR({physical_device:?}, {p_performance_query_create_info:?}, {p_num_passes:?})");

    let mut packet = new_packet(1000001377);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_performance_query_create_info);
    packet.write_nullable_raw_ptr_mut(p_num_passes);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_num_passes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireProfilingLockKHR.html>"]
unsafe extern "system" fn vkAcquireProfilingLockKHR(
    device: NonDisposableHandle,
    p_info: *const VkAcquireProfilingLockInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkAcquireProfilingLockKHR({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001378);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseProfilingLockKHR.html>"]
unsafe extern "system" fn vkReleaseProfilingLockKHR(
    device: NonDisposableHandle,
) -> c_void {
    trace!("called vkReleaseProfilingLockKHR({device:?})");

    let mut packet = new_packet(1000001379);
    packet.write(device);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageDrmFormatModifierPropertiesEXT.html>"]
unsafe extern "system" fn vkGetImageDrmFormatModifierPropertiesEXT(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    p_properties: *mut VkImageDrmFormatModifierPropertiesEXT,
) -> NonDisposableHandle {
    trace!("called vkGetImageDrmFormatModifierPropertiesEXT({device:?}, {image:?}, {p_properties:?})");

    let mut packet = new_packet(1000001380);
    packet.write(device);
    packet.write(image);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferOpaqueCaptureAddress.html>"]
unsafe extern "system" fn vkGetBufferOpaqueCaptureAddress(
    device: NonDisposableHandle,
    p_info: *const VkBufferDeviceAddressInfo,
) -> u64 {
    trace!("called vkGetBufferOpaqueCaptureAddress({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001381);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferDeviceAddress.html>"]
unsafe extern "system" fn vkGetBufferDeviceAddress(
    device: NonDisposableHandle,
    p_info: *const VkBufferDeviceAddressInfo,
) -> NonDisposableHandle {
    trace!("called vkGetBufferDeviceAddress({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001382);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateHeadlessSurfaceEXT.html>"]
unsafe extern "system" fn vkCreateHeadlessSurfaceEXT(
    instance: NonDisposableHandle,
    p_create_info: *const VkHeadlessSurfaceCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_surface: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateHeadlessSurfaceEXT({instance:?}, {p_create_info:?}, {p_allocator:?}, {p_surface:?})");

    let mut packet = new_packet(1000001383);
    packet.write(instance);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_surface);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_surface);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    physical_device: NonDisposableHandle,
    p_combination_count: *mut u32,
    p_combinations: *mut VkFramebufferMixedSamplesCombinationNV,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV({physical_device:?}, {p_combination_count:?}, {p_combinations:?})");

    let mut packet = new_packet(1000001384);
    packet.write(physical_device);
    packet.write_vk_array_count(p_combination_count, p_combinations);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_combination_count, p_combinations);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkInitializePerformanceApiINTEL.html>"]
unsafe extern "system" fn vkInitializePerformanceApiINTEL(
    device: NonDisposableHandle,
    p_initialize_info: *const VkInitializePerformanceApiInfoINTEL,
) -> NonDisposableHandle {
    trace!("called vkInitializePerformanceApiINTEL({device:?}, {p_initialize_info:?})");

    let mut packet = new_packet(1000001385);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_initialize_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUninitializePerformanceApiINTEL.html>"]
unsafe extern "system" fn vkUninitializePerformanceApiINTEL(
    device: NonDisposableHandle,
) -> c_void {
    trace!("called vkUninitializePerformanceApiINTEL({device:?})");

    let mut packet = new_packet(1000001386);
    packet.write(device);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceMarkerINTEL.html>"]
unsafe extern "system" fn vkCmdSetPerformanceMarkerINTEL(
    command_buffer: NonDisposableHandle,
    p_marker_info: *const VkPerformanceMarkerInfoINTEL,
) -> NonDisposableHandle {
    trace!("called vkCmdSetPerformanceMarkerINTEL({command_buffer:?}, {p_marker_info:?})");

    let mut packet = new_packet(1000001387);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_marker_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceStreamMarkerINTEL.html>"]
unsafe extern "system" fn vkCmdSetPerformanceStreamMarkerINTEL(
    command_buffer: NonDisposableHandle,
    p_marker_info: *const VkPerformanceStreamMarkerInfoINTEL,
) -> NonDisposableHandle {
    trace!("called vkCmdSetPerformanceStreamMarkerINTEL({command_buffer:?}, {p_marker_info:?})");

    let mut packet = new_packet(1000001388);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_marker_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPerformanceOverrideINTEL.html>"]
unsafe extern "system" fn vkCmdSetPerformanceOverrideINTEL(
    command_buffer: NonDisposableHandle,
    p_override_info: *const VkPerformanceOverrideInfoINTEL,
) -> NonDisposableHandle {
    trace!("called vkCmdSetPerformanceOverrideINTEL({command_buffer:?}, {p_override_info:?})");

    let mut packet = new_packet(1000001389);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_override_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquirePerformanceConfigurationINTEL.html>"]
unsafe extern "system" fn vkAcquirePerformanceConfigurationINTEL(
    device: NonDisposableHandle,
    p_acquire_info: *const VkPerformanceConfigurationAcquireInfoINTEL,
    p_configuration: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAcquirePerformanceConfigurationINTEL({device:?}, {p_acquire_info:?}, {p_configuration:?})");

    let mut packet = new_packet(1000001390);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_acquire_info);
    packet.write_nullable_raw_ptr_mut(p_configuration);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_configuration);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleasePerformanceConfigurationINTEL.html>"]
unsafe extern "system" fn vkReleasePerformanceConfigurationINTEL(
    device: NonDisposableHandle,
    configuration: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkReleasePerformanceConfigurationINTEL({device:?}, {configuration:?})");

    let mut packet = new_packet(1000001391);
    packet.write(device);
    packet.write(configuration);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSetPerformanceConfigurationINTEL.html>"]
unsafe extern "system" fn vkQueueSetPerformanceConfigurationINTEL(
    queue: NonDisposableHandle,
    configuration: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkQueueSetPerformanceConfigurationINTEL({queue:?}, {configuration:?})");

    let mut packet = new_packet(1000001392);
    packet.write(queue);
    packet.write(configuration);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPerformanceParameterINTEL.html>"]
unsafe extern "system" fn vkGetPerformanceParameterINTEL(
    device: NonDisposableHandle,
    parameter: NonDisposableHandle,
    p_value: *mut VkPerformanceValueINTEL,
) -> NonDisposableHandle {
    trace!("called vkGetPerformanceParameterINTEL({device:?}, {parameter:?}, {p_value:?})");

    let mut packet = new_packet(1000001393);
    packet.write(device);
    packet.write(parameter);
    packet.write_nullable_raw_ptr_mut(p_value);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_value);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMemoryOpaqueCaptureAddress.html>"]
unsafe extern "system" fn vkGetDeviceMemoryOpaqueCaptureAddress(
    device: NonDisposableHandle,
    p_info: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
) -> u64 {
    trace!("called vkGetDeviceMemoryOpaqueCaptureAddress({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001394);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutablePropertiesKHR.html>"]
unsafe extern "system" fn vkGetPipelineExecutablePropertiesKHR(
    device: NonDisposableHandle,
    p_pipeline_info: *const VkPipelineInfoKHR,
    p_executable_count: *mut u32,
    p_properties: *mut VkPipelineExecutablePropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPipelineExecutablePropertiesKHR({device:?}, {p_pipeline_info:?}, {p_executable_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001395);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_pipeline_info);
    packet.write_vk_array_count(p_executable_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_executable_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutableStatisticsKHR.html>"]
unsafe extern "system" fn vkGetPipelineExecutableStatisticsKHR(
    device: NonDisposableHandle,
    p_executable_info: *const VkPipelineExecutableInfoKHR,
    p_statistic_count: *mut u32,
    p_statistics: *mut VkPipelineExecutableStatisticKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPipelineExecutableStatisticsKHR({device:?}, {p_executable_info:?}, {p_statistic_count:?}, {p_statistics:?})");

    let mut packet = new_packet(1000001396);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_executable_info);
    packet.write_vk_array_count(p_statistic_count, p_statistics);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_statistic_count, p_statistics);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineExecutableInternalRepresentationsKHR.html>"]
unsafe extern "system" fn vkGetPipelineExecutableInternalRepresentationsKHR(
    device: NonDisposableHandle,
    p_executable_info: *const VkPipelineExecutableInfoKHR,
    p_internal_representation_count: *mut u32,
    p_internal_representations: *mut VkPipelineExecutableInternalRepresentationKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPipelineExecutableInternalRepresentationsKHR({device:?}, {p_executable_info:?}, {p_internal_representation_count:?}, {p_internal_representations:?})");

    let mut packet = new_packet(1000001397);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_executable_info);
    packet.write_vk_array_count(p_internal_representation_count, p_internal_representations);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_internal_representation_count, p_internal_representations);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleKHR.html>"]
unsafe extern "system" fn vkCmdSetLineStippleKHR(
    command_buffer: NonDisposableHandle,
    line_stipple_factor: u32,
    line_stipple_pattern: u16,
) -> c_void {
    trace!("called vkCmdSetLineStippleKHR({command_buffer:?}, {line_stipple_factor:?}, {line_stipple_pattern:?})");

    let mut packet = new_packet(1000001398);
    packet.write(command_buffer);
    packet.write(line_stipple_factor);
    packet.write(line_stipple_pattern);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceToolProperties.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceToolProperties(
    physical_device: NonDisposableHandle,
    p_tool_count: *mut u32,
    p_tool_properties: *mut VkPhysicalDeviceToolProperties,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceToolProperties({physical_device:?}, {p_tool_count:?}, {p_tool_properties:?})");

    let mut packet = new_packet(1000001399);
    packet.write(physical_device);
    packet.write_vk_array_count(p_tool_count, p_tool_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_tool_count, p_tool_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateAccelerationStructureKHR.html>"]
unsafe extern "system" fn vkCreateAccelerationStructureKHR(
    device: NonDisposableHandle,
    p_create_info: *const VkAccelerationStructureCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_acceleration_structure: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateAccelerationStructureKHR({device:?}, {p_create_info:?}, {p_allocator:?}, {p_acceleration_structure:?})");

    let mut packet = new_packet(1000001400);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_acceleration_structure);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_acceleration_structure);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructuresKHR.html>"]
unsafe extern "system" fn vkCmdBuildAccelerationStructuresKHR(
    command_buffer: NonDisposableHandle,
    info_count: u32,
    p_infos: *const VkAccelerationStructureBuildGeometryInfoKHR,
    pp_build_range_infos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
) -> c_void {
    trace!("called vkCmdBuildAccelerationStructuresKHR({command_buffer:?}, {info_count:?}, {p_infos:?}, {pp_build_range_infos:?})");

    let mut packet = new_packet(1000001401);
    packet.write(command_buffer);
    packet.write(info_count);
    packet.write_nullable_raw_ptr(p_infos);
    packet.write_nullable_raw_ptr(pp_build_range_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildAccelerationStructuresIndirectKHR.html>"]
unsafe extern "system" fn vkCmdBuildAccelerationStructuresIndirectKHR(
    command_buffer: NonDisposableHandle,
    info_count: u32,
    p_infos: *const VkAccelerationStructureBuildGeometryInfoKHR,
    p_indirect_device_addresses: *const NonDisposableHandle,
    p_indirect_strides: *const u32,
    pp_max_primitive_counts: *const *const u32,
) -> c_void {
    trace!("called vkCmdBuildAccelerationStructuresIndirectKHR({command_buffer:?}, {info_count:?}, {p_infos:?}, {p_indirect_device_addresses:?}, {p_indirect_strides:?}, {pp_max_primitive_counts:?})");

    let mut packet = new_packet(1000001402);
    packet.write(command_buffer);
    packet.write(info_count);
    packet.write_nullable_raw_ptr(p_infos);
    packet.write_nullable_raw_ptr(p_indirect_device_addresses);
    packet.write_nullable_raw_ptr(p_indirect_strides);
    packet.write_nullable_raw_ptr(pp_max_primitive_counts);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBuildAccelerationStructuresKHR.html>"]
unsafe extern "system" fn vkBuildAccelerationStructuresKHR(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    info_count: u32,
    p_infos: *const VkAccelerationStructureBuildGeometryInfoKHR,
    pp_build_range_infos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkBuildAccelerationStructuresKHR({device:?}, {deferred_operation:?}, {info_count:?}, {p_infos:?}, {pp_build_range_infos:?})");

    let mut packet = new_packet(1000001403);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write(info_count);
    packet.write_nullable_raw_ptr(p_infos);
    packet.write_nullable_raw_ptr(pp_build_range_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureDeviceAddressKHR.html>"]
unsafe extern "system" fn vkGetAccelerationStructureDeviceAddressKHR(
    device: NonDisposableHandle,
    p_info: *const VkAccelerationStructureDeviceAddressInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkGetAccelerationStructureDeviceAddressKHR({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001404);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDeferredOperationKHR.html>"]
unsafe extern "system" fn vkCreateDeferredOperationKHR(
    device: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
    p_deferred_operation: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateDeferredOperationKHR({device:?}, {p_allocator:?}, {p_deferred_operation:?})");

    let mut packet = new_packet(1000001405);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_deferred_operation);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_deferred_operation);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyDeferredOperationKHR.html>"]
unsafe extern "system" fn vkDestroyDeferredOperationKHR(
    device: NonDisposableHandle,
    operation: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyDeferredOperationKHR({device:?}, {operation:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001406);
    packet.write(device);
    packet.write(operation);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeferredOperationMaxConcurrencyKHR.html>"]
unsafe extern "system" fn vkGetDeferredOperationMaxConcurrencyKHR(
    device: NonDisposableHandle,
    operation: NonDisposableHandle,
) -> u32 {
    trace!("called vkGetDeferredOperationMaxConcurrencyKHR({device:?}, {operation:?})");

    let mut packet = new_packet(1000001407);
    packet.write(device);
    packet.write(operation);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeferredOperationResultKHR.html>"]
unsafe extern "system" fn vkGetDeferredOperationResultKHR(
    device: NonDisposableHandle,
    operation: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetDeferredOperationResultKHR({device:?}, {operation:?})");

    let mut packet = new_packet(1000001408);
    packet.write(device);
    packet.write(operation);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDeferredOperationJoinKHR.html>"]
unsafe extern "system" fn vkDeferredOperationJoinKHR(
    device: NonDisposableHandle,
    operation: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkDeferredOperationJoinKHR({device:?}, {operation:?})");

    let mut packet = new_packet(1000001409);
    packet.write(device);
    packet.write(operation);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineIndirectMemoryRequirementsNV.html>"]
unsafe extern "system" fn vkGetPipelineIndirectMemoryRequirementsNV(
    device: NonDisposableHandle,
    p_create_info: *const VkComputePipelineCreateInfo,
    p_memory_requirements: *mut VkMemoryRequirements2,
) -> c_void {
    trace!("called vkGetPipelineIndirectMemoryRequirementsNV({device:?}, {p_create_info:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001410);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr_mut(p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelineIndirectDeviceAddressNV.html>"]
unsafe extern "system" fn vkGetPipelineIndirectDeviceAddressNV(
    device: NonDisposableHandle,
    p_info: *const VkPipelineIndirectDeviceAddressInfoNV,
) -> NonDisposableHandle {
    trace!("called vkGetPipelineIndirectDeviceAddressNV({device:?}, {p_info:?})");

    let mut packet = new_packet(1000001411);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCullMode.html>"]
unsafe extern "system" fn vkCmdSetCullMode(
    command_buffer: NonDisposableHandle,
    cull_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetCullMode({command_buffer:?}, {cull_mode:?})");

    let mut packet = new_packet(1000001412);
    packet.write(command_buffer);
    packet.write(cull_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFrontFace.html>"]
unsafe extern "system" fn vkCmdSetFrontFace(
    command_buffer: NonDisposableHandle,
    front_face: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetFrontFace({command_buffer:?}, {front_face:?})");

    let mut packet = new_packet(1000001413);
    packet.write(command_buffer);
    packet.write(front_face);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPrimitiveTopology.html>"]
unsafe extern "system" fn vkCmdSetPrimitiveTopology(
    command_buffer: NonDisposableHandle,
    primitive_topology: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetPrimitiveTopology({command_buffer:?}, {primitive_topology:?})");

    let mut packet = new_packet(1000001414);
    packet.write(command_buffer);
    packet.write(primitive_topology);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWithCount.html>"]
unsafe extern "system" fn vkCmdSetViewportWithCount(
    command_buffer: NonDisposableHandle,
    viewport_count: u32,
    p_viewports: *const VkViewport,
) -> c_void {
    trace!("called vkCmdSetViewportWithCount({command_buffer:?}, {viewport_count:?}, {p_viewports:?})");

    let mut packet = new_packet(1000001415);
    packet.write(command_buffer);
    packet.write(viewport_count);
    packet.write_nullable_raw_ptr(p_viewports);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetScissorWithCount.html>"]
unsafe extern "system" fn vkCmdSetScissorWithCount(
    command_buffer: NonDisposableHandle,
    scissor_count: u32,
    p_scissors: *const VkRect2D,
) -> c_void {
    trace!("called vkCmdSetScissorWithCount({command_buffer:?}, {scissor_count:?}, {p_scissors:?})");

    let mut packet = new_packet(1000001416);
    packet.write(command_buffer);
    packet.write(scissor_count);
    packet.write_nullable_raw_ptr(p_scissors);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindIndexBuffer2KHR.html>"]
unsafe extern "system" fn vkCmdBindIndexBuffer2KHR(
    command_buffer: NonDisposableHandle,
    buffer: NonDisposableHandle,
    offset: NonDisposableHandle,
    size: NonDisposableHandle,
    index_type: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindIndexBuffer2KHR({command_buffer:?}, {buffer:?}, {offset:?}, {size:?}, {index_type:?})");

    let mut packet = new_packet(1000001417);
    packet.write(command_buffer);
    packet.write(buffer);
    packet.write(offset);
    packet.write(size);
    packet.write(index_type);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindVertexBuffers2.html>"]
unsafe extern "system" fn vkCmdBindVertexBuffers2(
    command_buffer: NonDisposableHandle,
    first_binding: u32,
    binding_count: u32,
    p_buffers: *const NonDisposableHandle,
    p_offsets: *const NonDisposableHandle,
    p_sizes: *const NonDisposableHandle,
    p_strides: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindVertexBuffers2({command_buffer:?}, {first_binding:?}, {binding_count:?}, {p_buffers:?}, {p_offsets:?}, {p_sizes:?}, {p_strides:?})");

    let mut packet = new_packet(1000001418);
    packet.write(command_buffer);
    packet.write(first_binding);
    packet.write(binding_count);
    packet.write_nullable_raw_ptr(p_buffers);
    packet.write_nullable_raw_ptr(p_offsets);
    packet.write_nullable_raw_ptr(p_sizes);
    packet.write_nullable_raw_ptr(p_strides);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthTestEnable.html>"]
unsafe extern "system" fn vkCmdSetDepthTestEnable(
    command_buffer: NonDisposableHandle,
    depth_test_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthTestEnable({command_buffer:?}, {depth_test_enable:?})");

    let mut packet = new_packet(1000001419);
    packet.write(command_buffer);
    packet.write(depth_test_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthWriteEnable.html>"]
unsafe extern "system" fn vkCmdSetDepthWriteEnable(
    command_buffer: NonDisposableHandle,
    depth_write_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthWriteEnable({command_buffer:?}, {depth_write_enable:?})");

    let mut packet = new_packet(1000001420);
    packet.write(command_buffer);
    packet.write(depth_write_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthCompareOp.html>"]
unsafe extern "system" fn vkCmdSetDepthCompareOp(
    command_buffer: NonDisposableHandle,
    depth_compare_op: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthCompareOp({command_buffer:?}, {depth_compare_op:?})");

    let mut packet = new_packet(1000001421);
    packet.write(command_buffer);
    packet.write(depth_compare_op);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBoundsTestEnable.html>"]
unsafe extern "system" fn vkCmdSetDepthBoundsTestEnable(
    command_buffer: NonDisposableHandle,
    depth_bounds_test_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthBoundsTestEnable({command_buffer:?}, {depth_bounds_test_enable:?})");

    let mut packet = new_packet(1000001422);
    packet.write(command_buffer);
    packet.write(depth_bounds_test_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilTestEnable.html>"]
unsafe extern "system" fn vkCmdSetStencilTestEnable(
    command_buffer: NonDisposableHandle,
    stencil_test_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetStencilTestEnable({command_buffer:?}, {stencil_test_enable:?})");

    let mut packet = new_packet(1000001423);
    packet.write(command_buffer);
    packet.write(stencil_test_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetStencilOp.html>"]
unsafe extern "system" fn vkCmdSetStencilOp(
    command_buffer: NonDisposableHandle,
    face_mask: NonDisposableHandle,
    fail_op: NonDisposableHandle,
    pass_op: NonDisposableHandle,
    depth_fail_op: NonDisposableHandle,
    compare_op: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetStencilOp({command_buffer:?}, {face_mask:?}, {fail_op:?}, {pass_op:?}, {depth_fail_op:?}, {compare_op:?})");

    let mut packet = new_packet(1000001424);
    packet.write(command_buffer);
    packet.write(face_mask);
    packet.write(fail_op);
    packet.write(pass_op);
    packet.write(depth_fail_op);
    packet.write(compare_op);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPatchControlPointsEXT.html>"]
unsafe extern "system" fn vkCmdSetPatchControlPointsEXT(
    command_buffer: NonDisposableHandle,
    patch_control_points: u32,
) -> c_void {
    trace!("called vkCmdSetPatchControlPointsEXT({command_buffer:?}, {patch_control_points:?})");

    let mut packet = new_packet(1000001425);
    packet.write(command_buffer);
    packet.write(patch_control_points);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizerDiscardEnable.html>"]
unsafe extern "system" fn vkCmdSetRasterizerDiscardEnable(
    command_buffer: NonDisposableHandle,
    rasterizer_discard_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetRasterizerDiscardEnable({command_buffer:?}, {rasterizer_discard_enable:?})");

    let mut packet = new_packet(1000001426);
    packet.write(command_buffer);
    packet.write(rasterizer_discard_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBiasEnable.html>"]
unsafe extern "system" fn vkCmdSetDepthBiasEnable(
    command_buffer: NonDisposableHandle,
    depth_bias_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthBiasEnable({command_buffer:?}, {depth_bias_enable:?})");

    let mut packet = new_packet(1000001427);
    packet.write(command_buffer);
    packet.write(depth_bias_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLogicOpEXT.html>"]
unsafe extern "system" fn vkCmdSetLogicOpEXT(
    command_buffer: NonDisposableHandle,
    logic_op: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetLogicOpEXT({command_buffer:?}, {logic_op:?})");

    let mut packet = new_packet(1000001428);
    packet.write(command_buffer);
    packet.write(logic_op);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPrimitiveRestartEnable.html>"]
unsafe extern "system" fn vkCmdSetPrimitiveRestartEnable(
    command_buffer: NonDisposableHandle,
    primitive_restart_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetPrimitiveRestartEnable({command_buffer:?}, {primitive_restart_enable:?})");

    let mut packet = new_packet(1000001429);
    packet.write(command_buffer);
    packet.write(primitive_restart_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetTessellationDomainOriginEXT.html>"]
unsafe extern "system" fn vkCmdSetTessellationDomainOriginEXT(
    command_buffer: NonDisposableHandle,
    domain_origin: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetTessellationDomainOriginEXT({command_buffer:?}, {domain_origin:?})");

    let mut packet = new_packet(1000001430);
    packet.write(command_buffer);
    packet.write(domain_origin);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClampEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetDepthClampEnableEXT(
    command_buffer: NonDisposableHandle,
    depth_clamp_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthClampEnableEXT({command_buffer:?}, {depth_clamp_enable:?})");

    let mut packet = new_packet(1000001431);
    packet.write(command_buffer);
    packet.write(depth_clamp_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPolygonModeEXT.html>"]
unsafe extern "system" fn vkCmdSetPolygonModeEXT(
    command_buffer: NonDisposableHandle,
    polygon_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetPolygonModeEXT({command_buffer:?}, {polygon_mode:?})");

    let mut packet = new_packet(1000001432);
    packet.write(command_buffer);
    packet.write(polygon_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizationSamplesEXT.html>"]
unsafe extern "system" fn vkCmdSetRasterizationSamplesEXT(
    command_buffer: NonDisposableHandle,
    rasterization_samples: vk::SampleCountFlags,
) -> c_void {
    trace!("called vkCmdSetRasterizationSamplesEXT({command_buffer:?}, {rasterization_samples:?})");

    let mut packet = new_packet(1000001433);
    packet.write(command_buffer);
    packet.write(rasterization_samples);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleMaskEXT.html>"]
unsafe extern "system" fn vkCmdSetSampleMaskEXT(
    command_buffer: NonDisposableHandle,
    samples: vk::SampleCountFlags,
    p_sample_mask: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetSampleMaskEXT({command_buffer:?}, {samples:?}, {p_sample_mask:?})");

    let mut packet = new_packet(1000001434);
    packet.write(command_buffer);
    packet.write(samples);
    packet.write_nullable_raw_ptr(p_sample_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAlphaToCoverageEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetAlphaToCoverageEnableEXT(
    command_buffer: NonDisposableHandle,
    alpha_to_coverage_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetAlphaToCoverageEnableEXT({command_buffer:?}, {alpha_to_coverage_enable:?})");

    let mut packet = new_packet(1000001435);
    packet.write(command_buffer);
    packet.write(alpha_to_coverage_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetAlphaToOneEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetAlphaToOneEnableEXT(
    command_buffer: NonDisposableHandle,
    alpha_to_one_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetAlphaToOneEnableEXT({command_buffer:?}, {alpha_to_one_enable:?})");

    let mut packet = new_packet(1000001436);
    packet.write(command_buffer);
    packet.write(alpha_to_one_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLogicOpEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetLogicOpEnableEXT(
    command_buffer: NonDisposableHandle,
    logic_op_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetLogicOpEnableEXT({command_buffer:?}, {logic_op_enable:?})");

    let mut packet = new_packet(1000001437);
    packet.write(command_buffer);
    packet.write(logic_op_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetColorBlendEnableEXT(
    command_buffer: NonDisposableHandle,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_enables: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetColorBlendEnableEXT({command_buffer:?}, {first_attachment:?}, {attachment_count:?}, {p_color_blend_enables:?})");

    let mut packet = new_packet(1000001438);
    packet.write(command_buffer);
    packet.write(first_attachment);
    packet.write(attachment_count);
    packet.write_nullable_raw_ptr(p_color_blend_enables);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEquationEXT.html>"]
unsafe extern "system" fn vkCmdSetColorBlendEquationEXT(
    command_buffer: NonDisposableHandle,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_equations: *const VkColorBlendEquationEXT,
) -> c_void {
    trace!("called vkCmdSetColorBlendEquationEXT({command_buffer:?}, {first_attachment:?}, {attachment_count:?}, {p_color_blend_equations:?})");

    let mut packet = new_packet(1000001439);
    packet.write(command_buffer);
    packet.write(first_attachment);
    packet.write(attachment_count);
    packet.write_nullable_raw_ptr(p_color_blend_equations);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteMaskEXT.html>"]
unsafe extern "system" fn vkCmdSetColorWriteMaskEXT(
    command_buffer: NonDisposableHandle,
    first_attachment: u32,
    attachment_count: u32,
    p_color_write_masks: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetColorWriteMaskEXT({command_buffer:?}, {first_attachment:?}, {attachment_count:?}, {p_color_write_masks:?})");

    let mut packet = new_packet(1000001440);
    packet.write(command_buffer);
    packet.write(first_attachment);
    packet.write(attachment_count);
    packet.write_nullable_raw_ptr(p_color_write_masks);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRasterizationStreamEXT.html>"]
unsafe extern "system" fn vkCmdSetRasterizationStreamEXT(
    command_buffer: NonDisposableHandle,
    rasterization_stream: u32,
) -> c_void {
    trace!("called vkCmdSetRasterizationStreamEXT({command_buffer:?}, {rasterization_stream:?})");

    let mut packet = new_packet(1000001441);
    packet.write(command_buffer);
    packet.write(rasterization_stream);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetConservativeRasterizationModeEXT.html>"]
unsafe extern "system" fn vkCmdSetConservativeRasterizationModeEXT(
    command_buffer: NonDisposableHandle,
    conservative_rasterization_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetConservativeRasterizationModeEXT({command_buffer:?}, {conservative_rasterization_mode:?})");

    let mut packet = new_packet(1000001442);
    packet.write(command_buffer);
    packet.write(conservative_rasterization_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetExtraPrimitiveOverestimationSizeEXT.html>"]
unsafe extern "system" fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(
    command_buffer: NonDisposableHandle,
    extra_primitive_overestimation_size: f32,
) -> c_void {
    trace!("called vkCmdSetExtraPrimitiveOverestimationSizeEXT({command_buffer:?}, {extra_primitive_overestimation_size:?})");

    let mut packet = new_packet(1000001443);
    packet.write(command_buffer);
    packet.write(extra_primitive_overestimation_size);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClipEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetDepthClipEnableEXT(
    command_buffer: NonDisposableHandle,
    depth_clip_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthClipEnableEXT({command_buffer:?}, {depth_clip_enable:?})");

    let mut packet = new_packet(1000001444);
    packet.write(command_buffer);
    packet.write(depth_clip_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetSampleLocationsEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetSampleLocationsEnableEXT(
    command_buffer: NonDisposableHandle,
    sample_locations_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetSampleLocationsEnableEXT({command_buffer:?}, {sample_locations_enable:?})");

    let mut packet = new_packet(1000001445);
    packet.write(command_buffer);
    packet.write(sample_locations_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendAdvancedEXT.html>"]
unsafe extern "system" fn vkCmdSetColorBlendAdvancedEXT(
    command_buffer: NonDisposableHandle,
    first_attachment: u32,
    attachment_count: u32,
    p_color_blend_advanced: *const VkColorBlendAdvancedEXT,
) -> c_void {
    trace!("called vkCmdSetColorBlendAdvancedEXT({command_buffer:?}, {first_attachment:?}, {attachment_count:?}, {p_color_blend_advanced:?})");

    let mut packet = new_packet(1000001446);
    packet.write(command_buffer);
    packet.write(first_attachment);
    packet.write(attachment_count);
    packet.write_nullable_raw_ptr(p_color_blend_advanced);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetProvokingVertexModeEXT.html>"]
unsafe extern "system" fn vkCmdSetProvokingVertexModeEXT(
    command_buffer: NonDisposableHandle,
    provoking_vertex_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetProvokingVertexModeEXT({command_buffer:?}, {provoking_vertex_mode:?})");

    let mut packet = new_packet(1000001447);
    packet.write(command_buffer);
    packet.write(provoking_vertex_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineRasterizationModeEXT.html>"]
unsafe extern "system" fn vkCmdSetLineRasterizationModeEXT(
    command_buffer: NonDisposableHandle,
    line_rasterization_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetLineRasterizationModeEXT({command_buffer:?}, {line_rasterization_mode:?})");

    let mut packet = new_packet(1000001448);
    packet.write(command_buffer);
    packet.write(line_rasterization_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetLineStippleEnableEXT(
    command_buffer: NonDisposableHandle,
    stippled_line_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetLineStippleEnableEXT({command_buffer:?}, {stippled_line_enable:?})");

    let mut packet = new_packet(1000001449);
    packet.write(command_buffer);
    packet.write(stippled_line_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthClipNegativeOneToOneEXT.html>"]
unsafe extern "system" fn vkCmdSetDepthClipNegativeOneToOneEXT(
    command_buffer: NonDisposableHandle,
    negative_one_to_one: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDepthClipNegativeOneToOneEXT({command_buffer:?}, {negative_one_to_one:?})");

    let mut packet = new_packet(1000001450);
    packet.write(command_buffer);
    packet.write(negative_one_to_one);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportWScalingEnableNV.html>"]
unsafe extern "system" fn vkCmdSetViewportWScalingEnableNV(
    command_buffer: NonDisposableHandle,
    viewport_wscaling_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetViewportWScalingEnableNV({command_buffer:?}, {viewport_wscaling_enable:?})");

    let mut packet = new_packet(1000001451);
    packet.write(command_buffer);
    packet.write(viewport_wscaling_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetViewportSwizzleNV.html>"]
unsafe extern "system" fn vkCmdSetViewportSwizzleNV(
    command_buffer: NonDisposableHandle,
    first_viewport: u32,
    viewport_count: u32,
    p_viewport_swizzles: *const VkViewportSwizzleNV,
) -> c_void {
    trace!("called vkCmdSetViewportSwizzleNV({command_buffer:?}, {first_viewport:?}, {viewport_count:?}, {p_viewport_swizzles:?})");

    let mut packet = new_packet(1000001452);
    packet.write(command_buffer);
    packet.write(first_viewport);
    packet.write(viewport_count);
    packet.write_nullable_raw_ptr(p_viewport_swizzles);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageToColorEnableNV.html>"]
unsafe extern "system" fn vkCmdSetCoverageToColorEnableNV(
    command_buffer: NonDisposableHandle,
    coverage_to_color_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetCoverageToColorEnableNV({command_buffer:?}, {coverage_to_color_enable:?})");

    let mut packet = new_packet(1000001453);
    packet.write(command_buffer);
    packet.write(coverage_to_color_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageToColorLocationNV.html>"]
unsafe extern "system" fn vkCmdSetCoverageToColorLocationNV(
    command_buffer: NonDisposableHandle,
    coverage_to_color_location: u32,
) -> c_void {
    trace!("called vkCmdSetCoverageToColorLocationNV({command_buffer:?}, {coverage_to_color_location:?})");

    let mut packet = new_packet(1000001454);
    packet.write(command_buffer);
    packet.write(coverage_to_color_location);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationModeNV.html>"]
unsafe extern "system" fn vkCmdSetCoverageModulationModeNV(
    command_buffer: NonDisposableHandle,
    coverage_modulation_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetCoverageModulationModeNV({command_buffer:?}, {coverage_modulation_mode:?})");

    let mut packet = new_packet(1000001455);
    packet.write(command_buffer);
    packet.write(coverage_modulation_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationTableEnableNV.html>"]
unsafe extern "system" fn vkCmdSetCoverageModulationTableEnableNV(
    command_buffer: NonDisposableHandle,
    coverage_modulation_table_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetCoverageModulationTableEnableNV({command_buffer:?}, {coverage_modulation_table_enable:?})");

    let mut packet = new_packet(1000001456);
    packet.write(command_buffer);
    packet.write(coverage_modulation_table_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageModulationTableNV.html>"]
unsafe extern "system" fn vkCmdSetCoverageModulationTableNV(
    command_buffer: NonDisposableHandle,
    coverage_modulation_table_count: u32,
    p_coverage_modulation_table: *const f32,
) -> c_void {
    trace!("called vkCmdSetCoverageModulationTableNV({command_buffer:?}, {coverage_modulation_table_count:?}, {p_coverage_modulation_table:?})");

    let mut packet = new_packet(1000001457);
    packet.write(command_buffer);
    packet.write(coverage_modulation_table_count);
    packet.write_nullable_raw_ptr(p_coverage_modulation_table);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetShadingRateImageEnableNV.html>"]
unsafe extern "system" fn vkCmdSetShadingRateImageEnableNV(
    command_buffer: NonDisposableHandle,
    shading_rate_image_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetShadingRateImageEnableNV({command_buffer:?}, {shading_rate_image_enable:?})");

    let mut packet = new_packet(1000001458);
    packet.write(command_buffer);
    packet.write(shading_rate_image_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetCoverageReductionModeNV.html>"]
unsafe extern "system" fn vkCmdSetCoverageReductionModeNV(
    command_buffer: NonDisposableHandle,
    coverage_reduction_mode: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetCoverageReductionModeNV({command_buffer:?}, {coverage_reduction_mode:?})");

    let mut packet = new_packet(1000001459);
    packet.write(command_buffer);
    packet.write(coverage_reduction_mode);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRepresentativeFragmentTestEnableNV.html>"]
unsafe extern "system" fn vkCmdSetRepresentativeFragmentTestEnableNV(
    command_buffer: NonDisposableHandle,
    representative_fragment_test_enable: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetRepresentativeFragmentTestEnableNV({command_buffer:?}, {representative_fragment_test_enable:?})");

    let mut packet = new_packet(1000001460);
    packet.write(command_buffer);
    packet.write(representative_fragment_test_enable);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreatePrivateDataSlot.html>"]
unsafe extern "system" fn vkCreatePrivateDataSlot(
    device: NonDisposableHandle,
    p_create_info: *const VkPrivateDataSlotCreateInfo,
    p_allocator: *const VkAllocationCallbacks,
    p_private_data_slot: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreatePrivateDataSlot({device:?}, {p_create_info:?}, {p_allocator:?}, {p_private_data_slot:?})");

    let mut packet = new_packet(1000001461);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_private_data_slot);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_private_data_slot);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyPrivateDataSlot.html>"]
unsafe extern "system" fn vkDestroyPrivateDataSlot(
    device: NonDisposableHandle,
    private_data_slot: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyPrivateDataSlot({device:?}, {private_data_slot:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001462);
    packet.write(device);
    packet.write(private_data_slot);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetPrivateData.html>"]
unsafe extern "system" fn vkSetPrivateData(
    device: NonDisposableHandle,
    object_type: NonDisposableHandle,
    object_handle: u64,
    private_data_slot: NonDisposableHandle,
    data: u64,
) -> NonDisposableHandle {
    trace!("called vkSetPrivateData({device:?}, {object_type:?}, {object_handle:?}, {private_data_slot:?}, {data:?})");

    let mut packet = new_packet(1000001463);
    packet.write(device);
    packet.write(object_type);
    packet.write(object_handle);
    packet.write(private_data_slot);
    packet.write(data);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPrivateData.html>"]
unsafe extern "system" fn vkGetPrivateData(
    device: NonDisposableHandle,
    object_type: NonDisposableHandle,
    object_handle: u64,
    private_data_slot: NonDisposableHandle,
    p_data: *mut u64,
) -> c_void {
    trace!("called vkGetPrivateData({device:?}, {object_type:?}, {object_handle:?}, {private_data_slot:?}, {p_data:?})");

    let mut packet = new_packet(1000001464);
    packet.write(device);
    packet.write(object_type);
    packet.write(object_handle);
    packet.write(private_data_slot);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBuffer2.html>"]
unsafe extern "system" fn vkCmdCopyBuffer2(
    command_buffer: NonDisposableHandle,
    p_copy_buffer_info: *const VkCopyBufferInfo2,
) -> c_void {
    trace!("called vkCmdCopyBuffer2({command_buffer:?}, {p_copy_buffer_info:?})");

    let mut packet = new_packet(1000001465);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_copy_buffer_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImage2.html>"]
unsafe extern "system" fn vkCmdCopyImage2(
    command_buffer: NonDisposableHandle,
    p_copy_image_info: *const VkCopyImageInfo2,
) -> c_void {
    trace!("called vkCmdCopyImage2({command_buffer:?}, {p_copy_image_info:?})");

    let mut packet = new_packet(1000001466);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_copy_image_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBlitImage2.html>"]
unsafe extern "system" fn vkCmdBlitImage2(
    command_buffer: NonDisposableHandle,
    p_blit_image_info: *const VkBlitImageInfo2,
) -> c_void {
    trace!("called vkCmdBlitImage2({command_buffer:?}, {p_blit_image_info:?})");

    let mut packet = new_packet(1000001467);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_blit_image_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyBufferToImage2.html>"]
unsafe extern "system" fn vkCmdCopyBufferToImage2(
    command_buffer: NonDisposableHandle,
    p_copy_buffer_to_image_info: *const VkCopyBufferToImageInfo2,
) -> c_void {
    trace!("called vkCmdCopyBufferToImage2({command_buffer:?}, {p_copy_buffer_to_image_info:?})");

    let mut packet = new_packet(1000001468);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_copy_buffer_to_image_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyImageToBuffer2.html>"]
unsafe extern "system" fn vkCmdCopyImageToBuffer2(
    command_buffer: NonDisposableHandle,
    p_copy_image_to_buffer_info: *const VkCopyImageToBufferInfo2,
) -> c_void {
    trace!("called vkCmdCopyImageToBuffer2({command_buffer:?}, {p_copy_image_to_buffer_info:?})");

    let mut packet = new_packet(1000001469);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_copy_image_to_buffer_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResolveImage2.html>"]
unsafe extern "system" fn vkCmdResolveImage2(
    command_buffer: NonDisposableHandle,
    p_resolve_image_info: *const VkResolveImageInfo2,
) -> c_void {
    trace!("called vkCmdResolveImage2({command_buffer:?}, {p_resolve_image_info:?})");

    let mut packet = new_packet(1000001470);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_resolve_image_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFragmentShadingRateKHR.html>"]
unsafe extern "system" fn vkCmdSetFragmentShadingRateKHR(
    command_buffer: NonDisposableHandle,
    p_fragment_size: *const VkExtent2D,
    combiner_ops: *const [NonDisposableHandle; 2],
) -> c_void {
    trace!("called vkCmdSetFragmentShadingRateKHR({command_buffer:?}, {p_fragment_size:?}, {combiner_ops:?})");

    let mut packet = new_packet(1000001471);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_fragment_size);
    packet.write_nullable_raw_ptr(combiner_ops);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceFragmentShadingRatesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceFragmentShadingRatesKHR(
    physical_device: NonDisposableHandle,
    p_fragment_shading_rate_count: *mut u32,
    p_fragment_shading_rates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceFragmentShadingRatesKHR({physical_device:?}, {p_fragment_shading_rate_count:?}, {p_fragment_shading_rates:?})");

    let mut packet = new_packet(1000001472);
    packet.write(physical_device);
    packet.write_vk_array_count(p_fragment_shading_rate_count, p_fragment_shading_rates);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_fragment_shading_rate_count, p_fragment_shading_rates);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetFragmentShadingRateEnumNV.html>"]
unsafe extern "system" fn vkCmdSetFragmentShadingRateEnumNV(
    command_buffer: NonDisposableHandle,
    shading_rate: NonDisposableHandle,
    combiner_ops: *const [NonDisposableHandle; 2],
) -> c_void {
    trace!("called vkCmdSetFragmentShadingRateEnumNV({command_buffer:?}, {shading_rate:?}, {combiner_ops:?})");

    let mut packet = new_packet(1000001473);
    packet.write(command_buffer);
    packet.write(shading_rate);
    packet.write_nullable_raw_ptr(combiner_ops);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureBuildSizesKHR.html>"]
unsafe extern "system" fn vkGetAccelerationStructureBuildSizesKHR(
    device: NonDisposableHandle,
    build_type: NonDisposableHandle,
    p_build_info: *const VkAccelerationStructureBuildGeometryInfoKHR,
    p_max_primitive_counts: *const u32,
    p_size_info: *mut VkAccelerationStructureBuildSizesInfoKHR,
) -> c_void {
    trace!("called vkGetAccelerationStructureBuildSizesKHR({device:?}, {build_type:?}, {p_build_info:?}, {p_max_primitive_counts:?}, {p_size_info:?})");

    let mut packet = new_packet(1000001474);
    packet.write(device);
    packet.write(build_type);
    packet.write_nullable_raw_ptr(p_build_info);
    packet.write_nullable_raw_ptr(p_max_primitive_counts);
    packet.write_nullable_raw_ptr_mut(p_size_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_size_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetVertexInputEXT.html>"]
unsafe extern "system" fn vkCmdSetVertexInputEXT(
    command_buffer: NonDisposableHandle,
    vertex_binding_description_count: u32,
    p_vertex_binding_descriptions: *const VkVertexInputBindingDescription2EXT,
    vertex_attribute_description_count: u32,
    p_vertex_attribute_descriptions: *const VkVertexInputAttributeDescription2EXT,
) -> c_void {
    trace!("called vkCmdSetVertexInputEXT({command_buffer:?}, {vertex_binding_description_count:?}, {p_vertex_binding_descriptions:?}, {vertex_attribute_description_count:?}, {p_vertex_attribute_descriptions:?})");

    let mut packet = new_packet(1000001475);
    packet.write(command_buffer);
    packet.write(vertex_binding_description_count);
    packet.write_nullable_raw_ptr(p_vertex_binding_descriptions);
    packet.write(vertex_attribute_description_count);
    packet.write_nullable_raw_ptr(p_vertex_attribute_descriptions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteEnableEXT.html>"]
unsafe extern "system" fn vkCmdSetColorWriteEnableEXT(
    command_buffer: NonDisposableHandle,
    attachment_count: u32,
    p_color_write_enables: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetColorWriteEnableEXT({command_buffer:?}, {attachment_count:?}, {p_color_write_enables:?})");

    let mut packet = new_packet(1000001476);
    packet.write(command_buffer);
    packet.write(attachment_count);
    packet.write_nullable_raw_ptr(p_color_write_enables);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetEvent2.html>"]
unsafe extern "system" fn vkCmdSetEvent2(
    command_buffer: NonDisposableHandle,
    event: NonDisposableHandle,
    p_dependency_info: *const VkDependencyInfo,
) -> c_void {
    trace!("called vkCmdSetEvent2({command_buffer:?}, {event:?}, {p_dependency_info:?})");

    let mut packet = new_packet(1000001477);
    packet.write(command_buffer);
    packet.write(event);
    packet.write_nullable_raw_ptr(p_dependency_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdResetEvent2.html>"]
unsafe extern "system" fn vkCmdResetEvent2(
    command_buffer: NonDisposableHandle,
    event: NonDisposableHandle,
    stage_mask: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdResetEvent2({command_buffer:?}, {event:?}, {stage_mask:?})");

    let mut packet = new_packet(1000001478);
    packet.write(command_buffer);
    packet.write(event);
    packet.write(stage_mask);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWaitEvents2.html>"]
unsafe extern "system" fn vkCmdWaitEvents2(
    command_buffer: NonDisposableHandle,
    event_count: u32,
    p_events: *const NonDisposableHandle,
    p_dependency_infos: *const VkDependencyInfo,
) -> c_void {
    trace!("called vkCmdWaitEvents2({command_buffer:?}, {event_count:?}, {p_events:?}, {p_dependency_infos:?})");

    let mut packet = new_packet(1000001479);
    packet.write(command_buffer);
    packet.write(event_count);
    packet.write_nullable_raw_ptr(p_events);
    packet.write_nullable_raw_ptr(p_dependency_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPipelineBarrier2.html>"]
unsafe extern "system" fn vkCmdPipelineBarrier2(
    command_buffer: NonDisposableHandle,
    p_dependency_info: *const VkDependencyInfo,
) -> c_void {
    trace!("called vkCmdPipelineBarrier2({command_buffer:?}, {p_dependency_info:?})");

    let mut packet = new_packet(1000001480);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_dependency_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueSubmit2.html>"]
unsafe extern "system" fn vkQueueSubmit2(
    queue: NonDisposableHandle,
    submit_count: u32,
    p_submits: *const VkSubmitInfo2,
    fence: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkQueueSubmit2({queue:?}, {submit_count:?}, {p_submits:?}, {fence:?})");

    let mut packet = new_packet(1000001481);
    packet.write(queue);
    packet.write(submit_count);
    packet.write_nullable_raw_ptr(p_submits);
    packet.write(fence);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteTimestamp2.html>"]
unsafe extern "system" fn vkCmdWriteTimestamp2(
    command_buffer: NonDisposableHandle,
    stage: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    query: u32,
) -> c_void {
    trace!("called vkCmdWriteTimestamp2({command_buffer:?}, {stage:?}, {query_pool:?}, {query:?})");

    let mut packet = new_packet(1000001482);
    packet.write(command_buffer);
    packet.write(stage);
    packet.write(query_pool);
    packet.write(query);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteBufferMarker2AMD.html>"]
unsafe extern "system" fn vkCmdWriteBufferMarker2AMD(
    command_buffer: NonDisposableHandle,
    stage: NonDisposableHandle,
    dst_buffer: NonDisposableHandle,
    dst_offset: NonDisposableHandle,
    marker: u32,
) -> c_void {
    trace!("called vkCmdWriteBufferMarker2AMD({command_buffer:?}, {stage:?}, {dst_buffer:?}, {dst_offset:?}, {marker:?})");

    let mut packet = new_packet(1000001483);
    packet.write(command_buffer);
    packet.write(stage);
    packet.write(dst_buffer);
    packet.write(dst_offset);
    packet.write(marker);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetQueueCheckpointData2NV.html>"]
unsafe extern "system" fn vkGetQueueCheckpointData2NV(
    queue: NonDisposableHandle,
    p_checkpoint_data_count: *mut u32,
    p_checkpoint_data: *mut VkCheckpointData2NV,
) -> c_void {
    trace!("called vkGetQueueCheckpointData2NV({queue:?}, {p_checkpoint_data_count:?}, {p_checkpoint_data:?})");

    let mut packet = new_packet(1000001484);
    packet.write(queue);
    packet.write_vk_array_count(p_checkpoint_data_count, p_checkpoint_data);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_checkpoint_data_count, p_checkpoint_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToImageEXT.html>"]
unsafe extern "system" fn vkCopyMemoryToImageEXT(
    device: NonDisposableHandle,
    p_copy_memory_to_image_info: *const VkCopyMemoryToImageInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkCopyMemoryToImageEXT({device:?}, {p_copy_memory_to_image_info:?})");

    let mut packet = new_packet(1000001485);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_copy_memory_to_image_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyImageToMemoryEXT.html>"]
unsafe extern "system" fn vkCopyImageToMemoryEXT(
    device: NonDisposableHandle,
    p_copy_image_to_memory_info: *const VkCopyImageToMemoryInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkCopyImageToMemoryEXT({device:?}, {p_copy_image_to_memory_info:?})");

    let mut packet = new_packet(1000001486);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_copy_image_to_memory_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyImageToImageEXT.html>"]
unsafe extern "system" fn vkCopyImageToImageEXT(
    device: NonDisposableHandle,
    p_copy_image_to_image_info: *const VkCopyImageToImageInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkCopyImageToImageEXT({device:?}, {p_copy_image_to_image_info:?})");

    let mut packet = new_packet(1000001487);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_copy_image_to_image_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkTransitionImageLayoutEXT.html>"]
unsafe extern "system" fn vkTransitionImageLayoutEXT(
    device: NonDisposableHandle,
    transition_count: u32,
    p_transitions: *const VkHostImageLayoutTransitionInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkTransitionImageLayoutEXT({device:?}, {transition_count:?}, {p_transitions:?})");

    let mut packet = new_packet(1000001488);
    packet.write(device);
    packet.write(transition_count);
    packet.write_nullable_raw_ptr(p_transitions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoCapabilitiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceVideoCapabilitiesKHR(
    physical_device: NonDisposableHandle,
    p_video_profile: *const VkVideoProfileInfoKHR,
    p_capabilities: *mut VkVideoCapabilitiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceVideoCapabilitiesKHR({physical_device:?}, {p_video_profile:?}, {p_capabilities:?})");

    let mut packet = new_packet(1000001489);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_video_profile);
    packet.write_nullable_raw_ptr_mut(p_capabilities);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_capabilities);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoFormatPropertiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(
    physical_device: NonDisposableHandle,
    p_video_format_info: *const VkPhysicalDeviceVideoFormatInfoKHR,
    p_video_format_property_count: *mut u32,
    p_video_format_properties: *mut VkVideoFormatPropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceVideoFormatPropertiesKHR({physical_device:?}, {p_video_format_info:?}, {p_video_format_property_count:?}, {p_video_format_properties:?})");

    let mut packet = new_packet(1000001490);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_video_format_info);
    packet.write_vk_array_count(p_video_format_property_count, p_video_format_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_video_format_property_count, p_video_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
    physical_device: NonDisposableHandle,
    p_quality_level_info: *const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
    p_quality_level_properties: *mut VkVideoEncodeQualityLevelPropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR({physical_device:?}, {p_quality_level_info:?}, {p_quality_level_properties:?})");

    let mut packet = new_packet(1000001491);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_quality_level_info);
    packet.write_nullable_raw_ptr_mut(p_quality_level_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_quality_level_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateVideoSessionKHR.html>"]
unsafe extern "system" fn vkCreateVideoSessionKHR(
    device: NonDisposableHandle,
    p_create_info: *const VkVideoSessionCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_video_session: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateVideoSessionKHR({device:?}, {p_create_info:?}, {p_allocator:?}, {p_video_session:?})");

    let mut packet = new_packet(1000001492);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_video_session);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_video_session);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyVideoSessionKHR.html>"]
unsafe extern "system" fn vkDestroyVideoSessionKHR(
    device: NonDisposableHandle,
    video_session: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyVideoSessionKHR({device:?}, {video_session:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001493);
    packet.write(device);
    packet.write(video_session);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateVideoSessionParametersKHR.html>"]
unsafe extern "system" fn vkCreateVideoSessionParametersKHR(
    device: NonDisposableHandle,
    p_create_info: *const VkVideoSessionParametersCreateInfoKHR,
    p_allocator: *const VkAllocationCallbacks,
    p_video_session_parameters: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateVideoSessionParametersKHR({device:?}, {p_create_info:?}, {p_allocator:?}, {p_video_session_parameters:?})");

    let mut packet = new_packet(1000001494);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_video_session_parameters);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_video_session_parameters);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUpdateVideoSessionParametersKHR.html>"]
unsafe extern "system" fn vkUpdateVideoSessionParametersKHR(
    device: NonDisposableHandle,
    video_session_parameters: NonDisposableHandle,
    p_update_info: *const VkVideoSessionParametersUpdateInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkUpdateVideoSessionParametersKHR({device:?}, {video_session_parameters:?}, {p_update_info:?})");

    let mut packet = new_packet(1000001495);
    packet.write(device);
    packet.write(video_session_parameters);
    packet.write_nullable_raw_ptr(p_update_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetEncodedVideoSessionParametersKHR.html>"]
unsafe extern "system" fn vkGetEncodedVideoSessionParametersKHR(
    device: NonDisposableHandle,
    p_video_session_parameters_info: *const VkVideoEncodeSessionParametersGetInfoKHR,
    p_feedback_info: *mut VkVideoEncodeSessionParametersFeedbackInfoKHR,
    p_data_size: *mut usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetEncodedVideoSessionParametersKHR({device:?}, {p_video_session_parameters_info:?}, {p_feedback_info:?}, {p_data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001496);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_video_session_parameters_info);
    packet.write_nullable_raw_ptr_mut(p_feedback_info);
    packet.write_nullable_raw_ptr_mut(p_data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_feedback_info);
    response.read_to_raw_ptr(p_data_size);
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyVideoSessionParametersKHR.html>"]
unsafe extern "system" fn vkDestroyVideoSessionParametersKHR(
    device: NonDisposableHandle,
    video_session_parameters: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyVideoSessionParametersKHR({device:?}, {video_session_parameters:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001497);
    packet.write(device);
    packet.write(video_session_parameters);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetVideoSessionMemoryRequirementsKHR.html>"]
unsafe extern "system" fn vkGetVideoSessionMemoryRequirementsKHR(
    device: NonDisposableHandle,
    video_session: NonDisposableHandle,
    p_memory_requirements_count: *mut u32,
    p_memory_requirements: *mut VkVideoSessionMemoryRequirementsKHR,
) -> NonDisposableHandle {
    trace!("called vkGetVideoSessionMemoryRequirementsKHR({device:?}, {video_session:?}, {p_memory_requirements_count:?}, {p_memory_requirements:?})");

    let mut packet = new_packet(1000001498);
    packet.write(device);
    packet.write(video_session);
    packet.write_vk_array_count(p_memory_requirements_count, p_memory_requirements);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_memory_requirements_count, p_memory_requirements);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindVideoSessionMemoryKHR.html>"]
unsafe extern "system" fn vkBindVideoSessionMemoryKHR(
    device: NonDisposableHandle,
    video_session: NonDisposableHandle,
    bind_session_memory_info_count: u32,
    p_bind_session_memory_infos: *const VkBindVideoSessionMemoryInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkBindVideoSessionMemoryKHR({device:?}, {video_session:?}, {bind_session_memory_info_count:?}, {p_bind_session_memory_infos:?})");

    let mut packet = new_packet(1000001499);
    packet.write(device);
    packet.write(video_session);
    packet.write(bind_session_memory_info_count);
    packet.write_nullable_raw_ptr(p_bind_session_memory_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecodeVideoKHR.html>"]
unsafe extern "system" fn vkCmdDecodeVideoKHR(
    command_buffer: NonDisposableHandle,
    p_decode_info: *const VkVideoDecodeInfoKHR,
) -> c_void {
    trace!("called vkCmdDecodeVideoKHR({command_buffer:?}, {p_decode_info:?})");

    let mut packet = new_packet(1000001500);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_decode_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginVideoCodingKHR.html>"]
unsafe extern "system" fn vkCmdBeginVideoCodingKHR(
    command_buffer: NonDisposableHandle,
    p_begin_info: *const VkVideoBeginCodingInfoKHR,
) -> c_void {
    trace!("called vkCmdBeginVideoCodingKHR({command_buffer:?}, {p_begin_info:?})");

    let mut packet = new_packet(1000001501);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_begin_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdControlVideoCodingKHR.html>"]
unsafe extern "system" fn vkCmdControlVideoCodingKHR(
    command_buffer: NonDisposableHandle,
    p_coding_control_info: *const VkVideoCodingControlInfoKHR,
) -> c_void {
    trace!("called vkCmdControlVideoCodingKHR({command_buffer:?}, {p_coding_control_info:?})");

    let mut packet = new_packet(1000001502);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_coding_control_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndVideoCodingKHR.html>"]
unsafe extern "system" fn vkCmdEndVideoCodingKHR(
    command_buffer: NonDisposableHandle,
    p_end_coding_info: *const VkVideoEndCodingInfoKHR,
) -> c_void {
    trace!("called vkCmdEndVideoCodingKHR({command_buffer:?}, {p_end_coding_info:?})");

    let mut packet = new_packet(1000001503);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_end_coding_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEncodeVideoKHR.html>"]
unsafe extern "system" fn vkCmdEncodeVideoKHR(
    command_buffer: NonDisposableHandle,
    p_encode_info: *const VkVideoEncodeInfoKHR,
) -> c_void {
    trace!("called vkCmdEncodeVideoKHR({command_buffer:?}, {p_encode_info:?})");

    let mut packet = new_packet(1000001504);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_encode_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecompressMemoryNV.html>"]
unsafe extern "system" fn vkCmdDecompressMemoryNV(
    command_buffer: NonDisposableHandle,
    decompress_region_count: u32,
    p_decompress_memory_regions: *const VkDecompressMemoryRegionNV,
) -> c_void {
    trace!("called vkCmdDecompressMemoryNV({command_buffer:?}, {decompress_region_count:?}, {p_decompress_memory_regions:?})");

    let mut packet = new_packet(1000001505);
    packet.write(command_buffer);
    packet.write(decompress_region_count);
    packet.write_nullable_raw_ptr(p_decompress_memory_regions);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDecompressMemoryIndirectCountNV.html>"]
unsafe extern "system" fn vkCmdDecompressMemoryIndirectCountNV(
    command_buffer: NonDisposableHandle,
    indirect_commands_address: NonDisposableHandle,
    indirect_commands_count_address: NonDisposableHandle,
    stride: u32,
) -> c_void {
    trace!("called vkCmdDecompressMemoryIndirectCountNV({command_buffer:?}, {indirect_commands_address:?}, {indirect_commands_count_address:?}, {stride:?})");

    let mut packet = new_packet(1000001506);
    packet.write(command_buffer);
    packet.write(indirect_commands_address);
    packet.write(indirect_commands_count_address);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCuModuleNVX.html>"]
unsafe extern "system" fn vkCreateCuModuleNVX(
    device: NonDisposableHandle,
    p_create_info: *const VkCuModuleCreateInfoNVX,
    p_allocator: *const VkAllocationCallbacks,
    p_module: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateCuModuleNVX({device:?}, {p_create_info:?}, {p_allocator:?}, {p_module:?})");

    let mut packet = new_packet(1000001507);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_module);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_module);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCuFunctionNVX.html>"]
unsafe extern "system" fn vkCreateCuFunctionNVX(
    device: NonDisposableHandle,
    p_create_info: *const VkCuFunctionCreateInfoNVX,
    p_allocator: *const VkAllocationCallbacks,
    p_function: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateCuFunctionNVX({device:?}, {p_create_info:?}, {p_allocator:?}, {p_function:?})");

    let mut packet = new_packet(1000001508);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_function);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_function);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCuModuleNVX.html>"]
unsafe extern "system" fn vkDestroyCuModuleNVX(
    device: NonDisposableHandle,
    module: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyCuModuleNVX({device:?}, {module:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001509);
    packet.write(device);
    packet.write(module);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCuFunctionNVX.html>"]
unsafe extern "system" fn vkDestroyCuFunctionNVX(
    device: NonDisposableHandle,
    function: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyCuFunctionNVX({device:?}, {function:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001510);
    packet.write(device);
    packet.write(function);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCuLaunchKernelNVX.html>"]
unsafe extern "system" fn vkCmdCuLaunchKernelNVX(
    command_buffer: NonDisposableHandle,
    p_launch_info: *const VkCuLaunchInfoNVX,
) -> c_void {
    trace!("called vkCmdCuLaunchKernelNVX({command_buffer:?}, {p_launch_info:?})");

    let mut packet = new_packet(1000001511);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_launch_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutSizeEXT.html>"]
unsafe extern "system" fn vkGetDescriptorSetLayoutSizeEXT(
    device: NonDisposableHandle,
    layout: NonDisposableHandle,
    p_layout_size_in_bytes: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDescriptorSetLayoutSizeEXT({device:?}, {layout:?}, {p_layout_size_in_bytes:?})");

    let mut packet = new_packet(1000001512);
    packet.write(device);
    packet.write(layout);
    packet.write_nullable_raw_ptr_mut(p_layout_size_in_bytes);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_layout_size_in_bytes);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutBindingOffsetEXT.html>"]
unsafe extern "system" fn vkGetDescriptorSetLayoutBindingOffsetEXT(
    device: NonDisposableHandle,
    layout: NonDisposableHandle,
    binding: u32,
    p_offset: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDescriptorSetLayoutBindingOffsetEXT({device:?}, {layout:?}, {binding:?}, {p_offset:?})");

    let mut packet = new_packet(1000001513);
    packet.write(device);
    packet.write(layout);
    packet.write(binding);
    packet.write_nullable_raw_ptr_mut(p_offset);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_offset);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorEXT.html>"]
unsafe extern "system" fn vkGetDescriptorEXT(
    device: NonDisposableHandle,
    p_descriptor_info: *const VkDescriptorGetInfoEXT,
    data_size: usize,
    p_descriptor: *mut c_void,
) -> c_void {
    trace!("called vkGetDescriptorEXT({device:?}, {p_descriptor_info:?}, {data_size:?}, {p_descriptor:?})");

    let mut packet = new_packet(1000001514);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_descriptor_info);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_descriptor);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_descriptor);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBuffersEXT.html>"]
unsafe extern "system" fn vkCmdBindDescriptorBuffersEXT(
    command_buffer: NonDisposableHandle,
    buffer_count: u32,
    p_binding_infos: *const VkDescriptorBufferBindingInfoEXT,
) -> c_void {
    trace!("called vkCmdBindDescriptorBuffersEXT({command_buffer:?}, {buffer_count:?}, {p_binding_infos:?})");

    let mut packet = new_packet(1000001515);
    packet.write(command_buffer);
    packet.write(buffer_count);
    packet.write_nullable_raw_ptr(p_binding_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDescriptorBufferOffsetsEXT.html>"]
unsafe extern "system" fn vkCmdSetDescriptorBufferOffsetsEXT(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    layout: NonDisposableHandle,
    first_set: u32,
    set_count: u32,
    p_buffer_indices: *const u32,
    p_offsets: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdSetDescriptorBufferOffsetsEXT({command_buffer:?}, {pipeline_bind_point:?}, {layout:?}, {first_set:?}, {set_count:?}, {p_buffer_indices:?}, {p_offsets:?})");

    let mut packet = new_packet(1000001516);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(layout);
    packet.write(first_set);
    packet.write(set_count);
    packet.write_nullable_raw_ptr(p_buffer_indices);
    packet.write_nullable_raw_ptr(p_offsets);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBufferEmbeddedSamplersEXT.html>"]
unsafe extern "system" fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
    command_buffer: NonDisposableHandle,
    pipeline_bind_point: NonDisposableHandle,
    layout: NonDisposableHandle,
    set: u32,
) -> c_void {
    trace!("called vkCmdBindDescriptorBufferEmbeddedSamplersEXT({command_buffer:?}, {pipeline_bind_point:?}, {layout:?}, {set:?})");

    let mut packet = new_packet(1000001517);
    packet.write(command_buffer);
    packet.write(pipeline_bind_point);
    packet.write(layout);
    packet.write(set);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferOpaqueCaptureDescriptorDataEXT.html>"]
unsafe extern "system" fn vkGetBufferOpaqueCaptureDescriptorDataEXT(
    device: NonDisposableHandle,
    p_info: *const VkBufferCaptureDescriptorDataInfoEXT,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetBufferOpaqueCaptureDescriptorDataEXT({device:?}, {p_info:?}, {p_data:?})");

    let mut packet = new_packet(1000001518);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageOpaqueCaptureDescriptorDataEXT.html>"]
unsafe extern "system" fn vkGetImageOpaqueCaptureDescriptorDataEXT(
    device: NonDisposableHandle,
    p_info: *const VkImageCaptureDescriptorDataInfoEXT,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetImageOpaqueCaptureDescriptorDataEXT({device:?}, {p_info:?}, {p_data:?})");

    let mut packet = new_packet(1000001519);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageViewOpaqueCaptureDescriptorDataEXT.html>"]
unsafe extern "system" fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(
    device: NonDisposableHandle,
    p_info: *const VkImageViewCaptureDescriptorDataInfoEXT,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetImageViewOpaqueCaptureDescriptorDataEXT({device:?}, {p_info:?}, {p_data:?})");

    let mut packet = new_packet(1000001520);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetSamplerOpaqueCaptureDescriptorDataEXT.html>"]
unsafe extern "system" fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(
    device: NonDisposableHandle,
    p_info: *const VkSamplerCaptureDescriptorDataInfoEXT,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetSamplerOpaqueCaptureDescriptorDataEXT({device:?}, {p_info:?}, {p_data:?})");

    let mut packet = new_packet(1000001521);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.html>"]
unsafe extern "system" fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
    device: NonDisposableHandle,
    p_info: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT({device:?}, {p_info:?}, {p_data:?})");

    let mut packet = new_packet(1000001522);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetDeviceMemoryPriorityEXT.html>"]
unsafe extern "system" fn vkSetDeviceMemoryPriorityEXT(
    device: NonDisposableHandle,
    memory: NonDisposableHandle,
    priority: f32,
) -> c_void {
    trace!("called vkSetDeviceMemoryPriorityEXT({device:?}, {memory:?}, {priority:?})");

    let mut packet = new_packet(1000001523);
    packet.write(device);
    packet.write(memory);
    packet.write(priority);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkAcquireDrmDisplayEXT.html>"]
unsafe extern "system" fn vkAcquireDrmDisplayEXT(
    physical_device: NonDisposableHandle,
    drm_fd: i32,
    display: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkAcquireDrmDisplayEXT({physical_device:?}, {drm_fd:?}, {display:?})");

    let mut packet = new_packet(1000001524);
    packet.write(physical_device);
    packet.write(drm_fd);
    packet.write(display);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDrmDisplayEXT.html>"]
unsafe extern "system" fn vkGetDrmDisplayEXT(
    physical_device: NonDisposableHandle,
    drm_fd: i32,
    connector_id: u32,
    display: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkGetDrmDisplayEXT({physical_device:?}, {drm_fd:?}, {connector_id:?}, {display:?})");

    let mut packet = new_packet(1000001525);
    packet.write(physical_device);
    packet.write(drm_fd);
    packet.write(connector_id);
    packet.write_nullable_raw_ptr_mut(display);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(display);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWaitForPresentKHR.html>"]
unsafe extern "system" fn vkWaitForPresentKHR(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    present_id: u64,
    timeout: u64,
) -> NonDisposableHandle {
    trace!("called vkWaitForPresentKHR({device:?}, {swapchain:?}, {present_id:?}, {timeout:?})");

    let mut packet = new_packet(1000001526);
    packet.write(device);
    packet.write(swapchain);
    packet.write(present_id);
    packet.write(timeout);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateBufferCollectionFUCHSIA.html>"]
unsafe extern "system" fn vkCreateBufferCollectionFUCHSIA(
    device: NonDisposableHandle,
    p_create_info: *const VkBufferCollectionCreateInfoFUCHSIA,
    p_allocator: *const VkAllocationCallbacks,
    p_collection: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateBufferCollectionFUCHSIA({device:?}, {p_create_info:?}, {p_allocator:?}, {p_collection:?})");

    let mut packet = new_packet(1000001527);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_collection);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_collection);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetBufferCollectionBufferConstraintsFUCHSIA.html>"]
unsafe extern "system" fn vkSetBufferCollectionBufferConstraintsFUCHSIA(
    device: NonDisposableHandle,
    collection: NonDisposableHandle,
    p_buffer_constraints_info: *const VkBufferConstraintsInfoFUCHSIA,
) -> NonDisposableHandle {
    trace!("called vkSetBufferCollectionBufferConstraintsFUCHSIA({device:?}, {collection:?}, {p_buffer_constraints_info:?})");

    let mut packet = new_packet(1000001528);
    packet.write(device);
    packet.write(collection);
    packet.write_nullable_raw_ptr(p_buffer_constraints_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetBufferCollectionImageConstraintsFUCHSIA.html>"]
unsafe extern "system" fn vkSetBufferCollectionImageConstraintsFUCHSIA(
    device: NonDisposableHandle,
    collection: NonDisposableHandle,
    p_image_constraints_info: *const VkImageConstraintsInfoFUCHSIA,
) -> NonDisposableHandle {
    trace!("called vkSetBufferCollectionImageConstraintsFUCHSIA({device:?}, {collection:?}, {p_image_constraints_info:?})");

    let mut packet = new_packet(1000001529);
    packet.write(device);
    packet.write(collection);
    packet.write_nullable_raw_ptr(p_image_constraints_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyBufferCollectionFUCHSIA.html>"]
unsafe extern "system" fn vkDestroyBufferCollectionFUCHSIA(
    device: NonDisposableHandle,
    collection: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyBufferCollectionFUCHSIA({device:?}, {collection:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001530);
    packet.write(device);
    packet.write(collection);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetBufferCollectionPropertiesFUCHSIA.html>"]
unsafe extern "system" fn vkGetBufferCollectionPropertiesFUCHSIA(
    device: NonDisposableHandle,
    collection: NonDisposableHandle,
    p_properties: *mut VkBufferCollectionPropertiesFUCHSIA,
) -> NonDisposableHandle {
    trace!("called vkGetBufferCollectionPropertiesFUCHSIA({device:?}, {collection:?}, {p_properties:?})");

    let mut packet = new_packet(1000001531);
    packet.write(device);
    packet.write(collection);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCudaModuleNV.html>"]
unsafe extern "system" fn vkCreateCudaModuleNV(
    device: NonDisposableHandle,
    p_create_info: *const VkCudaModuleCreateInfoNV,
    p_allocator: *const VkAllocationCallbacks,
    p_module: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateCudaModuleNV({device:?}, {p_create_info:?}, {p_allocator:?}, {p_module:?})");

    let mut packet = new_packet(1000001532);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_module);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_module);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetCudaModuleCacheNV.html>"]
unsafe extern "system" fn vkGetCudaModuleCacheNV(
    device: NonDisposableHandle,
    module: NonDisposableHandle,
    p_cache_size: *mut usize,
    p_cache_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetCudaModuleCacheNV({device:?}, {module:?}, {p_cache_size:?}, {p_cache_data:?})");

    let mut packet = new_packet(1000001533);
    packet.write(device);
    packet.write(module);
    packet.write_nullable_raw_ptr_mut(p_cache_size);
    packet.write_nullable_raw_ptr_mut(p_cache_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_cache_size);
    response.read_to_raw_ptr(p_cache_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateCudaFunctionNV.html>"]
unsafe extern "system" fn vkCreateCudaFunctionNV(
    device: NonDisposableHandle,
    p_create_info: *const VkCudaFunctionCreateInfoNV,
    p_allocator: *const VkAllocationCallbacks,
    p_function: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateCudaFunctionNV({device:?}, {p_create_info:?}, {p_allocator:?}, {p_function:?})");

    let mut packet = new_packet(1000001534);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_function);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_function);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCudaModuleNV.html>"]
unsafe extern "system" fn vkDestroyCudaModuleNV(
    device: NonDisposableHandle,
    module: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyCudaModuleNV({device:?}, {module:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001535);
    packet.write(device);
    packet.write(module);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyCudaFunctionNV.html>"]
unsafe extern "system" fn vkDestroyCudaFunctionNV(
    device: NonDisposableHandle,
    function: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyCudaFunctionNV({device:?}, {function:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001536);
    packet.write(device);
    packet.write(function);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCudaLaunchKernelNV.html>"]
unsafe extern "system" fn vkCmdCudaLaunchKernelNV(
    command_buffer: NonDisposableHandle,
    p_launch_info: *const VkCudaLaunchInfoNV,
) -> c_void {
    trace!("called vkCmdCudaLaunchKernelNV({command_buffer:?}, {p_launch_info:?})");

    let mut packet = new_packet(1000001537);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_launch_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRendering.html>"]
unsafe extern "system" fn vkCmdBeginRendering(
    command_buffer: NonDisposableHandle,
    p_rendering_info: *const VkRenderingInfo,
) -> c_void {
    trace!("called vkCmdBeginRendering({command_buffer:?}, {p_rendering_info:?})");

    let mut packet = new_packet(1000001538);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_rendering_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdEndRendering.html>"]
unsafe extern "system" fn vkCmdEndRendering(
    command_buffer: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdEndRendering({command_buffer:?})");

    let mut packet = new_packet(1000001539);
    packet.write(command_buffer);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutHostMappingInfoVALVE.html>"]
unsafe extern "system" fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(
    device: NonDisposableHandle,
    p_binding_reference: *const VkDescriptorSetBindingReferenceVALVE,
    p_host_mapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
) -> c_void {
    trace!("called vkGetDescriptorSetLayoutHostMappingInfoVALVE({device:?}, {p_binding_reference:?}, {p_host_mapping:?})");

    let mut packet = new_packet(1000001540);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_binding_reference);
    packet.write_nullable_raw_ptr_mut(p_host_mapping);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_host_mapping);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetHostMappingVALVE.html>"]
unsafe extern "system" fn vkGetDescriptorSetHostMappingVALVE(
    device: NonDisposableHandle,
    descriptor_set: NonDisposableHandle,
    pp_data: *mut *mut c_void,
) -> c_void {
    trace!("called vkGetDescriptorSetHostMappingVALVE({device:?}, {descriptor_set:?}, {pp_data:?})");

    let mut packet = new_packet(1000001541);
    packet.write(device);
    packet.write(descriptor_set);
    packet.write_nullable_raw_ptr_mut(pp_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(pp_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateMicromapEXT.html>"]
unsafe extern "system" fn vkCreateMicromapEXT(
    device: NonDisposableHandle,
    p_create_info: *const VkMicromapCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_micromap: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateMicromapEXT({device:?}, {p_create_info:?}, {p_allocator:?}, {p_micromap:?})");

    let mut packet = new_packet(1000001542);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_micromap);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_micromap);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBuildMicromapsEXT.html>"]
unsafe extern "system" fn vkCmdBuildMicromapsEXT(
    command_buffer: NonDisposableHandle,
    info_count: u32,
    p_infos: *const VkMicromapBuildInfoEXT,
) -> c_void {
    trace!("called vkCmdBuildMicromapsEXT({command_buffer:?}, {info_count:?}, {p_infos:?})");

    let mut packet = new_packet(1000001543);
    packet.write(command_buffer);
    packet.write(info_count);
    packet.write_nullable_raw_ptr(p_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBuildMicromapsEXT.html>"]
unsafe extern "system" fn vkBuildMicromapsEXT(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    info_count: u32,
    p_infos: *const VkMicromapBuildInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkBuildMicromapsEXT({device:?}, {deferred_operation:?}, {info_count:?}, {p_infos:?})");

    let mut packet = new_packet(1000001544);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write(info_count);
    packet.write_nullable_raw_ptr(p_infos);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyMicromapEXT.html>"]
unsafe extern "system" fn vkDestroyMicromapEXT(
    device: NonDisposableHandle,
    micromap: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyMicromapEXT({device:?}, {micromap:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001545);
    packet.write(device);
    packet.write(micromap);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMicromapEXT.html>"]
unsafe extern "system" fn vkCmdCopyMicromapEXT(
    command_buffer: NonDisposableHandle,
    p_info: *const VkCopyMicromapInfoEXT,
) -> c_void {
    trace!("called vkCmdCopyMicromapEXT({command_buffer:?}, {p_info:?})");

    let mut packet = new_packet(1000001546);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMicromapEXT.html>"]
unsafe extern "system" fn vkCopyMicromapEXT(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    p_info: *const VkCopyMicromapInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkCopyMicromapEXT({device:?}, {deferred_operation:?}, {p_info:?})");

    let mut packet = new_packet(1000001547);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMicromapToMemoryEXT.html>"]
unsafe extern "system" fn vkCmdCopyMicromapToMemoryEXT(
    command_buffer: NonDisposableHandle,
    p_info: *const VkCopyMicromapToMemoryInfoEXT,
) -> c_void {
    trace!("called vkCmdCopyMicromapToMemoryEXT({command_buffer:?}, {p_info:?})");

    let mut packet = new_packet(1000001548);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMicromapToMemoryEXT.html>"]
unsafe extern "system" fn vkCopyMicromapToMemoryEXT(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    p_info: *const VkCopyMicromapToMemoryInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkCopyMicromapToMemoryEXT({device:?}, {deferred_operation:?}, {p_info:?})");

    let mut packet = new_packet(1000001549);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdCopyMemoryToMicromapEXT.html>"]
unsafe extern "system" fn vkCmdCopyMemoryToMicromapEXT(
    command_buffer: NonDisposableHandle,
    p_info: *const VkCopyMemoryToMicromapInfoEXT,
) -> c_void {
    trace!("called vkCmdCopyMemoryToMicromapEXT({command_buffer:?}, {p_info:?})");

    let mut packet = new_packet(1000001550);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCopyMemoryToMicromapEXT.html>"]
unsafe extern "system" fn vkCopyMemoryToMicromapEXT(
    device: NonDisposableHandle,
    deferred_operation: NonDisposableHandle,
    p_info: *const VkCopyMemoryToMicromapInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkCopyMemoryToMicromapEXT({device:?}, {deferred_operation:?}, {p_info:?})");

    let mut packet = new_packet(1000001551);
    packet.write(device);
    packet.write(deferred_operation);
    packet.write_nullable_raw_ptr(p_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdWriteMicromapsPropertiesEXT.html>"]
unsafe extern "system" fn vkCmdWriteMicromapsPropertiesEXT(
    command_buffer: NonDisposableHandle,
    micromap_count: u32,
    p_micromaps: *const NonDisposableHandle,
    query_type: NonDisposableHandle,
    query_pool: NonDisposableHandle,
    first_query: u32,
) -> c_void {
    trace!("called vkCmdWriteMicromapsPropertiesEXT({command_buffer:?}, {micromap_count:?}, {p_micromaps:?}, {query_type:?}, {query_pool:?}, {first_query:?})");

    let mut packet = new_packet(1000001552);
    packet.write(command_buffer);
    packet.write(micromap_count);
    packet.write_nullable_raw_ptr(p_micromaps);
    packet.write(query_type);
    packet.write(query_pool);
    packet.write(first_query);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkWriteMicromapsPropertiesEXT.html>"]
unsafe extern "system" fn vkWriteMicromapsPropertiesEXT(
    device: NonDisposableHandle,
    micromap_count: u32,
    p_micromaps: *const NonDisposableHandle,
    query_type: NonDisposableHandle,
    data_size: usize,
    p_data: *mut c_void,
    stride: usize,
) -> NonDisposableHandle {
    trace!("called vkWriteMicromapsPropertiesEXT({device:?}, {micromap_count:?}, {p_micromaps:?}, {query_type:?}, {data_size:?}, {p_data:?}, {stride:?})");

    let mut packet = new_packet(1000001553);
    packet.write(device);
    packet.write(micromap_count);
    packet.write_nullable_raw_ptr(p_micromaps);
    packet.write(query_type);
    packet.write(data_size);
    packet.write_nullable_raw_ptr_mut(p_data);
    packet.write(stride);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceMicromapCompatibilityEXT.html>"]
unsafe extern "system" fn vkGetDeviceMicromapCompatibilityEXT(
    device: NonDisposableHandle,
    p_version_info: *const VkMicromapVersionInfoEXT,
    p_compatibility: *mut NonDisposableHandle,
) -> c_void {
    trace!("called vkGetDeviceMicromapCompatibilityEXT({device:?}, {p_version_info:?}, {p_compatibility:?})");

    let mut packet = new_packet(1000001554);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_version_info);
    packet.write_nullable_raw_ptr_mut(p_compatibility);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_compatibility);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetMicromapBuildSizesEXT.html>"]
unsafe extern "system" fn vkGetMicromapBuildSizesEXT(
    device: NonDisposableHandle,
    build_type: NonDisposableHandle,
    p_build_info: *const VkMicromapBuildInfoEXT,
    p_size_info: *mut VkMicromapBuildSizesInfoEXT,
) -> c_void {
    trace!("called vkGetMicromapBuildSizesEXT({device:?}, {build_type:?}, {p_build_info:?}, {p_size_info:?})");

    let mut packet = new_packet(1000001555);
    packet.write(device);
    packet.write(build_type);
    packet.write_nullable_raw_ptr(p_build_info);
    packet.write_nullable_raw_ptr_mut(p_size_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_size_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderModuleIdentifierEXT.html>"]
unsafe extern "system" fn vkGetShaderModuleIdentifierEXT(
    device: NonDisposableHandle,
    shader_module: NonDisposableHandle,
    p_identifier: *mut VkShaderModuleIdentifierEXT,
) -> c_void {
    trace!("called vkGetShaderModuleIdentifierEXT({device:?}, {shader_module:?}, {p_identifier:?})");

    let mut packet = new_packet(1000001556);
    packet.write(device);
    packet.write(shader_module);
    packet.write_nullable_raw_ptr_mut(p_identifier);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_identifier);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderModuleCreateInfoIdentifierEXT.html>"]
unsafe extern "system" fn vkGetShaderModuleCreateInfoIdentifierEXT(
    device: NonDisposableHandle,
    p_create_info: *const VkShaderModuleCreateInfo,
    p_identifier: *mut VkShaderModuleIdentifierEXT,
) -> c_void {
    trace!("called vkGetShaderModuleCreateInfoIdentifierEXT({device:?}, {p_create_info:?}, {p_identifier:?})");

    let mut packet = new_packet(1000001557);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr_mut(p_identifier);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_identifier);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetImageSubresourceLayout2KHR.html>"]
unsafe extern "system" fn vkGetImageSubresourceLayout2KHR(
    device: NonDisposableHandle,
    image: NonDisposableHandle,
    p_subresource: *const VkImageSubresource2KHR,
    p_layout: *mut VkSubresourceLayout2KHR,
) -> c_void {
    trace!("called vkGetImageSubresourceLayout2KHR({device:?}, {image:?}, {p_subresource:?}, {p_layout:?})");

    let mut packet = new_packet(1000001558);
    packet.write(device);
    packet.write(image);
    packet.write_nullable_raw_ptr(p_subresource);
    packet.write_nullable_raw_ptr_mut(p_layout);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_layout);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPipelinePropertiesEXT.html>"]
unsafe extern "system" fn vkGetPipelinePropertiesEXT(
    device: NonDisposableHandle,
    p_pipeline_info: *const NonDisposableHandle,
    p_pipeline_properties: *mut VkBaseOutStructure,
) -> NonDisposableHandle {
    trace!("called vkGetPipelinePropertiesEXT({device:?}, {p_pipeline_info:?}, {p_pipeline_properties:?})");

    let mut packet = new_packet(1000001559);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_pipeline_info);
    packet.write_nullable_raw_ptr_mut(p_pipeline_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipeline_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkExportMetalObjectsEXT.html>"]
unsafe extern "system" fn vkExportMetalObjectsEXT(
    device: NonDisposableHandle,
    p_metal_objects_info: *mut VkExportMetalObjectsInfoEXT,
) -> c_void {
    trace!("called vkExportMetalObjectsEXT({device:?}, {p_metal_objects_info:?})");

    let mut packet = new_packet(1000001560);
    packet.write(device);
    packet.write_nullable_raw_ptr_mut(p_metal_objects_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_metal_objects_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetFramebufferTilePropertiesQCOM.html>"]
unsafe extern "system" fn vkGetFramebufferTilePropertiesQCOM(
    device: NonDisposableHandle,
    framebuffer: NonDisposableHandle,
    p_properties_count: *mut u32,
    p_properties: *mut VkTilePropertiesQCOM,
) -> NonDisposableHandle {
    trace!("called vkGetFramebufferTilePropertiesQCOM({device:?}, {framebuffer:?}, {p_properties_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001561);
    packet.write(device);
    packet.write(framebuffer);
    packet.write_vk_array_count(p_properties_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_properties_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDynamicRenderingTilePropertiesQCOM.html>"]
unsafe extern "system" fn vkGetDynamicRenderingTilePropertiesQCOM(
    device: NonDisposableHandle,
    p_rendering_info: *const VkRenderingInfo,
    p_properties: *mut VkTilePropertiesQCOM,
) -> NonDisposableHandle {
    trace!("called vkGetDynamicRenderingTilePropertiesQCOM({device:?}, {p_rendering_info:?}, {p_properties:?})");

    let mut packet = new_packet(1000001562);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_rendering_info);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceOpticalFlowImageFormatsNV.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
    physical_device: NonDisposableHandle,
    p_optical_flow_image_format_info: *const VkOpticalFlowImageFormatInfoNV,
    p_format_count: *mut u32,
    p_image_format_properties: *mut VkOpticalFlowImageFormatPropertiesNV,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceOpticalFlowImageFormatsNV({physical_device:?}, {p_optical_flow_image_format_info:?}, {p_format_count:?}, {p_image_format_properties:?})");

    let mut packet = new_packet(1000001563);
    packet.write(physical_device);
    packet.write_nullable_raw_ptr(p_optical_flow_image_format_info);
    packet.write_vk_array_count(p_format_count, p_image_format_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_format_count, p_image_format_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateOpticalFlowSessionNV.html>"]
unsafe extern "system" fn vkCreateOpticalFlowSessionNV(
    device: NonDisposableHandle,
    p_create_info: *const VkOpticalFlowSessionCreateInfoNV,
    p_allocator: *const VkAllocationCallbacks,
    p_session: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateOpticalFlowSessionNV({device:?}, {p_create_info:?}, {p_allocator:?}, {p_session:?})");

    let mut packet = new_packet(1000001564);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_create_info);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_session);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_session);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyOpticalFlowSessionNV.html>"]
unsafe extern "system" fn vkDestroyOpticalFlowSessionNV(
    device: NonDisposableHandle,
    session: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyOpticalFlowSessionNV({device:?}, {session:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001565);
    packet.write(device);
    packet.write(session);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkBindOpticalFlowSessionImageNV.html>"]
unsafe extern "system" fn vkBindOpticalFlowSessionImageNV(
    device: NonDisposableHandle,
    session: NonDisposableHandle,
    binding_point: NonDisposableHandle,
    view: NonDisposableHandle,
    layout: NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkBindOpticalFlowSessionImageNV({device:?}, {session:?}, {binding_point:?}, {view:?}, {layout:?})");

    let mut packet = new_packet(1000001566);
    packet.write(device);
    packet.write(session);
    packet.write(binding_point);
    packet.write(view);
    packet.write(layout);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdOpticalFlowExecuteNV.html>"]
unsafe extern "system" fn vkCmdOpticalFlowExecuteNV(
    command_buffer: NonDisposableHandle,
    session: NonDisposableHandle,
    p_execute_info: *const VkOpticalFlowExecuteInfoNV,
) -> c_void {
    trace!("called vkCmdOpticalFlowExecuteNV({command_buffer:?}, {session:?}, {p_execute_info:?})");

    let mut packet = new_packet(1000001567);
    packet.write(command_buffer);
    packet.write(session);
    packet.write_nullable_raw_ptr(p_execute_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceFaultInfoEXT.html>"]
unsafe extern "system" fn vkGetDeviceFaultInfoEXT(
    device: NonDisposableHandle,
    p_fault_counts: *mut VkDeviceFaultCountsEXT,
    p_fault_info: *mut VkDeviceFaultInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkGetDeviceFaultInfoEXT({device:?}, {p_fault_counts:?}, {p_fault_info:?})");

    let mut packet = new_packet(1000001568);
    packet.write(device);
    packet.write_nullable_raw_ptr_mut(p_fault_counts);
    packet.write_nullable_raw_ptr_mut(p_fault_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_fault_counts);
    response.read_to_raw_ptr(p_fault_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDepthBias2EXT.html>"]
unsafe extern "system" fn vkCmdSetDepthBias2EXT(
    command_buffer: NonDisposableHandle,
    p_depth_bias_info: *const VkDepthBiasInfoEXT,
) -> c_void {
    trace!("called vkCmdSetDepthBias2EXT({command_buffer:?}, {p_depth_bias_info:?})");

    let mut packet = new_packet(1000001569);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_depth_bias_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkReleaseSwapchainImagesEXT.html>"]
unsafe extern "system" fn vkReleaseSwapchainImagesEXT(
    device: NonDisposableHandle,
    p_release_info: *const VkReleaseSwapchainImagesInfoEXT,
) -> NonDisposableHandle {
    trace!("called vkReleaseSwapchainImagesEXT({device:?}, {p_release_info:?})");

    let mut packet = new_packet(1000001570);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_release_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceImageSubresourceLayoutKHR.html>"]
unsafe extern "system" fn vkGetDeviceImageSubresourceLayoutKHR(
    device: NonDisposableHandle,
    p_info: *const VkDeviceImageSubresourceInfoKHR,
    p_layout: *mut VkSubresourceLayout2KHR,
) -> c_void {
    trace!("called vkGetDeviceImageSubresourceLayoutKHR({device:?}, {p_info:?}, {p_layout:?})");

    let mut packet = new_packet(1000001571);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_info);
    packet.write_nullable_raw_ptr_mut(p_layout);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_layout);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkMapMemory2KHR.html>"]
unsafe extern "system" fn vkMapMemory2KHR(
    device: NonDisposableHandle,
    p_memory_map_info: *const VkMemoryMapInfoKHR,
    pp_data: *mut *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkMapMemory2KHR({device:?}, {p_memory_map_info:?}, {pp_data:?})");

    let mut packet = new_packet(1000001572);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_memory_map_info);
    packet.write_nullable_raw_ptr_mut(pp_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(pp_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkUnmapMemory2KHR.html>"]
unsafe extern "system" fn vkUnmapMemory2KHR(
    device: NonDisposableHandle,
    p_memory_unmap_info: *const VkMemoryUnmapInfoKHR,
) -> NonDisposableHandle {
    trace!("called vkUnmapMemory2KHR({device:?}, {p_memory_unmap_info:?})");

    let mut packet = new_packet(1000001573);
    packet.write(device);
    packet.write_nullable_raw_ptr(p_memory_unmap_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateShadersEXT.html>"]
unsafe extern "system" fn vkCreateShadersEXT(
    device: NonDisposableHandle,
    create_info_count: u32,
    p_create_infos: *const VkShaderCreateInfoEXT,
    p_allocator: *const VkAllocationCallbacks,
    p_shaders: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateShadersEXT({device:?}, {create_info_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_shaders:?})");

    let mut packet = new_packet(1000001574);
    packet.write(device);
    packet.write(create_info_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_shaders);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_shaders);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkDestroyShaderEXT.html>"]
unsafe extern "system" fn vkDestroyShaderEXT(
    device: NonDisposableHandle,
    shader: NonDisposableHandle,
    p_allocator: *const VkAllocationCallbacks,
) -> c_void {
    trace!("called vkDestroyShaderEXT({device:?}, {shader:?}, {p_allocator:?})");

    let mut packet = new_packet(1000001575);
    packet.write(device);
    packet.write(shader);
    packet.write_nullable_raw_ptr(p_allocator);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetShaderBinaryDataEXT.html>"]
unsafe extern "system" fn vkGetShaderBinaryDataEXT(
    device: NonDisposableHandle,
    shader: NonDisposableHandle,
    p_data_size: *mut usize,
    p_data: *mut c_void,
) -> NonDisposableHandle {
    trace!("called vkGetShaderBinaryDataEXT({device:?}, {shader:?}, {p_data_size:?}, {p_data:?})");

    let mut packet = new_packet(1000001576);
    packet.write(device);
    packet.write(shader);
    packet.write_nullable_raw_ptr_mut(p_data_size);
    packet.write_nullable_raw_ptr_mut(p_data);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_data_size);
    response.read_to_raw_ptr(p_data);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindShadersEXT.html>"]
unsafe extern "system" fn vkCmdBindShadersEXT(
    command_buffer: NonDisposableHandle,
    stage_count: u32,
    p_stages: *const vk::ShaderStageFlags,
    p_shaders: *const NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdBindShadersEXT({command_buffer:?}, {stage_count:?}, {p_stages:?}, {p_shaders:?})");

    let mut packet = new_packet(1000001577);
    packet.write(command_buffer);
    packet.write(stage_count);
    packet.write_nullable_raw_ptr(p_stages);
    packet.write_nullable_raw_ptr(p_shaders);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetScreenBufferPropertiesQNX.html>"]
unsafe extern "system" fn vkGetScreenBufferPropertiesQNX(
    device: NonDisposableHandle,
    buffer: *const usize,
    p_properties: *mut VkScreenBufferPropertiesQNX,
) -> NonDisposableHandle {
    trace!("called vkGetScreenBufferPropertiesQNX({device:?}, {buffer:?}, {p_properties:?})");

    let mut packet = new_packet(1000001578);
    packet.write(device);
    packet.write_nullable_raw_ptr(buffer);
    packet.write_nullable_raw_ptr_mut(p_properties);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.html>"]
unsafe extern "system" fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(
    physical_device: NonDisposableHandle,
    p_property_count: *mut u32,
    p_properties: *mut VkCooperativeMatrixPropertiesKHR,
) -> NonDisposableHandle {
    trace!("called vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR({physical_device:?}, {p_property_count:?}, {p_properties:?})");

    let mut packet = new_packet(1000001579);
    packet.write(physical_device);
    packet.write_vk_array_count(p_property_count, p_properties);

    let mut response = packet.send_with_response();
    response.read_vk_array(p_property_count, p_properties);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetExecutionGraphPipelineScratchSizeAMDX.html>"]
unsafe extern "system" fn vkGetExecutionGraphPipelineScratchSizeAMDX(
    device: NonDisposableHandle,
    execution_graph: NonDisposableHandle,
    p_size_info: *mut VkExecutionGraphPipelineScratchSizeAMDX,
) -> NonDisposableHandle {
    trace!("called vkGetExecutionGraphPipelineScratchSizeAMDX({device:?}, {execution_graph:?}, {p_size_info:?})");

    let mut packet = new_packet(1000001580);
    packet.write(device);
    packet.write(execution_graph);
    packet.write_nullable_raw_ptr_mut(p_size_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_size_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetExecutionGraphPipelineNodeIndexAMDX.html>"]
unsafe extern "system" fn vkGetExecutionGraphPipelineNodeIndexAMDX(
    device: NonDisposableHandle,
    execution_graph: NonDisposableHandle,
    p_node_info: *const VkPipelineShaderStageNodeCreateInfoAMDX,
    p_node_index: *mut u32,
) -> NonDisposableHandle {
    trace!("called vkGetExecutionGraphPipelineNodeIndexAMDX({device:?}, {execution_graph:?}, {p_node_info:?}, {p_node_index:?})");

    let mut packet = new_packet(1000001581);
    packet.write(device);
    packet.write(execution_graph);
    packet.write_nullable_raw_ptr(p_node_info);
    packet.write_nullable_raw_ptr_mut(p_node_index);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_node_index);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateExecutionGraphPipelinesAMDX.html>"]
unsafe extern "system" fn vkCreateExecutionGraphPipelinesAMDX(
    device: NonDisposableHandle,
    pipeline_cache: NonDisposableHandle,
    create_info_count: u32,
    p_create_infos: *const VkExecutionGraphPipelineCreateInfoAMDX,
    p_allocator: *const VkAllocationCallbacks,
    p_pipelines: *mut NonDisposableHandle,
) -> NonDisposableHandle {
    trace!("called vkCreateExecutionGraphPipelinesAMDX({device:?}, {pipeline_cache:?}, {create_info_count:?}, {p_create_infos:?}, {p_allocator:?}, {p_pipelines:?})");

    let mut packet = new_packet(1000001582);
    packet.write(device);
    packet.write(pipeline_cache);
    packet.write(create_info_count);
    packet.write_nullable_raw_ptr(p_create_infos);
    packet.write_nullable_raw_ptr(p_allocator);
    packet.write_nullable_raw_ptr_mut(p_pipelines);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_pipelines);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdInitializeGraphScratchMemoryAMDX.html>"]
unsafe extern "system" fn vkCmdInitializeGraphScratchMemoryAMDX(
    command_buffer: NonDisposableHandle,
    scratch: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdInitializeGraphScratchMemoryAMDX({command_buffer:?}, {scratch:?})");

    let mut packet = new_packet(1000001583);
    packet.write(command_buffer);
    packet.write(scratch);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphAMDX.html>"]
unsafe extern "system" fn vkCmdDispatchGraphAMDX(
    command_buffer: NonDisposableHandle,
    scratch: NonDisposableHandle,
    p_count_info: *const VkDispatchGraphCountInfoAMDX,
) -> c_void {
    trace!("called vkCmdDispatchGraphAMDX({command_buffer:?}, {scratch:?}, {p_count_info:?})");

    let mut packet = new_packet(1000001584);
    packet.write(command_buffer);
    packet.write(scratch);
    packet.write_nullable_raw_ptr(p_count_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphIndirectAMDX.html>"]
unsafe extern "system" fn vkCmdDispatchGraphIndirectAMDX(
    command_buffer: NonDisposableHandle,
    scratch: NonDisposableHandle,
    p_count_info: *const VkDispatchGraphCountInfoAMDX,
) -> c_void {
    trace!("called vkCmdDispatchGraphIndirectAMDX({command_buffer:?}, {scratch:?}, {p_count_info:?})");

    let mut packet = new_packet(1000001585);
    packet.write(command_buffer);
    packet.write(scratch);
    packet.write_nullable_raw_ptr(p_count_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDispatchGraphIndirectCountAMDX.html>"]
unsafe extern "system" fn vkCmdDispatchGraphIndirectCountAMDX(
    command_buffer: NonDisposableHandle,
    scratch: NonDisposableHandle,
    count_info: NonDisposableHandle,
) -> c_void {
    trace!("called vkCmdDispatchGraphIndirectCountAMDX({command_buffer:?}, {scratch:?}, {count_info:?})");

    let mut packet = new_packet(1000001586);
    packet.write(command_buffer);
    packet.write(scratch);
    packet.write(count_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorSets2KHR.html>"]
unsafe extern "system" fn vkCmdBindDescriptorSets2KHR(
    command_buffer: NonDisposableHandle,
    p_bind_descriptor_sets_info: *const VkBindDescriptorSetsInfoKHR,
) -> c_void {
    trace!("called vkCmdBindDescriptorSets2KHR({command_buffer:?}, {p_bind_descriptor_sets_info:?})");

    let mut packet = new_packet(1000001587);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_bind_descriptor_sets_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants2KHR.html>"]
unsafe extern "system" fn vkCmdPushConstants2KHR(
    command_buffer: NonDisposableHandle,
    p_push_constants_info: *const VkPushConstantsInfoKHR,
) -> c_void {
    trace!("called vkCmdPushConstants2KHR({command_buffer:?}, {p_push_constants_info:?})");

    let mut packet = new_packet(1000001588);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_push_constants_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSet2KHR.html>"]
unsafe extern "system" fn vkCmdPushDescriptorSet2KHR(
    command_buffer: NonDisposableHandle,
    p_push_descriptor_set_info: *const VkPushDescriptorSetInfoKHR,
) -> c_void {
    trace!("called vkCmdPushDescriptorSet2KHR({command_buffer:?}, {p_push_descriptor_set_info:?})");

    let mut packet = new_packet(1000001589);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_push_descriptor_set_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushDescriptorSetWithTemplate2KHR.html>"]
unsafe extern "system" fn vkCmdPushDescriptorSetWithTemplate2KHR(
    command_buffer: NonDisposableHandle,
    p_push_descriptor_set_with_template_info: *const VkPushDescriptorSetWithTemplateInfoKHR,
) -> c_void {
    trace!("called vkCmdPushDescriptorSetWithTemplate2KHR({command_buffer:?}, {p_push_descriptor_set_with_template_info:?})");

    let mut packet = new_packet(1000001590);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_push_descriptor_set_with_template_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetDescriptorBufferOffsets2EXT.html>"]
unsafe extern "system" fn vkCmdSetDescriptorBufferOffsets2EXT(
    command_buffer: NonDisposableHandle,
    p_set_descriptor_buffer_offsets_info: *const VkSetDescriptorBufferOffsetsInfoEXT,
) -> c_void {
    trace!("called vkCmdSetDescriptorBufferOffsets2EXT({command_buffer:?}, {p_set_descriptor_buffer_offsets_info:?})");

    let mut packet = new_packet(1000001591);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_set_descriptor_buffer_offsets_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.html>"]
unsafe extern "system" fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(
    command_buffer: NonDisposableHandle,
    p_bind_descriptor_buffer_embedded_samplers_info: *const VkBindDescriptorBufferEmbeddedSamplersInfoEXT,
) -> c_void {
    trace!("called vkCmdBindDescriptorBufferEmbeddedSamplers2EXT({command_buffer:?}, {p_bind_descriptor_buffer_embedded_samplers_info:?})");

    let mut packet = new_packet(1000001592);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_bind_descriptor_buffer_embedded_samplers_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLatencySleepModeNV.html>"]
unsafe extern "system" fn vkSetLatencySleepModeNV(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_sleep_mode_info: *const VkLatencySleepModeInfoNV,
) -> NonDisposableHandle {
    trace!("called vkSetLatencySleepModeNV({device:?}, {swapchain:?}, {p_sleep_mode_info:?})");

    let mut packet = new_packet(1000001593);
    packet.write(device);
    packet.write(swapchain);
    packet.write_nullable_raw_ptr(p_sleep_mode_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkLatencySleepNV.html>"]
unsafe extern "system" fn vkLatencySleepNV(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_sleep_info: *const VkLatencySleepInfoNV,
) -> NonDisposableHandle {
    trace!("called vkLatencySleepNV({device:?}, {swapchain:?}, {p_sleep_info:?})");

    let mut packet = new_packet(1000001594);
    packet.write(device);
    packet.write(swapchain);
    packet.write_nullable_raw_ptr(p_sleep_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkSetLatencyMarkerNV.html>"]
unsafe extern "system" fn vkSetLatencyMarkerNV(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_latency_marker_info: *const VkSetLatencyMarkerInfoNV,
) -> c_void {
    trace!("called vkSetLatencyMarkerNV({device:?}, {swapchain:?}, {p_latency_marker_info:?})");

    let mut packet = new_packet(1000001595);
    packet.write(device);
    packet.write(swapchain);
    packet.write_nullable_raw_ptr(p_latency_marker_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetLatencyTimingsNV.html>"]
unsafe extern "system" fn vkGetLatencyTimingsNV(
    device: NonDisposableHandle,
    swapchain: NonDisposableHandle,
    p_latency_marker_info: *mut VkGetLatencyMarkerInfoNV,
) -> c_void {
    trace!("called vkGetLatencyTimingsNV({device:?}, {swapchain:?}, {p_latency_marker_info:?})");

    let mut packet = new_packet(1000001596);
    packet.write(device);
    packet.write(swapchain);
    packet.write_nullable_raw_ptr_mut(p_latency_marker_info);

    let mut response = packet.send_with_response();
    response.read_to_raw_ptr(p_latency_marker_info);
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkQueueNotifyOutOfBandNV.html>"]
unsafe extern "system" fn vkQueueNotifyOutOfBandNV(
    queue: NonDisposableHandle,
    p_queue_type_info: *const VkOutOfBandQueueTypeInfoNV,
) -> c_void {
    trace!("called vkQueueNotifyOutOfBandNV({queue:?}, {p_queue_type_info:?})");

    let mut packet = new_packet(1000001597);
    packet.write(queue);
    packet.write_nullable_raw_ptr(p_queue_type_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRenderingAttachmentLocationsKHR.html>"]
unsafe extern "system" fn vkCmdSetRenderingAttachmentLocationsKHR(
    command_buffer: NonDisposableHandle,
    p_location_info: *const VkRenderingAttachmentLocationInfoKHR,
) -> c_void {
    trace!("called vkCmdSetRenderingAttachmentLocationsKHR({command_buffer:?}, {p_location_info:?})");

    let mut packet = new_packet(1000001598);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_location_info);

    let mut response = packet.send_with_response();
    response.read()
}

#[no_mangle]
#[doc = "<https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetRenderingInputAttachmentIndicesKHR.html>"]
unsafe extern "system" fn vkCmdSetRenderingInputAttachmentIndicesKHR(
    command_buffer: NonDisposableHandle,
    p_location_info: *const VkRenderingInputAttachmentIndexInfoKHR,
) -> c_void {
    trace!("called vkCmdSetRenderingInputAttachmentIndicesKHR({command_buffer:?}, {p_location_info:?})");

    let mut packet = new_packet(1000001599);
    packet.write(command_buffer);
    packet.write_nullable_raw_ptr(p_location_info);

    let mut response = packet.send_with_response();
    response.read()
}
